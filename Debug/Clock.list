
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb4  08004eb4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ebc  08004ebc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000078  08004f3c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004f3c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f83e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000238c  00000000  00000000  0002f8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00032b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023565  00000000  00000000  000338f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c38a  00000000  00000000  00056e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d601c  00000000  00000000  000631df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001391fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004070  00000000  00000000  00139278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004da4 	.word	0x08004da4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004da4 	.word	0x08004da4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <delay_us>:
  *
  * @retval None
  */

void delay_us(uint32_t microseconds)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <delay_us+0x2c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	625a      	str	r2, [r3, #36]	; 0x24

	while( __HAL_TIM_GET_COUNTER(&htim5) < microseconds);
 80005c0:	bf00      	nop
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <delay_us+0x2c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d8f9      	bhi.n	80005c2 <delay_us+0x12>
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000118 	.word	0x20000118

080005e0 <Push_Beep_Button>:
  *
  * @retval None
  */

void Push_Beep_Button(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, BUZZER_OUT_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <Push_Beep_Button+0x24>)
 80005ea:	f001 fc27 	bl	8001e3c <HAL_GPIO_WritePin>
	delay_us(5000);
 80005ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80005f2:	f7ff ffdd 	bl	80005b0 <delay_us>
	HAL_GPIO_WritePin(GPIOA, BUZZER_OUT_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4802      	ldr	r0, [pc, #8]	; (8000604 <Push_Beep_Button+0x24>)
 80005fc:	f001 fc1e 	bl	8001e3c <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020000 	.word	0x40020000

08000608 <setting_hours>:

void (*date_config[MENU_ITEMS_CONFIG])(uint8_t * G_counter) = {NULL};


static void setting_hours(uint8_t * hours)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	*hours = STime.Hours;
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <setting_hours+0x64>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x02)
 8000618:	e01a      	b.n	8000650 <setting_hours+0x48>
	{
		if(12 < *hours)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b0c      	cmp	r3, #12
 8000620:	d903      	bls.n	800062a <setting_hours+0x22>
		{
			*hours = ZERO_VALUE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	e012      	b.n	8000650 <setting_hours+0x48>
		}
		else
		{
			Clear();
 800062a:	f000 fbb3 	bl	8000d94 <Clear>
			Set_Cursor(Column_1, Row_1);
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fb91 	bl	8000d58 <Set_Cursor>
			sprintf((char *)Buffer, "Setting Hrs:%d", global_counter);
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <setting_hours+0x68>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <setting_hours+0x6c>)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <setting_hours+0x70>)
 8000640:	f003 ffaa 	bl	8004598 <siprintf>
			print_string(Buffer);
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <setting_hours+0x70>)
 8000646:	f000 fb6c 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <setting_hours+0x74>)
 800064c:	f7ff ffb0 	bl	80005b0 <delay_us>
	while(G_Status_F.shifting_parameter == 0x02)
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <setting_hours+0x78>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d0e0      	beq.n	800061a <setting_hours+0x12>
		}
	}
	STime.Hours = *hours;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <setting_hours+0x64>)
 800065e:	701a      	strb	r2, [r3, #0]
	Clear();
 8000660:	f000 fb98 	bl	8000d94 <Clear>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000d4 	.word	0x200000d4
 8000670:	20000108 	.word	0x20000108
 8000674:	08004dbc 	.word	0x08004dbc
 8000678:	200000ac 	.word	0x200000ac
 800067c:	000186a0 	.word	0x000186a0
 8000680:	20000158 	.word	0x20000158

08000684 <setting_minutes>:


static void setting_minutes(uint8_t * minutes)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	*minutes = STime.Minutes;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <setting_minutes+0x64>)
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x04)
 8000694:	e01a      	b.n	80006cc <setting_minutes+0x48>
	{
		if(60 < *minutes)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b3c      	cmp	r3, #60	; 0x3c
 800069c:	d903      	bls.n	80006a6 <setting_minutes+0x22>
		{
			*minutes = ZERO_VALUE;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	e012      	b.n	80006cc <setting_minutes+0x48>
		}
		else
		{
			Clear();
 80006a6:	f000 fb75 	bl	8000d94 <Clear>
			Set_Cursor(Column_1, Row_1);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fb53 	bl	8000d58 <Set_Cursor>
			sprintf((char *)Buffer, "Setting Min:%d", global_counter);
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <setting_minutes+0x68>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	490d      	ldr	r1, [pc, #52]	; (80006f0 <setting_minutes+0x6c>)
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <setting_minutes+0x70>)
 80006bc:	f003 ff6c 	bl	8004598 <siprintf>
			print_string(Buffer);
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <setting_minutes+0x70>)
 80006c2:	f000 fb2e 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <setting_minutes+0x74>)
 80006c8:	f7ff ff72 	bl	80005b0 <delay_us>
	while(G_Status_F.shifting_parameter == 0x04)
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <setting_minutes+0x78>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d0e0      	beq.n	8000696 <setting_minutes+0x12>
		}
	}
	STime.Minutes = *minutes;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <setting_minutes+0x64>)
 80006da:	705a      	strb	r2, [r3, #1]
	Clear();
 80006dc:	f000 fb5a 	bl	8000d94 <Clear>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000d4 	.word	0x200000d4
 80006ec:	20000108 	.word	0x20000108
 80006f0:	08004dcc 	.word	0x08004dcc
 80006f4:	200000ac 	.word	0x200000ac
 80006f8:	000186a0 	.word	0x000186a0
 80006fc:	20000158 	.word	0x20000158

08000700 <setting_seconds>:

static void setting_seconds(uint8_t * seconds)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	*seconds = STime.Seconds;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <setting_seconds+0x64>)
 800070a:	789a      	ldrb	r2, [r3, #2]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x08)
 8000710:	e01a      	b.n	8000748 <setting_seconds+0x48>
	{
		if(60 < *seconds)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b3c      	cmp	r3, #60	; 0x3c
 8000718:	d903      	bls.n	8000722 <setting_seconds+0x22>
		{
			*seconds = ZERO_VALUE;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e012      	b.n	8000748 <setting_seconds+0x48>
		}
		else
		{
			Clear();
 8000722:	f000 fb37 	bl	8000d94 <Clear>
			Set_Cursor(Column_1, Row_1);
 8000726:	2100      	movs	r1, #0
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fb15 	bl	8000d58 <Set_Cursor>
			sprintf((char *)Buffer, "Setting Sec:%d", global_counter);
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <setting_seconds+0x68>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	490d      	ldr	r1, [pc, #52]	; (800076c <setting_seconds+0x6c>)
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <setting_seconds+0x70>)
 8000738:	f003 ff2e 	bl	8004598 <siprintf>
			print_string(Buffer);
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <setting_seconds+0x70>)
 800073e:	f000 faf0 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <setting_seconds+0x74>)
 8000744:	f7ff ff34 	bl	80005b0 <delay_us>
	while(G_Status_F.shifting_parameter == 0x08)
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <setting_seconds+0x78>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d0e0      	beq.n	8000712 <setting_seconds+0x12>
		}
	}
	STime.Seconds = *seconds;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <setting_seconds+0x64>)
 8000756:	709a      	strb	r2, [r3, #2]
	Clear();
 8000758:	f000 fb1c 	bl	8000d94 <Clear>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000d4 	.word	0x200000d4
 8000768:	20000108 	.word	0x20000108
 800076c:	08004ddc 	.word	0x08004ddc
 8000770:	200000ac 	.word	0x200000ac
 8000774:	000186a0 	.word	0x000186a0
 8000778:	20000158 	.word	0x20000158

0800077c <setting_period>:

static void setting_period(uint8_t * period)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	*period = ZERO_VALUE;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x10)
 800078a:	e01e      	b.n	80007ca <setting_period+0x4e>
	{
		if(1 < *period)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d903      	bls.n	800079c <setting_period+0x20>
		{
			*period = ZERO_VALUE;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
 800079a:	e016      	b.n	80007ca <setting_period+0x4e>
		}
		else
		{
			Clear();
 800079c:	f000 fafa 	bl	8000d94 <Clear>
			Set_Cursor(Column_1, Row_1);
 80007a0:	2100      	movs	r1, #0
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 fad8 	bl	8000d58 <Set_Cursor>
			sprintf((char *)Buffer, "Sel Period:%s", str[*period]);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <setting_period+0x78>)
 80007b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4910      	ldr	r1, [pc, #64]	; (80007f8 <setting_period+0x7c>)
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <setting_period+0x80>)
 80007ba:	f003 feed 	bl	8004598 <siprintf>
			print_string(Buffer);
 80007be:	480f      	ldr	r0, [pc, #60]	; (80007fc <setting_period+0x80>)
 80007c0:	f000 faaf 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <setting_period+0x84>)
 80007c6:	f7ff fef3 	bl	80005b0 <delay_us>
	while(G_Status_F.shifting_parameter == 0x10)
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <setting_period+0x88>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b10      	cmp	r3, #16
 80007d0:	d0dc      	beq.n	800078c <setting_period+0x10>
		}
	}
	if(0x00 == *period)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d103      	bne.n	80007e2 <setting_period+0x66>
	{
		STime.TimeFormat = RTC_HOURFORMAT12_AM;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <setting_period+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	70da      	strb	r2, [r3, #3]
 80007e0:	e002      	b.n	80007e8 <setting_period+0x6c>
	}
	else
	{
		STime.TimeFormat = RTC_HOURFORMAT12_PM;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <setting_period+0x8c>)
 80007e4:	2240      	movs	r2, #64	; 0x40
 80007e6:	70da      	strb	r2, [r3, #3]
	}
	Clear();
 80007e8:	f000 fad4 	bl	8000d94 <Clear>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	08004dec 	.word	0x08004dec
 80007fc:	200000ac 	.word	0x200000ac
 8000800:	000186a0 	.word	0x000186a0
 8000804:	20000158 	.word	0x20000158
 8000808:	200000d4 	.word	0x200000d4

0800080c <setting_day>:

static void setting_day(uint8_t * day)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	*day = SDate.WeekDay;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <setting_day+0x64>)
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x20)
 800081c:	e01a      	b.n	8000854 <setting_day+0x48>
	{
		if(31 < *day)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b1f      	cmp	r3, #31
 8000824:	d903      	bls.n	800082e <setting_day+0x22>
		{
			*day = ZERO_VALUE;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e012      	b.n	8000854 <setting_day+0x48>
		}
		else
		{
			Clear();
 800082e:	f000 fab1 	bl	8000d94 <Clear>
			Set_Cursor(Column_1, Row_1);
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fa8f 	bl	8000d58 <Set_Cursor>
			sprintf((char *)Buffer, "Setting Day:%d", global_counter);
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <setting_day+0x68>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	490d      	ldr	r1, [pc, #52]	; (8000878 <setting_day+0x6c>)
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <setting_day+0x70>)
 8000844:	f003 fea8 	bl	8004598 <siprintf>
			print_string(Buffer);
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <setting_day+0x70>)
 800084a:	f000 fa6a 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <setting_day+0x74>)
 8000850:	f7ff feae 	bl	80005b0 <delay_us>
	while(G_Status_F.shifting_parameter == 0x20)
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <setting_day+0x78>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	2b20      	cmp	r3, #32
 800085a:	d0e0      	beq.n	800081e <setting_day+0x12>
		}
	}
	SDate.Date = *day;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <setting_day+0x64>)
 8000862:	709a      	strb	r2, [r3, #2]
	Clear();
 8000864:	f000 fa96 	bl	8000d94 <Clear>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000e8 	.word	0x200000e8
 8000874:	20000108 	.word	0x20000108
 8000878:	08004dfc 	.word	0x08004dfc
 800087c:	200000ac 	.word	0x200000ac
 8000880:	000186a0 	.word	0x000186a0
 8000884:	20000158 	.word	0x20000158

08000888 <setting_month>:

static void setting_month(uint8_t * month)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	*month = SDate.Month;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <setting_month+0x64>)
 8000892:	785a      	ldrb	r2, [r3, #1]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x40)
 8000898:	e01a      	b.n	80008d0 <setting_month+0x48>
	{
		if(12 < *month)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b0c      	cmp	r3, #12
 80008a0:	d903      	bls.n	80008aa <setting_month+0x22>
		{
			*month = ZERO_VALUE;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e012      	b.n	80008d0 <setting_month+0x48>
		}
		else
		{
			Clear();
 80008aa:	f000 fa73 	bl	8000d94 <Clear>
			Set_Cursor(Column_1, Row_1);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fa51 	bl	8000d58 <Set_Cursor>
			sprintf((char *)Buffer, "Setting MTH:%d", global_counter);
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <setting_month+0x68>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	490d      	ldr	r1, [pc, #52]	; (80008f4 <setting_month+0x6c>)
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <setting_month+0x70>)
 80008c0:	f003 fe6a 	bl	8004598 <siprintf>
			print_string(Buffer);
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <setting_month+0x70>)
 80008c6:	f000 fa2c 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <setting_month+0x74>)
 80008cc:	f7ff fe70 	bl	80005b0 <delay_us>
	while(G_Status_F.shifting_parameter == 0x40)
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <setting_month+0x78>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	2b40      	cmp	r3, #64	; 0x40
 80008d6:	d0e0      	beq.n	800089a <setting_month+0x12>
		}
	}
	SDate.Month = *month;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <setting_month+0x64>)
 80008de:	705a      	strb	r2, [r3, #1]
	Clear();
 80008e0:	f000 fa58 	bl	8000d94 <Clear>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000e8 	.word	0x200000e8
 80008f0:	20000108 	.word	0x20000108
 80008f4:	08004e0c 	.word	0x08004e0c
 80008f8:	200000ac 	.word	0x200000ac
 80008fc:	000186a0 	.word	0x000186a0
 8000900:	20000158 	.word	0x20000158

08000904 <setting_year>:

static void setting_year(uint8_t * year)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	*year = SDate.Year;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <setting_year+0x68>)
 800090e:	78da      	ldrb	r2, [r3, #3]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x80)
 8000914:	e01c      	b.n	8000950 <setting_year+0x4c>
	{
		if(99 < *year)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b63      	cmp	r3, #99	; 0x63
 800091c:	d903      	bls.n	8000926 <setting_year+0x22>
		{
			*year = ZERO_VALUE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e014      	b.n	8000950 <setting_year+0x4c>
		}
		else
		{
			Clear();
 8000926:	f000 fa35 	bl	8000d94 <Clear>
			Set_Cursor(Column_1, Row_1);
 800092a:	2100      	movs	r1, #0
 800092c:	2000      	movs	r0, #0
 800092e:	f000 fa13 	bl	8000d58 <Set_Cursor>
			sprintf((char *)Buffer, "Setting Yr:%d", (2000 +global_counter));
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <setting_year+0x6c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800093a:	461a      	mov	r2, r3
 800093c:	490d      	ldr	r1, [pc, #52]	; (8000974 <setting_year+0x70>)
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <setting_year+0x74>)
 8000940:	f003 fe2a 	bl	8004598 <siprintf>
			print_string(Buffer);
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <setting_year+0x74>)
 8000946:	f000 f9ec 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <setting_year+0x78>)
 800094c:	f7ff fe30 	bl	80005b0 <delay_us>
	while(G_Status_F.shifting_parameter == 0x80)
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <setting_year+0x7c>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	2b80      	cmp	r3, #128	; 0x80
 8000956:	d0de      	beq.n	8000916 <setting_year+0x12>
		}
	}
	SDate.Year = *year;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <setting_year+0x68>)
 800095e:	70da      	strb	r2, [r3, #3]
	Clear();
 8000960:	f000 fa18 	bl	8000d94 <Clear>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000e8 	.word	0x200000e8
 8000970:	20000108 	.word	0x20000108
 8000974:	08004e1c 	.word	0x08004e1c
 8000978:	200000ac 	.word	0x200000ac
 800097c:	000186a0 	.word	0x000186a0
 8000980:	20000158 	.word	0x20000158

08000984 <setting_time>:

void setting_time(uint8_t * gobla_counter_Prt)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

	Get_Time_Date(&Gglobal_time, &Gglobal_date, &hrtc);
 800098c:	4a28      	ldr	r2, [pc, #160]	; (8000a30 <setting_time+0xac>)
 800098e:	4929      	ldr	r1, [pc, #164]	; (8000a34 <setting_time+0xb0>)
 8000990:	4829      	ldr	r0, [pc, #164]	; (8000a38 <setting_time+0xb4>)
 8000992:	f000 fa15 	bl	8000dc0 <Get_Time_Date>
	STime = Gglobal_time;
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <setting_time+0xb8>)
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <setting_time+0xb4>)
 800099a:	4614      	mov	r4, r2
 800099c:	461d      	mov	r5, r3
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	6023      	str	r3, [r4, #0]
	SDate = Gglobal_date;
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <setting_time+0xbc>)
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <setting_time+0xb0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6013      	str	r3, [r2, #0]

	uint8_t iter_timer = 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]

	date_config[0] = &setting_hours;
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <setting_time+0xc0>)
 80009b4:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <setting_time+0xc4>)
 80009b6:	601a      	str	r2, [r3, #0]
	date_config[1] = &setting_minutes;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <setting_time+0xc0>)
 80009ba:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <setting_time+0xc8>)
 80009bc:	605a      	str	r2, [r3, #4]
	date_config[2] = &setting_seconds;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <setting_time+0xc0>)
 80009c0:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <setting_time+0xcc>)
 80009c2:	609a      	str	r2, [r3, #8]
	date_config[3] = &setting_period;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <setting_time+0xc0>)
 80009c6:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <setting_time+0xd0>)
 80009c8:	60da      	str	r2, [r3, #12]
	date_config[4] = &setting_day;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <setting_time+0xc0>)
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <setting_time+0xd4>)
 80009ce:	611a      	str	r2, [r3, #16]
	date_config[5] = &setting_month;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <setting_time+0xc0>)
 80009d2:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <setting_time+0xd8>)
 80009d4:	615a      	str	r2, [r3, #20]
	date_config[6] = &setting_year;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <setting_time+0xc0>)
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <setting_time+0xdc>)
 80009da:	619a      	str	r2, [r3, #24]

	for(iter_timer = ZERO_VALUE; iter_timer <= 6; iter_timer++)
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e008      	b.n	80009f4 <setting_time+0x70>
	{
		(date_config[iter_timer])(gobla_counter_Prt);
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <setting_time+0xc0>)
 80009e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	4798      	blx	r3
	for(iter_timer = ZERO_VALUE; iter_timer <= 6; iter_timer++)
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	3301      	adds	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d9f3      	bls.n	80009e2 <setting_time+0x5e>
	}

	STime.Seconds = ZERO_VALUE; // Hardcoding value since seconds are not being set
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <setting_time+0xb8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetTime(&hrtc, &STime, RTC_FORMAT_BIN) != HAL_OK)
 8000a00:	2200      	movs	r2, #0
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <setting_time+0xb8>)
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <setting_time+0xac>)
 8000a06:	f002 fae6 	bl	8002fd6 <HAL_RTC_SetTime>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <setting_time+0x90>
	{
		Error_Handler();
 8000a10:	f000 fd6a 	bl	80014e8 <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &SDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a14:	2200      	movs	r2, #0
 8000a16:	490a      	ldr	r1, [pc, #40]	; (8000a40 <setting_time+0xbc>)
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <setting_time+0xac>)
 8000a1a:	f002 fbf7 	bl	800320c <HAL_RTC_SetDate>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <setting_time+0xa4>
	{
		Error_Handler();
 8000a24:	f000 fd60 	bl	80014e8 <Error_Handler>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a30:	2000015c 	.word	0x2000015c
 8000a34:	200000d0 	.word	0x200000d0
 8000a38:	200000bc 	.word	0x200000bc
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	200000e8 	.word	0x200000e8
 8000a44:	200000ec 	.word	0x200000ec
 8000a48:	08000609 	.word	0x08000609
 8000a4c:	08000685 	.word	0x08000685
 8000a50:	08000701 	.word	0x08000701
 8000a54:	0800077d 	.word	0x0800077d
 8000a58:	0800080d 	.word	0x0800080d
 8000a5c:	08000889 	.word	0x08000889
 8000a60:	08000905 	.word	0x08000905

08000a64 <Print_Time>:
		Error_Handler();
	}
}

void Print_Time(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af02      	add	r7, sp, #8
	uint8_t str_am_pm[3] = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	460a      	mov	r2, r1
 8000a70:	801a      	strh	r2, [r3, #0]
 8000a72:	460a      	mov	r2, r1
 8000a74:	709a      	strb	r2, [r3, #2]
	Get_Time_Date(&Gglobal_time, &Gglobal_date, &hrtc);
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <Print_Time+0x7c>)
 8000a78:	491a      	ldr	r1, [pc, #104]	; (8000ae4 <Print_Time+0x80>)
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <Print_Time+0x84>)
 8000a7c:	f000 f9a0 	bl	8000dc0 <Get_Time_Date>
	if(RTC_HOURFORMAT12_AM == Gglobal_time.TimeFormat)
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <Print_Time+0x84>)
 8000a82:	78db      	ldrb	r3, [r3, #3]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <Print_Time+0x34>
	{
		memcpy(str_am_pm, str[0], 0x03);
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <Print_Time+0x88>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	8811      	ldrh	r1, [r2, #0]
 8000a90:	7892      	ldrb	r2, [r2, #2]
 8000a92:	8019      	strh	r1, [r3, #0]
 8000a94:	709a      	strb	r2, [r3, #2]
 8000a96:	e006      	b.n	8000aa6 <Print_Time+0x42>
	}
	else
	{
		memcpy(str_am_pm, str[1], 0x03);
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <Print_Time+0x88>)
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	8811      	ldrh	r1, [r2, #0]
 8000aa0:	7892      	ldrb	r2, [r2, #2]
 8000aa2:	8019      	strh	r1, [r3, #0]
 8000aa4:	709a      	strb	r2, [r3, #2]
	}
	sprintf((char *)Buffer_time, "%02d:%02d:%02d %s", Gglobal_time.Hours, Gglobal_time.Minutes, Gglobal_time.Seconds, str_am_pm);
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <Print_Time+0x84>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <Print_Time+0x84>)
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <Print_Time+0x84>)
 8000ab4:	789b      	ldrb	r3, [r3, #2]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	490b      	ldr	r1, [pc, #44]	; (8000af0 <Print_Time+0x8c>)
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <Print_Time+0x90>)
 8000ac6:	f003 fd67 	bl	8004598 <siprintf>
	Set_Cursor(Row_1, Column_4);
 8000aca:	2103      	movs	r1, #3
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f943 	bl	8000d58 <Set_Cursor>
	print_string(Buffer_time);
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <Print_Time+0x90>)
 8000ad4:	f000 f925 	bl	8000d22 <print_string>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000015c 	.word	0x2000015c
 8000ae4:	200000d0 	.word	0x200000d0
 8000ae8:	200000bc 	.word	0x200000bc
 8000aec:	20000000 	.word	0x20000000
 8000af0:	08004e2c 	.word	0x08004e2c
 8000af4:	200000a0 	.word	0x200000a0

08000af8 <Print_Date>:
void Print_Date(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
	Get_Time_Date(&Gglobal_time, &Gglobal_date, &hrtc);
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <Print_Date+0x44>)
 8000b00:	490f      	ldr	r1, [pc, #60]	; (8000b40 <Print_Date+0x48>)
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <Print_Date+0x4c>)
 8000b04:	f000 f95c 	bl	8000dc0 <Get_Time_Date>
	sprintf((char *)Buffer_date, "%02d/%02d/%4d", Gglobal_date.Month, Gglobal_date.Date, (2000 + Gglobal_date.Year));
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <Print_Date+0x48>)
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <Print_Date+0x48>)
 8000b10:	789b      	ldrb	r3, [r3, #2]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <Print_Date+0x48>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	4909      	ldr	r1, [pc, #36]	; (8000b48 <Print_Date+0x50>)
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <Print_Date+0x54>)
 8000b24:	f003 fd38 	bl	8004598 <siprintf>
	Set_Cursor(Row_2, Column_4);
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f000 f914 	bl	8000d58 <Set_Cursor>
	print_string(Buffer_date);
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <Print_Date+0x54>)
 8000b32:	f000 f8f6 	bl	8000d22 <print_string>
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000015c 	.word	0x2000015c
 8000b40:	200000d0 	.word	0x200000d0
 8000b44:	200000bc 	.word	0x200000bc
 8000b48:	08004e40 	.word	0x08004e40
 8000b4c:	20000094 	.word	0x20000094

08000b50 <Enable_Pulse>:
#include "stm32f4xx_hal.h"
#include "LCD_1602.h"


static void Enable_Pulse(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_CONTROL_PORT, ENABLE, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <Enable_Pulse+0x2c>)
 8000b5c:	f001 f96e 	bl	8001e3c <HAL_GPIO_WritePin>
	delay_us(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fd25 	bl	80005b0 <delay_us>
	HAL_GPIO_WritePin(PIN_CONTROL_PORT, ENABLE, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <Enable_Pulse+0x2c>)
 8000b6e:	f001 f965 	bl	8001e3c <HAL_GPIO_WritePin>
	delay_us(1);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fd1c 	bl	80005b0 <delay_us>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40020400 	.word	0x40020400

08000b80 <Write_Data_Command_GPIO>:
  *            @arg COMMAND: to write a command in the LCD
  *            @arg DATA: to write data to the LCD.
  * @retval None
  */
static void Write_Data_Command_GPIO(uint8_t command, uint8_t rs)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
	 HAL_GPIO_WritePin(PIN_CONTROL_PORT, RS|RW|ENABLE, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000b96:	4826      	ldr	r0, [pc, #152]	; (8000c30 <Write_Data_Command_GPIO+0xb0>)
 8000b98:	f001 f950 	bl	8001e3c <HAL_GPIO_WritePin>
	uint16_t bits_value = 0x00u;
	uint16_t GPIOC_PINs [MODE_DATA_4] = {GPIO_PIN_5,GPIO_PIN_6,GPIO_PIN_8,GPIO_PIN_9};
	uint8_t Offset_shiftting [MODE_DATA_4] = {0x05u,0x06u,0x08u,0x09u};
#endif

	if(rs == COMMAND)
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <Write_Data_Command_GPIO+0x2e>
	{
		HAL_GPIO_WritePin(PIN_CONTROL_PORT, RS, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	4822      	ldr	r0, [pc, #136]	; (8000c30 <Write_Data_Command_GPIO+0xb0>)
 8000ba8:	f001 f948 	bl	8001e3c <HAL_GPIO_WritePin>
 8000bac:	e004      	b.n	8000bb8 <Write_Data_Command_GPIO+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(PIN_CONTROL_PORT, RS, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	481f      	ldr	r0, [pc, #124]	; (8000c30 <Write_Data_Command_GPIO+0xb0>)
 8000bb4:	f001 f942 	bl	8001e3c <HAL_GPIO_WritePin>
	}

	GPIOC->BSRR = bits_value;
#endif

	HAL_GPIO_WritePin(DATA_PORT,DATA_D4,((command>>0)&TRUE_VALUE));
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	481b      	ldr	r0, [pc, #108]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000bc6:	f001 f939 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT,DATA_D5,((command>>1)&TRUE_VALUE));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	085b      	lsrs	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000bdc:	f001 f92e 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT,DATA_D6,((command>>2)&TRUE_VALUE));
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000bf4:	f001 f922 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT,DATA_D7,((command>>3)&TRUE_VALUE));
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	08db      	lsrs	r3, r3, #3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000c0c:	f001 f916 	bl	8001e3c <HAL_GPIO_WritePin>

	Enable_Pulse();
 8000c10:	f7ff ff9e 	bl	8000b50 <Enable_Pulse>
	delay_us(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff fccb 	bl	80005b0 <delay_us>
	HAL_GPIO_WritePin(DATA_PORT, DATA_D4|DATA_D5|DATA_D6|DATA_D7, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000c22:	f001 f90b 	bl	8001e3c <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020400 	.word	0x40020400
 8000c34:	40020800 	.word	0x40020800

08000c38 <Write_Command>:
  * @param  Command specifies the command to be executed.
  *           @arg command: this instruction can be taken from the macros "Set of commands to operate the LCD"
  * @retval None
  */
void Write_Command(uint8_t com)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t command_lcd = COMMAND;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
	Write_Data_Command_GPIO(((MASK_HIGH&com)>>4), command_lcd);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff95 	bl	8000b80 <Write_Data_Command_GPIO>
	Write_Data_Command_GPIO( (MASK_LOW&com), command_lcd);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff8c 	bl	8000b80 <Write_Data_Command_GPIO>
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Write_Data>:
  *
  * @param  Command specifies the raw as single character
  * @retval None
  */
void Write_Data(uint8_t data)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t data_lcd = DATA;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
	Write_Data_Command_GPIO(((MASK_HIGH&data)>>4), data_lcd);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	7bfa      	ldrb	r2, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff79 	bl	8000b80 <Write_Data_Command_GPIO>
	Write_Data_Command_GPIO( MASK_LOW&data, data_lcd);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff70 	bl	8000b80 <Write_Data_Command_GPIO>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <LCD_Config>:
  * @note   This function do the configuration as 4 bit mode.
  *           if 8 bit mode is needed, this must be done.
  * @retval None
  */
void LCD_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	delay_us(20000);
 8000cac:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000cb0:	f7ff fc7e 	bl	80005b0 <delay_us>
	Write_Data_Command_GPIO(0x03u, COMMAND);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f7ff ff62 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(7000);
 8000cbc:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000cc0:	f7ff fc76 	bl	80005b0 <delay_us>
	Write_Data_Command_GPIO(0x03u, COMMAND);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f7ff ff5a 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f7ff fc6f 	bl	80005b0 <delay_us>
	Write_Data_Command_GPIO(0x03u, COMMAND);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f7ff ff53 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(7000);
 8000cda:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000cde:	f7ff fc67 	bl	80005b0 <delay_us>

	Write_Data_Command_GPIO(0x02u,COMMAND);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff ff4b 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(40);
 8000cea:	2028      	movs	r0, #40	; 0x28
 8000cec:	f7ff fc60 	bl	80005b0 <delay_us>

	Write_Command(M4BIT|M2LINE|M5_8_Font);
 8000cf0:	2028      	movs	r0, #40	; 0x28
 8000cf2:	f7ff ffa1 	bl	8000c38 <Write_Command>

	Write_Command(ONDisp|OFFCursor|OFFBlink);
 8000cf6:	200c      	movs	r0, #12
 8000cf8:	f7ff ff9e 	bl	8000c38 <Write_Command>

	Write_Command(CLEAR_SCREEN);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ff9b 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000d02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d06:	f7ff fc53 	bl	80005b0 <delay_us>

	Write_Command(IncAdd);
 8000d0a:	2006      	movs	r0, #6
 8000d0c:	f7ff ff94 	bl	8000c38 <Write_Command>
	Write_Command(CURSOR_RETURN);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff ff91 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000d16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1a:	f7ff fc49 	bl	80005b0 <delay_us>

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <print_string>:
  * @note   This function shows in the LCD a string.
  * @param  row string can be in ASCII format but always in a array.
  * @retval None
  */
void print_string(uint8_t * lcd_str)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	  uint8_t iter = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]

	  while(lcd_str[iter] != '\0')
 8000d2e:	e009      	b.n	8000d44 <print_string+0x22>
	  {
		  Write_Data((uint8_t)lcd_str[iter]);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff99 	bl	8000c70 <Write_Data>
		  iter++;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3301      	adds	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
	  while(lcd_str[iter] != '\0')
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1ef      	bne.n	8000d30 <print_string+0xe>
	  }
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <Set_Cursor>:
  *          This parameter can be one of the Column_lcd enum values:
  *            @arg Column_lcd: Columns staring in 1 up to 16.
  * @retval None
  */
void Set_Cursor(Row_lcd row, uint8_t column)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	if (Row_1 == row)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d107      	bne.n	8000d7e <Set_Cursor+0x26>
	{
		Write_Command((ROW_ONE_OFFSET<<4)|column);
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff5e 	bl	8000c38 <Write_Command>
	}
	else
	{
		Write_Command((ROW_TWO_OFFSET<<4)|column);
	}
}
 8000d7c:	e006      	b.n	8000d8c <Set_Cursor+0x34>
		Write_Command((ROW_TWO_OFFSET<<4)|column);
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff56 	bl	8000c38 <Write_Command>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <Clear>:
  *
  * @note   This function will clear information displayed in the screen, but this will not set cursor at home position.
  * @retval None
  */
void Clear(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	Write_Command(CLEAR_SCREEN);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff ff4d 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000d9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da2:	f7ff fc05 	bl	80005b0 <delay_us>

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <Home>:
  *
  * @note   This function will set the cursor to the home address in the LCD Screen which is Column 1 and Row 1
  * @retval None
  */
void Home(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
	Write_Command(CURSOR_RETURN);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff ff42 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000db4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000db8:	f7ff fbfa 	bl	80005b0 <delay_us>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Get_Time_Date>:
		Error_Handler();
	}

}
void Get_Time_Date(RTC_TimeTypeDef * Global_time_getting, RTC_DateTypeDef * Global_date_getting, RTC_HandleTypeDef * Ghrtc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	(void)HAL_RTC_GetTime(Ghrtc, Global_time_getting, RTC_FORMAT_BIN);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	68f9      	ldr	r1, [r7, #12]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f002 f9bd 	bl	8003150 <HAL_RTC_GetTime>
	(void)HAL_RTC_GetDate(Ghrtc, Global_date_getting, RTC_FORMAT_BIN);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f002 fabd 	bl	800335a <HAL_RTC_GetDate>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <Alarm_sound>:
		Error_Handler();
	}
}

void Alarm_sound(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	uint8_t iter_alarm_count = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]

	for(iter_alarm_count = 0; iter_alarm_count <= BUZZER_OUT_Pin; iter_alarm_count++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e009      	b.n	8000e0c <Alarm_sound+0x24>
	{
		HAL_GPIO_TogglePin(GPIOA, BUZZER_OUT_Pin);
 8000df8:	2120      	movs	r1, #32
 8000dfa:	480a      	ldr	r0, [pc, #40]	; (8000e24 <Alarm_sound+0x3c>)
 8000dfc:	f001 f837 	bl	8001e6e <HAL_GPIO_TogglePin>
		delay_us(1000000);
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <Alarm_sound+0x40>)
 8000e02:	f7ff fbd5 	bl	80005b0 <delay_us>
	for(iter_alarm_count = 0; iter_alarm_count <= BUZZER_OUT_Pin; iter_alarm_count++)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b20      	cmp	r3, #32
 8000e10:	d9f2      	bls.n	8000df8 <Alarm_sound+0x10>
	}
	HAL_GPIO_WritePin(GPIOA, BUZZER_OUT_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2120      	movs	r1, #32
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <Alarm_sound+0x3c>)
 8000e18:	f001 f810 	bl	8001e3c <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40020000 	.word	0x40020000
 8000e28:	000f4240 	.word	0x000f4240

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	G_Status_F.Setting_Time_Date = ZERO_VALUE;
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <main+0x78>)
 8000e32:	7893      	ldrb	r3, [r2, #2]
 8000e34:	f36f 0300 	bfc	r3, #0, #1
 8000e38:	7093      	strb	r3, [r2, #2]
	G_Status_F.shifting_parameter = ONE_VALUE;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <main+0x78>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	801a      	strh	r2, [r3, #0]

	G_Variables.counter_us_debound = ZERO_VALUE;
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <main+0x7c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f000 fccb 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f837 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f000 f9bb 	bl	80011c8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e52:	f000 f8af 	bl	8000fb4 <MX_RTC_Init>
  MX_TIM5_Init();
 8000e56:	f000 f93f 	bl	80010d8 <MX_TIM5_Init>
  MX_UART4_Init();
 8000e5a:	f000 f98b 	bl	8001174 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 8000e5e:	4813      	ldr	r0, [pc, #76]	; (8000eac <main+0x80>)
 8000e60:	f002 fd0d 	bl	800387e <HAL_TIM_Base_Start>
  LCD_Config();
 8000e64:	f7ff ff20 	bl	8000ca8 <LCD_Config>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while(G_Status_F.Setting_Time_Date)
 8000e68:	e00c      	b.n	8000e84 <main+0x58>
	  {
		Clear();
 8000e6a:	f7ff ff93 	bl	8000d94 <Clear>
		Home();
 8000e6e:	f7ff ff9c 	bl	8000daa <Home>
		print_string((uint8_t *)text);
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <main+0x84>)
 8000e74:	f7ff ff55 	bl	8000d22 <print_string>
		delay_us(1000000);
 8000e78:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <main+0x88>)
 8000e7a:	f7ff fb99 	bl	80005b0 <delay_us>
		setting_time(&global_counter);
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <main+0x8c>)
 8000e80:	f7ff fd80 	bl	8000984 <setting_time>
	  while(G_Status_F.Setting_Time_Date)
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <main+0x78>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1eb      	bne.n	8000e6a <main+0x3e>
	  }

	  Print_Time();
 8000e92:	f7ff fde7 	bl	8000a64 <Print_Time>
	  Print_Date();
 8000e96:	f7ff fe2f 	bl	8000af8 <Print_Date>
	  delay_us(10000);
 8000e9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e9e:	f7ff fb87 	bl	80005b0 <delay_us>
	  while(G_Status_F.Setting_Time_Date)
 8000ea2:	e7ef      	b.n	8000e84 <main+0x58>
 8000ea4:	20000158 	.word	0x20000158
 8000ea8:	2000017c 	.word	0x2000017c
 8000eac:	20000118 	.word	0x20000118
 8000eb0:	08004e58 	.word	0x08004e58
 8000eb4:	000f4240 	.word	0x000f4240
 8000eb8:	20000108 	.word	0x20000108

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0ac      	sub	sp, #176	; 0xb0
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ec6:	2234      	movs	r2, #52	; 0x34
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fb5c 	bl	8004588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	225c      	movs	r2, #92	; 0x5c
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fb4d 	bl	8004588 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <SystemClock_Config+0xf0>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <SystemClock_Config+0xf0>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <SystemClock_Config+0xf0>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <SystemClock_Config+0xf4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f16:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <SystemClock_Config+0xf4>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <SystemClock_Config+0xf4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fd58 	bl	8002a00 <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f56:	f000 fac7 	bl	80014e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 ffad 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f80:	f000 fab2 	bl	80014e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f84:	2320      	movs	r3, #32
 8000f86:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 f8b8 	bl	8002108 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000f9e:	f000 faa3 	bl	80014e8 <Error_Handler>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	37b0      	adds	r7, #176	; 0xb0
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	; 0x40
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2228      	movs	r2, #40	; 0x28
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fad7 	bl	8004588 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <MX_RTC_Init+0x11c>)
 8000fdc:	4a3d      	ldr	r2, [pc, #244]	; (80010d4 <MX_RTC_Init+0x120>)
 8000fde:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <MX_RTC_Init+0x11c>)
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <MX_RTC_Init+0x11c>)
 8000fe8:	227f      	movs	r2, #127	; 0x7f
 8000fea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fec:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <MX_RTC_Init+0x11c>)
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <MX_RTC_Init+0x11c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ff8:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <MX_RTC_Init+0x11c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ffe:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <MX_RTC_Init+0x11c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001004:	4832      	ldr	r0, [pc, #200]	; (80010d0 <MX_RTC_Init+0x11c>)
 8001006:	f001 ff55 	bl	8002eb4 <HAL_RTC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001010:	f000 fa6a 	bl	80014e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8001014:	2301      	movs	r3, #1
 8001016:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	4824      	ldr	r0, [pc, #144]	; (80010d0 <MX_RTC_Init+0x11c>)
 800103e:	f001 ffca 	bl	8002fd6 <HAL_RTC_SetTime>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001048:	f000 fa4e 	bl	80014e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800104c:	2301      	movs	r3, #1
 800104e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001052:	2301      	movs	r3, #1
 8001054:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001058:	2301      	movs	r3, #1
 800105a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 800105e:	2320      	movs	r3, #32
 8001060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <MX_RTC_Init+0x11c>)
 800106e:	f002 f8cd 	bl	800320c <HAL_RTC_SetDate>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001078:	f000 fa36 	bl	80014e8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800107c:	2301      	movs	r3, #1
 800107e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001080:	2300      	movs	r3, #0
 8001082:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001084:	2300      	movs	r3, #0
 8001086:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800108c:	2300      	movs	r3, #0
 800108e:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_RTC_Init+0x11c>)
 80010b8:	f002 f99e 	bl	80033f8 <HAL_RTC_SetAlarm_IT>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80010c2:	f000 fa11 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3740      	adds	r7, #64	; 0x40
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000015c 	.word	0x2000015c
 80010d4:	40002800 	.word	0x40002800

080010d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_TIM5_Init+0x94>)
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <MX_TIM5_Init+0x98>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_TIM5_Init+0x94>)
 80010fc:	220f      	movs	r2, #15
 80010fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_TIM5_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_TIM5_Init+0x94>)
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_TIM5_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_TIM5_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <MX_TIM5_Init+0x94>)
 800111c:	f002 fb84 	bl	8003828 <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001126:	f000 f9df 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_TIM5_Init+0x94>)
 8001138:	f002 fbc5 	bl	80038c6 <HAL_TIM_ConfigClockSource>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 f9d1 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_TIM5_Init+0x94>)
 8001154:	f002 fda8 	bl	8003ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800115e:	f000 f9c3 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000118 	.word	0x20000118
 8001170:	40000c00 	.word	0x40000c00

08001174 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_UART4_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_UART4_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_UART4_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_UART4_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_UART4_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_UART4_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_UART4_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_UART4_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_UART4_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_UART4_Init+0x4c>)
 80011ac:	f002 fdf8 	bl	8003da0 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011b6:	f000 f997 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000180 	.word	0x20000180
 80011c4:	40004c00 	.word	0x40004c00

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <MX_GPIO_Init+0x128>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <MX_GPIO_Init+0x128>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <MX_GPIO_Init+0x128>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <MX_GPIO_Init+0x128>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a3b      	ldr	r2, [pc, #236]	; (80012f0 <MX_GPIO_Init+0x128>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <MX_GPIO_Init+0x128>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_GPIO_Init+0x128>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a34      	ldr	r2, [pc, #208]	; (80012f0 <MX_GPIO_Init+0x128>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <MX_GPIO_Init+0x128>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_OUT_GPIO_Port, BUZZER_OUT_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2120      	movs	r1, #32
 8001236:	482f      	ldr	r0, [pc, #188]	; (80012f4 <MX_GPIO_Init+0x12c>)
 8001238:	f000 fe00 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DATA_D4_Pin|DATA_D5_Pin|DATA_D6_Pin|DATA_D7_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001242:	482d      	ldr	r0, [pc, #180]	; (80012f8 <MX_GPIO_Init+0x130>)
 8001244:	f000 fdfa 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|ENABLE_Pin|RW_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 7150 	mov.w	r1, #832	; 0x340
 800124e:	482b      	ldr	r0, [pc, #172]	; (80012fc <MX_GPIO_Init+0x134>)
 8001250:	f000 fdf4 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SET_TIME_DATE_Pin INCREMENT_BUTTON_Pin SET_ALARM_Pin DECREMENT_BUTTON_Pin */
  GPIO_InitStruct.Pin = SET_TIME_DATE_Pin|INCREMENT_BUTTON_Pin|SET_ALARM_Pin|DECREMENT_BUTTON_Pin;
 8001254:	f44f 5362 	mov.w	r3, #14464	; 0x3880
 8001258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_GPIO_Init+0x138>)
 800125c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4823      	ldr	r0, [pc, #140]	; (80012f8 <MX_GPIO_Init+0x130>)
 800126a:	f000 fc3d 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_OUT_Pin */
  GPIO_InitStruct.Pin = BUZZER_OUT_Pin;
 800126e:	2320      	movs	r3, #32
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_OUT_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	481b      	ldr	r0, [pc, #108]	; (80012f4 <MX_GPIO_Init+0x12c>)
 8001286:	f000 fc2f 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA_D4_Pin DATA_D5_Pin DATA_D6_Pin DATA_D7_Pin */
  GPIO_InitStruct.Pin = DATA_D4_Pin|DATA_D5_Pin|DATA_D6_Pin|DATA_D7_Pin;
 800128a:	f44f 7358 	mov.w	r3, #864	; 0x360
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_GPIO_Init+0x130>)
 80012a4:	f000 fc20 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin ENABLE_Pin RW_Pin */
  GPIO_InitStruct.Pin = RS_Pin|ENABLE_Pin|RW_Pin;
 80012a8:	f44f 7350 	mov.w	r3, #832	; 0x340
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4619      	mov	r1, r3
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <MX_GPIO_Init+0x134>)
 80012c2:	f000 fc11 	bl	8001ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2017      	movs	r0, #23
 80012cc:	f000 fbd5 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012d0:	2017      	movs	r0, #23
 80012d2:	f000 fbee 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2028      	movs	r0, #40	; 0x28
 80012dc:	f000 fbcd 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e0:	2028      	movs	r0, #40	; 0x28
 80012e2:	f000 fbe6 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020400 	.word	0x40020400
 8001300:	10310000 	.word	0x10310000

08001304 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == SET_TIME_DATE_Pin)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001314:	d140      	bne.n	8001398 <HAL_GPIO_EXTI_Callback+0x94>
	{
		if(HAL_GPIO_ReadPin(GPIOC, SET_TIME_DATE_Pin))
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	4869      	ldr	r0, [pc, #420]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800131c:	f000 fd76 	bl	8001e0c <HAL_GPIO_ReadPin>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_EXTI_Callback+0x2a>
		{
			// Start timer. Keep on mind that this timer is set in Run speed of the CLK.
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 8001326:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(!HAL_GPIO_ReadPin(GPIOC, SET_TIME_DATE_Pin))
 800132e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001332:	4863      	ldr	r0, [pc, #396]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001334:	f000 fd6a 	bl	8001e0c <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d104      	bne.n	8001348 <HAL_GPIO_EXTI_Callback+0x44>
		{
			//Get timer's value when falling edge
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 800133e:	4b61      	ldr	r3, [pc, #388]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001346:	6013      	str	r3, [r2, #0]
		}

		// This verifies that user pressed the button and it was not a debounce
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 8001348:	4b5f      	ldr	r3, [pc, #380]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001350:	4293      	cmp	r3, r2
 8001352:	f240 80b0 	bls.w	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
		{
			G_Status_F.Setting_Time_Date = 0x01;
 8001356:	4a5d      	ldr	r2, [pc, #372]	; (80014cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001358:	7893      	ldrb	r3, [r2, #2]
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	7093      	strb	r3, [r2, #2]
			G_Status_F.shifting_parameter = G_Status_F.shifting_parameter << 1;
 8001360:	4b5a      	ldr	r3, [pc, #360]	; (80014cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b58      	ldr	r3, [pc, #352]	; (80014cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 800136a:	801a      	strh	r2, [r3, #0]

			if(G_Status_F.shifting_parameter > 0x80)
 800136c:	4b57      	ldr	r3, [pc, #348]	; (80014cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	2b80      	cmp	r3, #128	; 0x80
 8001372:	d907      	bls.n	8001384 <HAL_GPIO_EXTI_Callback+0x80>
			{
				G_Status_F.Setting_Time_Date = ZERO_VALUE;
 8001374:	4a55      	ldr	r2, [pc, #340]	; (80014cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001376:	7893      	ldrb	r3, [r2, #2]
 8001378:	f36f 0300 	bfc	r3, #0, #1
 800137c:	7093      	strb	r3, [r2, #2]
				G_Status_F.shifting_parameter = 0x01;
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001380:	2201      	movs	r2, #1
 8001382:	801a      	strh	r2, [r3, #0]
			}
			Push_Beep_Button();
 8001384:	f7ff f92c 	bl	80005e0 <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else
	{
		__NOP();
	}
}
 8001396:	e08e      	b.n	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
	else if(GPIO_Pin == DECREMENT_BUTTON_Pin)
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139e:	d12e      	bne.n	80013fe <HAL_GPIO_EXTI_Callback+0xfa>
		if(HAL_GPIO_ReadPin(GPIOC, DECREMENT_BUTTON_Pin))
 80013a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a4:	4846      	ldr	r0, [pc, #280]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80013a6:	f000 fd31 	bl	8001e0c <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_EXTI_Callback+0xb4>
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 80013b0:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
		if(!HAL_GPIO_ReadPin(GPIOC, DECREMENT_BUTTON_Pin))
 80013b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013bc:	4840      	ldr	r0, [pc, #256]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80013be:	f000 fd25 	bl	8001e0c <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <HAL_GPIO_EXTI_Callback+0xce>
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80013d0:	6013      	str	r3, [r2, #0]
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80013da:	4293      	cmp	r3, r2
 80013dc:	d96b      	bls.n	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
			global_counter--;
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80013e8:	701a      	strb	r2, [r3, #0]
			Push_Beep_Button();
 80013ea:	f7ff f8f9 	bl	80005e0 <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013fc:	e05b      	b.n	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
	else if(GPIO_Pin == INCREMENT_BUTTON_Pin)
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	2b80      	cmp	r3, #128	; 0x80
 8001402:	d12c      	bne.n	800145e <HAL_GPIO_EXTI_Callback+0x15a>
		if(HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	482e      	ldr	r0, [pc, #184]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001408:	f000 fd00 	bl	8001e0c <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_EXTI_Callback+0x116>
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
		if(!HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	4828      	ldr	r0, [pc, #160]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800141e:	f000 fcf5 	bl	8001e0c <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d104      	bne.n	8001432 <HAL_GPIO_EXTI_Callback+0x12e>
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001430:	6013      	str	r3, [r2, #0]
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800143a:	4293      	cmp	r3, r2
 800143c:	d93b      	bls.n	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
			global_counter++;
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001448:	701a      	strb	r2, [r3, #0]
			Push_Beep_Button();
 800144a:	f7ff f8c9 	bl	80005e0 <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	e02b      	b.n	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
	else if(GPIO_Pin == SET_ALARM_Pin)
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001464:	d126      	bne.n	80014b4 <HAL_GPIO_EXTI_Callback+0x1b0>
		if(HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4815      	ldr	r0, [pc, #84]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800146a:	f000 fccf 	bl	8001e0c <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_EXTI_Callback+0x178>
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
		if(!HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001480:	f000 fcc4 	bl	8001e0c <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d104      	bne.n	8001494 <HAL_GPIO_EXTI_Callback+0x190>
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001492:	6013      	str	r3, [r2, #0]
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800149c:	4293      	cmp	r3, r2
 800149e:	d90a      	bls.n	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
			Push_Beep_Button();
 80014a0:	f7ff f89e 	bl	80005e0 <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_EXTI_Callback+0x1b2>
		__NOP();
 80014b4:	bf00      	nop
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40020800 	.word	0x40020800
 80014c4:	20000118 	.word	0x20000118
 80014c8:	2000017c 	.word	0x2000017c
 80014cc:	20000158 	.word	0x20000158
 80014d0:	20000108 	.word	0x20000108

080014d4 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	Alarm_sound();
 80014dc:	f7ff fc84 	bl	8000de8 <Alarm_sound>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_RTC_MspInit+0x30>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10a      	bne.n	8001570 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_RTC_MspInit+0x34>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2029      	movs	r0, #41	; 0x29
 8001566:	f000 fa88 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800156a:	2029      	movs	r0, #41	; 0x29
 800156c:	f000 faa1 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800
 800157c:	42470e3c 	.word	0x42470e3c

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10d      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40000c00 	.word	0x40000c00
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_UART_MspInit+0x84>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12b      	bne.n	800163e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_UART_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_UART_MspInit+0x88>)
 80015f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_UART_MspInit+0x88>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_UART_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_UART_MspInit+0x88>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_UART_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800161e:	2303      	movs	r3, #3
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800162e:	2308      	movs	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_UART_MspInit+0x8c>)
 800163a:	f000 fa55 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40004c00 	.word	0x40004c00
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8ec 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80016b4:	2080      	movs	r0, #128	; 0x80
 80016b6:	f000 fbf5 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}

080016be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80016c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016c6:	f000 fbed 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80016ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016ce:	f000 fbe9 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016d6:	f000 fbe5 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <RTC_Alarm_IRQHandler+0x10>)
 80016e6:	f001 ffbf 	bl	8003668 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000015c 	.word	0x2000015c

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f002 ff06 	bl	8004534 <__errno>
 8001728:	4602      	mov	r2, r0
 800172a:	230c      	movs	r3, #12
 800172c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20020000 	.word	0x20020000
 8001754:	00000400 	.word	0x00000400
 8001758:	2000010c 	.word	0x2000010c
 800175c:	200001c8 	.word	0x200001c8

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <SystemInit+0x28>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <SystemInit+0x28>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SystemInit+0x28>)
 8001776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177a:	609a      	str	r2, [r3, #8]
#endif
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001790:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001792:	e003      	b.n	800179c <LoopCopyDataInit>

08001794 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001796:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001798:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800179a:	3104      	adds	r1, #4

0800179c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017a4:	d3f6      	bcc.n	8001794 <CopyDataInit>
  ldr  r2, =_sbss
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017a8:	e002      	b.n	80017b0 <LoopFillZerobss>

080017aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017ac:	f842 3b04 	str.w	r3, [r2], #4

080017b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017b4:	d3f9      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017b6:	f7ff ffd3 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f002 fec1 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7ff fb35 	bl	8000e2c <main>
  bx  lr    
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017c8:	08004ec4 	.word	0x08004ec4
  ldr  r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017d0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80017d4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80017d8:	200001c8 	.word	0x200001c8

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_Init+0x40>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_Init+0x40>)
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x40>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f92b 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff fe70 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f943 	bl	8001ace <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f000 f90b 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000008 	.word	0x20000008
 800187c:	20000010 	.word	0x20000010
 8001880:	2000000c 	.word	0x2000000c

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000010 	.word	0x20000010
 80018a8:	200001c0 	.word	0x200001c0

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	200001c0 	.word	0x200001c0

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff3e 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff31 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e165      	b.n	8001dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8154 	bne.w	8001dca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d00b      	beq.n	8001b42 <HAL_GPIO_Init+0x5a>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b36:	2b11      	cmp	r3, #17
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0xfc>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d123      	bne.n	8001c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80ae 	beq.w	8001dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b5c      	ldr	r3, [pc, #368]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a5b      	ldr	r2, [pc, #364]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8a:	4a57      	ldr	r2, [pc, #348]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x21a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4d      	ldr	r2, [pc, #308]	; (8001df0 <HAL_GPIO_Init+0x308>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x216>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <HAL_GPIO_Init+0x30c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x212>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_GPIO_Init+0x310>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x20e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4a      	ldr	r2, [pc, #296]	; (8001dfc <HAL_GPIO_Init+0x314>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x20a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a49      	ldr	r2, [pc, #292]	; (8001e00 <HAL_GPIO_Init+0x318>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x206>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a48      	ldr	r2, [pc, #288]	; (8001e04 <HAL_GPIO_Init+0x31c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x202>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00c      	b.n	8001d04 <HAL_GPIO_Init+0x21c>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00a      	b.n	8001d04 <HAL_GPIO_Init+0x21c>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x21c>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x21c>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x21c>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x21c>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x21c>
 8001d02:	2300      	movs	r3, #0
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d14:	4934      	ldr	r1, [pc, #208]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d46:	4a30      	ldr	r2, [pc, #192]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_GPIO_Init+0x320>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	f67f ae96 	bls.w	8001b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3724      	adds	r7, #36	; 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e001      	b.n	8001e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	401a      	ands	r2, r3
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d104      	bne.n	8001e92 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fa1e 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cc      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d90c      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d044      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e067      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4934      	ldr	r1, [pc, #208]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff fc72 	bl	80018ac <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff fc6e 	bl	80018ac <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e04f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d20c      	bcs.n	800201c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205a:	f000 fb7f 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800205e:	4601      	mov	r1, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	fa21 f303 	lsr.w	r3, r1, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fbd2 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	08004e68 	.word	0x08004e68
 8002098:	20000008 	.word	0x20000008
 800209c:	2000000c 	.word	0x2000000c

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08004e78 	.word	0x08004e78

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	08004e78 	.word	0x08004e78

08002108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002140:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002146:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	496c      	ldr	r1, [pc, #432]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800215e:	2301      	movs	r3, #1
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800216e:	4b64      	ldr	r3, [pc, #400]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002174:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	4960      	ldr	r1, [pc, #384]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d017      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800219c:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800219e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4955      	ldr	r1, [pc, #340]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ba:	d101      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80021bc:	2301      	movs	r3, #1
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80021c8:	2301      	movs	r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d017      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021d8:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	4946      	ldr	r1, [pc, #280]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f6:	d101      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002204:	2301      	movs	r3, #1
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 808a 	beq.w	800232a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a38      	ldr	r2, [pc, #224]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002232:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800223e:	f7ff fb35 	bl	80018ac <HAL_GetTick>
 8002242:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7ff fb31 	bl	80018ac <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e278      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002264:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02f      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	429a      	cmp	r2, r3
 8002280:	d028      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d114      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff faff 	bl	80018ac <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7ff fafb 	bl	80018ac <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e240      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ee      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022e0:	d114      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80022f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f6:	4902      	ldr	r1, [pc, #8]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
 80022fc:	e00c      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000
 8002308:	42470e40 	.word	0x42470e40
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a49      	ldr	r2, [pc, #292]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002312:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002316:	6093      	str	r3, [r2, #8]
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800231a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	4944      	ldr	r1, [pc, #272]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002326:	4313      	orrs	r3, r2
 8002328:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800233e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800234c:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	4937      	ldr	r1, [pc, #220]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800236e:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002374:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	492e      	ldr	r1, [pc, #184]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d011      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	4926      	ldr	r1, [pc, #152]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ae:	d101      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	491a      	ldr	r1, [pc, #104]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d011      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	4911      	ldr	r1, [pc, #68]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002400:	d101      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002402:	2301      	movs	r3, #1
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d005      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002414:	f040 80ff 	bne.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800241e:	f7ff fa45 	bl	80018ac <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002424:	e00e      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002426:	f7ff fa41 	bl	80018ac <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d907      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e188      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002438:	40023800 	.word	0x40023800
 800243c:	424711e0 	.word	0x424711e0
 8002440:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002444:	4b7e      	ldr	r3, [pc, #504]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ea      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800246c:	2b00      	cmp	r3, #0
 800246e:	d028      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d124      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002478:	4b71      	ldr	r3, [pc, #452]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247e:	0c1b      	lsrs	r3, r3, #16
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	3301      	adds	r3, #1
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002490:	0e1b      	lsrs	r3, r3, #24
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	431a      	orrs	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	3b01      	subs	r3, #1
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	4961      	ldr	r1, [pc, #388]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d035      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ec:	d130      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024ee:	4b54      	ldr	r3, [pc, #336]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	3301      	adds	r3, #1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002500:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002506:	0f1b      	lsrs	r3, r3, #28
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	019b      	lsls	r3, r3, #6
 8002518:	431a      	orrs	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	431a      	orrs	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	071b      	lsls	r3, r3, #28
 8002530:	4943      	ldr	r1, [pc, #268]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800253a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800253e:	f023 021f 	bic.w	r2, r3, #31
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	493d      	ldr	r1, [pc, #244]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d029      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002564:	d124      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002566:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257e:	0f1b      	lsrs	r3, r3, #28
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	019b      	lsls	r3, r3, #6
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	3b01      	subs	r3, #1
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	071b      	lsls	r3, r3, #28
 80025a8:	4925      	ldr	r1, [pc, #148]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d016      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	071b      	lsls	r3, r3, #28
 80025e2:	4917      	ldr	r1, [pc, #92]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025f0:	f7ff f95c 	bl	80018ac <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025f8:	f7ff f958 	bl	80018ac <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e09f      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 8095 	bne.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002624:	f7ff f942 	bl	80018ac <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800262a:	e00f      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800262c:	f7ff f93e 	bl	80018ac <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d908      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e085      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	42470068 	.word	0x42470068
 8002648:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800264c:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002658:	d0e8      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02b      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	2b00      	cmp	r3, #0
 8002680:	d127      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	431a      	orrs	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	4928      	ldr	r1, [pc, #160]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	3b01      	subs	r3, #1
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01d      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e6:	d118      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	0e1b      	lsrs	r3, r3, #24
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	019b      	lsls	r3, r3, #6
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	4910      	ldr	r1, [pc, #64]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002720:	f7ff f8c4 	bl	80018ac <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002728:	f7ff f8c0 	bl	80018ac <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e007      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002746:	d1ef      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	42470070 	.word	0x42470070

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002776:	4b9f      	ldr	r3, [pc, #636]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b0c      	cmp	r3, #12
 8002780:	f200 8130 	bhi.w	80029e4 <HAL_RCC_GetSysClockFreq+0x288>
 8002784:	a201      	add	r2, pc, #4	; (adr r2, 800278c <HAL_RCC_GetSysClockFreq+0x30>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080029e5 	.word	0x080029e5
 8002794:	080029e5 	.word	0x080029e5
 8002798:	080029e5 	.word	0x080029e5
 800279c:	080027c7 	.word	0x080027c7
 80027a0:	080029e5 	.word	0x080029e5
 80027a4:	080029e5 	.word	0x080029e5
 80027a8:	080029e5 	.word	0x080029e5
 80027ac:	080027cd 	.word	0x080027cd
 80027b0:	080029e5 	.word	0x080029e5
 80027b4:	080029e5 	.word	0x080029e5
 80027b8:	080029e5 	.word	0x080029e5
 80027bc:	080028db 	.word	0x080028db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b8d      	ldr	r3, [pc, #564]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x29c>)
 80027c2:	613b      	str	r3, [r7, #16]
       break;
 80027c4:	e111      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c6:	4b8d      	ldr	r3, [pc, #564]	; (80029fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80027c8:	613b      	str	r3, [r7, #16]
      break;
 80027ca:	e10e      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4b89      	ldr	r3, [pc, #548]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d6:	4b87      	ldr	r3, [pc, #540]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d023      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	f04f 0400 	mov.w	r4, #0
 80027ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	ea03 0501 	and.w	r5, r3, r1
 80027f8:	ea04 0602 	and.w	r6, r4, r2
 80027fc:	4a7f      	ldr	r2, [pc, #508]	; (80029fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 80027fe:	fb02 f106 	mul.w	r1, r2, r6
 8002802:	2200      	movs	r2, #0
 8002804:	fb02 f205 	mul.w	r2, r2, r5
 8002808:	440a      	add	r2, r1
 800280a:	497c      	ldr	r1, [pc, #496]	; (80029fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 800280c:	fba5 0101 	umull	r0, r1, r5, r1
 8002810:	1853      	adds	r3, r2, r1
 8002812:	4619      	mov	r1, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f04f 0400 	mov.w	r4, #0
 800281a:	461a      	mov	r2, r3
 800281c:	4623      	mov	r3, r4
 800281e:	f7fd fd47 	bl	80002b0 <__aeabi_uldivmod>
 8002822:	4603      	mov	r3, r0
 8002824:	460c      	mov	r4, r1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e049      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b72      	ldr	r3, [pc, #456]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	ea03 0501 	and.w	r5, r3, r1
 8002840:	ea04 0602 	and.w	r6, r4, r2
 8002844:	4629      	mov	r1, r5
 8002846:	4632      	mov	r2, r6
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	0154      	lsls	r4, r2, #5
 8002852:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002856:	014b      	lsls	r3, r1, #5
 8002858:	4619      	mov	r1, r3
 800285a:	4622      	mov	r2, r4
 800285c:	1b49      	subs	r1, r1, r5
 800285e:	eb62 0206 	sbc.w	r2, r2, r6
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	0194      	lsls	r4, r2, #6
 800286c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002870:	018b      	lsls	r3, r1, #6
 8002872:	1a5b      	subs	r3, r3, r1
 8002874:	eb64 0402 	sbc.w	r4, r4, r2
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	00e2      	lsls	r2, r4, #3
 8002882:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002886:	00d9      	lsls	r1, r3, #3
 8002888:	460b      	mov	r3, r1
 800288a:	4614      	mov	r4, r2
 800288c:	195b      	adds	r3, r3, r5
 800288e:	eb44 0406 	adc.w	r4, r4, r6
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	02a2      	lsls	r2, r4, #10
 800289c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028a0:	0299      	lsls	r1, r3, #10
 80028a2:	460b      	mov	r3, r1
 80028a4:	4614      	mov	r4, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	4621      	mov	r1, r4
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f04f 0400 	mov.w	r4, #0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7fd fcfc 	bl	80002b0 <__aeabi_uldivmod>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028be:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	3301      	adds	r3, #1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	613b      	str	r3, [r7, #16]
      break;
 80028d8:	e087      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028da:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e2:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f0:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	f04f 0400 	mov.w	r4, #0
 80028fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	ea03 0501 	and.w	r5, r3, r1
 8002906:	ea04 0602 	and.w	r6, r4, r2
 800290a:	4a3c      	ldr	r2, [pc, #240]	; (80029fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 800290c:	fb02 f106 	mul.w	r1, r2, r6
 8002910:	2200      	movs	r2, #0
 8002912:	fb02 f205 	mul.w	r2, r2, r5
 8002916:	440a      	add	r2, r1
 8002918:	4938      	ldr	r1, [pc, #224]	; (80029fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 800291a:	fba5 0101 	umull	r0, r1, r5, r1
 800291e:	1853      	adds	r3, r2, r1
 8002920:	4619      	mov	r1, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f04f 0400 	mov.w	r4, #0
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	f7fd fcc0 	bl	80002b0 <__aeabi_uldivmod>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	e049      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	f04f 0400 	mov.w	r4, #0
 8002942:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	ea03 0501 	and.w	r5, r3, r1
 800294e:	ea04 0602 	and.w	r6, r4, r2
 8002952:	4629      	mov	r1, r5
 8002954:	4632      	mov	r2, r6
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	0154      	lsls	r4, r2, #5
 8002960:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002964:	014b      	lsls	r3, r1, #5
 8002966:	4619      	mov	r1, r3
 8002968:	4622      	mov	r2, r4
 800296a:	1b49      	subs	r1, r1, r5
 800296c:	eb62 0206 	sbc.w	r2, r2, r6
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f04f 0400 	mov.w	r4, #0
 8002978:	0194      	lsls	r4, r2, #6
 800297a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800297e:	018b      	lsls	r3, r1, #6
 8002980:	1a5b      	subs	r3, r3, r1
 8002982:	eb64 0402 	sbc.w	r4, r4, r2
 8002986:	f04f 0100 	mov.w	r1, #0
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	00e2      	lsls	r2, r4, #3
 8002990:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002994:	00d9      	lsls	r1, r3, #3
 8002996:	460b      	mov	r3, r1
 8002998:	4614      	mov	r4, r2
 800299a:	195b      	adds	r3, r3, r5
 800299c:	eb44 0406 	adc.w	r4, r4, r6
 80029a0:	f04f 0100 	mov.w	r1, #0
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	02a2      	lsls	r2, r4, #10
 80029aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029ae:	0299      	lsls	r1, r3, #10
 80029b0:	460b      	mov	r3, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	4621      	mov	r1, r4
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f04f 0400 	mov.w	r4, #0
 80029be:	461a      	mov	r2, r3
 80029c0:	4623      	mov	r3, r4
 80029c2:	f7fd fc75 	bl	80002b0 <__aeabi_uldivmod>
 80029c6:	4603      	mov	r3, r0
 80029c8:	460c      	mov	r4, r1
 80029ca:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x298>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0f1b      	lsrs	r3, r3, #28
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	613b      	str	r3, [r7, #16]
      break;
 80029e2:	e002      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x29c>)
 80029e6:	613b      	str	r3, [r7, #16]
      break;
 80029e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ea:	693b      	ldr	r3, [r7, #16]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	017d7840 	.word	0x017d7840

08002a00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8083 	beq.w	8002b20 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a1a:	4b95      	ldr	r3, [pc, #596]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d019      	beq.n	8002a5a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a26:	4b92      	ldr	r3, [pc, #584]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a32:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3e:	d00c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a40:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a48:	2b0c      	cmp	r3, #12
 8002a4a:	d112      	bne.n	8002a72 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d05b      	beq.n	8002b1e <HAL_RCC_OscConfig+0x11e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d157      	bne.n	8002b1e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e216      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x8a>
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7b      	ldr	r2, [pc, #492]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e01d      	b.n	8002ac6 <HAL_RCC_OscConfig+0xc6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a92:	d10c      	bne.n	8002aae <HAL_RCC_OscConfig+0xae>
 8002a94:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a75      	ldr	r2, [pc, #468]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a72      	ldr	r2, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e00b      	b.n	8002ac6 <HAL_RCC_OscConfig+0xc6>
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6f      	ldr	r2, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6c      	ldr	r2, [pc, #432]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d013      	beq.n	8002af6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fe feed 	bl	80018ac <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad6:	f7fe fee9 	bl	80018ac <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1db      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0xd6>
 8002af4:	e014      	b.n	8002b20 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fe fed9 	bl	80018ac <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afe:	f7fe fed5 	bl	80018ac <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1c7      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b10:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0xfe>
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d06f      	beq.n	8002c0c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d017      	beq.n	8002b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b38:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d105      	bne.n	8002b50 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b44:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b50:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d11c      	bne.n	8002b96 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5c:	4b44      	ldr	r3, [pc, #272]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b68:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_OscConfig+0x180>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e18f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4938      	ldr	r1, [pc, #224]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b94:	e03a      	b.n	8002c0c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d020      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fe82 	bl	80018ac <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe fe7e 	bl	80018ac <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e170      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4925      	ldr	r1, [pc, #148]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
 8002bde:	e015      	b.n	8002c0c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCC_OscConfig+0x274>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fe61 	bl	80018ac <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fe fe5d 	bl	80018ac <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e14f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d037      	beq.n	8002c88 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe fe41 	bl	80018ac <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fe3d 	bl	80018ac <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e12f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x22e>
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fe2a 	bl	80018ac <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fe26 	bl	80018ac <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d908      	bls.n	8002c7c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e118      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	42470000 	.word	0x42470000
 8002c78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	4b8a      	ldr	r3, [pc, #552]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e9      	bne.n	8002c5c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8097 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9a:	4b83      	ldr	r3, [pc, #524]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b7f      	ldr	r3, [pc, #508]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a7e      	ldr	r2, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b7c      	ldr	r3, [pc, #496]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b79      	ldr	r3, [pc, #484]	; (8002eac <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a75      	ldr	r2, [pc, #468]	; (8002eac <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fde5 	bl	80018ac <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fde1 	bl	80018ac <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0d3      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x31a>
 8002d0c:	4b66      	ldr	r3, [pc, #408]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a65      	ldr	r2, [pc, #404]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	e01c      	b.n	8002d54 <HAL_RCC_OscConfig+0x354>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x33c>
 8002d22:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a60      	ldr	r2, [pc, #384]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a5d      	ldr	r2, [pc, #372]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0x354>
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a59      	ldr	r2, [pc, #356]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
 8002d48:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fda6 	bl	80018ac <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe fda2 	bl	80018ac <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e092      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ee      	beq.n	8002d64 <HAL_RCC_OscConfig+0x364>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fd90 	bl	80018ac <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fe fd8c 	bl	80018ac <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e07c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da6:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ee      	bne.n	8002d90 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	4a3a      	ldr	r2, [pc, #232]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d068      	beq.n	8002e9e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d060      	beq.n	8002e9a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d145      	bne.n	8002e6c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_RCC_OscConfig+0x4b0>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe fd61 	bl	80018ac <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe fd5d 	bl	80018ac <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e04f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	071b      	lsls	r3, r3, #28
 8002e38:	491b      	ldr	r1, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_RCC_OscConfig+0x4b0>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fd32 	bl	80018ac <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fd2e 	bl	80018ac <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e020      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x44c>
 8002e6a:	e018      	b.n	8002e9e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RCC_OscConfig+0x4b0>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe fd1b 	bl	80018ac <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fd17 	bl	80018ac <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x47a>
 8002e98:	e001      	b.n	8002e9e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	42470060 	.word	0x42470060

08002eb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e083      	b.n	8002fce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7f5b      	ldrb	r3, [r3, #29]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fb36 	bl	8001548 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	22ca      	movs	r2, #202	; 0xca
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2253      	movs	r2, #83	; 0x53
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fc26 	bl	8003744 <RTC_EnterInitMode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	22ff      	movs	r2, #255	; 0xff
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e05e      	b.n	8002fce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6899      	ldr	r1, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68d2      	ldr	r2, [r2, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6919      	ldr	r1, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	041a      	lsls	r2, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fbb8 	bl	80036f4 <HAL_RTC_WaitForSynchro>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e018      	b.n	8002fce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fd6:	b590      	push	{r4, r7, lr}
 8002fd8:	b087      	sub	sp, #28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	7f1b      	ldrb	r3, [r3, #28]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_RTC_SetTime+0x1c>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0aa      	b.n	8003148 <HAL_RTC_SetTime+0x172>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d126      	bne.n	8003052 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fbbd 	bl	800379c <RTC_ByteToBcd2>
 8003022:	4603      	mov	r3, r0
 8003024:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fbb6 	bl	800379c <RTC_ByteToBcd2>
 8003030:	4603      	mov	r3, r0
 8003032:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003034:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	789b      	ldrb	r3, [r3, #2]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fbae 	bl	800379c <RTC_ByteToBcd2>
 8003040:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003042:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	78db      	ldrb	r3, [r3, #3]
 800304a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e018      	b.n	8003084 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2200      	movs	r2, #0
 8003064:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003072:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003078:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	78db      	ldrb	r3, [r3, #3]
 800307e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	22ca      	movs	r2, #202	; 0xca
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2253      	movs	r2, #83	; 0x53
 8003092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fb55 	bl	8003744 <RTC_EnterInitMode>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2204      	movs	r2, #4
 80030ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e047      	b.n	8003148 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80030c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d111      	bne.n	8003132 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 faf0 	bl	80036f4 <HAL_RTC_WaitForSynchro>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	22ff      	movs	r2, #255	; 0xff
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2204      	movs	r2, #4
 8003126:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e00a      	b.n	8003148 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003146:	2300      	movs	r3, #0
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd90      	pop	{r4, r7, pc}

08003150 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003182:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003186:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003192:	b2da      	uxtb	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11a      	bne.n	8003202 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fb01 	bl	80037d8 <RTC_Bcd2ToByte>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 faf8 	bl	80037d8 <RTC_Bcd2ToByte>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	789b      	ldrb	r3, [r3, #2]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 faef 	bl	80037d8 <RTC_Bcd2ToByte>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	7f1b      	ldrb	r3, [r3, #28]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_RTC_SetDate+0x1c>
 8003224:	2302      	movs	r3, #2
 8003226:	e094      	b.n	8003352 <HAL_RTC_SetDate+0x146>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2202      	movs	r2, #2
 8003232:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10e      	bne.n	8003258 <HAL_RTC_SetDate+0x4c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	f023 0310 	bic.w	r3, r3, #16
 800324e:	b2db      	uxtb	r3, r3
 8003250:	330a      	adds	r3, #10
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11c      	bne.n	8003298 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fa9a 	bl	800379c <RTC_ByteToBcd2>
 8003268:	4603      	mov	r3, r0
 800326a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fa93 	bl	800379c <RTC_ByteToBcd2>
 8003276:	4603      	mov	r3, r0
 8003278:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800327a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	789b      	ldrb	r3, [r3, #2]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fa8b 	bl	800379c <RTC_ByteToBcd2>
 8003286:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003288:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e00e      	b.n	80032b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	78db      	ldrb	r3, [r3, #3]
 800329c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80032aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	22ca      	movs	r2, #202	; 0xca
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2253      	movs	r2, #83	; 0x53
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa3c 	bl	8003744 <RTC_EnterInitMode>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	22ff      	movs	r2, #255	; 0xff
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2204      	movs	r2, #4
 80032de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e033      	b.n	8003352 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003308:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d111      	bne.n	800333c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f9eb 	bl	80036f4 <HAL_RTC_WaitForSynchro>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	22ff      	movs	r2, #255	; 0xff
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2204      	movs	r2, #4
 8003330:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e00a      	b.n	8003352 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}

0800335a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003374:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003378:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	0b5b      	lsrs	r3, r3, #13
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11a      	bne.n	80033ee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	78db      	ldrb	r3, [r3, #3]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fa0b 	bl	80037d8 <RTC_Bcd2ToByte>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	785b      	ldrb	r3, [r3, #1]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fa02 	bl	80037d8 <RTC_Bcd2ToByte>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	789b      	ldrb	r3, [r3, #2]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f9f9 	bl	80037d8 <RTC_Bcd2ToByte>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	2300      	movs	r3, #0
 800340a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800340c:	4b93      	ldr	r3, [pc, #588]	; (800365c <HAL_RTC_SetAlarm_IT+0x264>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a93      	ldr	r2, [pc, #588]	; (8003660 <HAL_RTC_SetAlarm_IT+0x268>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	7f1b      	ldrb	r3, [r3, #28]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_RTC_SetAlarm_IT+0x36>
 800342a:	2302      	movs	r3, #2
 800342c:	e111      	b.n	8003652 <HAL_RTC_SetAlarm_IT+0x25a>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2202      	movs	r2, #2
 8003438:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d137      	bne.n	80034b0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f99f 	bl	800379c <RTC_ByteToBcd2>
 800345e:	4603      	mov	r3, r0
 8003460:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f998 	bl	800379c <RTC_ByteToBcd2>
 800346c:	4603      	mov	r3, r0
 800346e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003470:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f990 	bl	800379c <RTC_ByteToBcd2>
 800347c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800347e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	78db      	ldrb	r3, [r3, #3]
 8003486:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003488:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f982 	bl	800379c <RTC_ByteToBcd2>
 8003498:	4603      	mov	r3, r0
 800349a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800349c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e023      	b.n	80034f8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034d0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	78db      	ldrb	r3, [r3, #3]
 80034dc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80034de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80034e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	22ca      	movs	r2, #202	; 0xca
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2253      	movs	r2, #83	; 0x53
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351c:	d141      	bne.n	80035a2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800352c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800353e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	617a      	str	r2, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	22ff      	movs	r2, #255	; 0xff
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2203      	movs	r2, #3
 8003556:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e077      	b.n	8003652 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0e7      	beq.n	8003540 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800358e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e040      	b.n	8003624 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f462 7220 	orn	r2, r2, #640	; 0x280
 80035c2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1e5a      	subs	r2, r3, #1
 80035c8:	617a      	str	r2, [r7, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	22ff      	movs	r2, #255	; 0xff
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2203      	movs	r2, #3
 80035da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e035      	b.n	8003652 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0e7      	beq.n	80035c4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003612:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003622:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_RTC_SetAlarm_IT+0x26c>)
 800362a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	20000008 	.word	0x20000008
 8003660:	10624dd3 	.word	0x10624dd3
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00b      	beq.n	80036a4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fd ff21 	bl	80014d4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80036a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8a7 	bl	8003814 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80036d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RTC_AlarmIRQHandler+0x88>)
 80036da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036de:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	775a      	strb	r2, [r3, #29]
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800370e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003710:	f7fe f8cc 	bl	80018ac <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003716:	e009      	b.n	800372c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003718:	f7fe f8c8 	bl	80018ac <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003726:	d901      	bls.n	800372c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e007      	b.n	800373c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ee      	beq.n	8003718 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d119      	bne.n	8003792 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f04f 32ff 	mov.w	r2, #4294967295
 8003766:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003768:	f7fe f8a0 	bl	80018ac <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800376e:	e009      	b.n	8003784 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003770:	f7fe f89c 	bl	80018ac <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377e:	d901      	bls.n	8003784 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e007      	b.n	8003794 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ee      	beq.n	8003770 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80037aa:	e005      	b.n	80037b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	3b0a      	subs	r3, #10
 80037b6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	2b09      	cmp	r3, #9
 80037bc:	d8f6      	bhi.n	80037ac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b2db      	uxtb	r3, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4413      	add	r3, r2
 8003806:	b2db      	uxtb	r3, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e01d      	b.n	8003876 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fe96 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f000 f8e4 	bl	8003a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b06      	cmp	r3, #6
 800389e:	d007      	beq.n	80038b0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_TIM_ConfigClockSource+0x18>
 80038da:	2302      	movs	r3, #2
 80038dc:	e0a6      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x166>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003904:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d067      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0x120>
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d80b      	bhi.n	8003932 <HAL_TIM_ConfigClockSource+0x6c>
 800391a:	2b10      	cmp	r3, #16
 800391c:	d073      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x140>
 800391e:	2b10      	cmp	r3, #16
 8003920:	d802      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x62>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d06f      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003926:	e078      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003928:	2b20      	cmp	r3, #32
 800392a:	d06c      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x140>
 800392c:	2b30      	cmp	r3, #48	; 0x30
 800392e:	d06a      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003930:	e073      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003932:	2b70      	cmp	r3, #112	; 0x70
 8003934:	d00d      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x8c>
 8003936:	2b70      	cmp	r3, #112	; 0x70
 8003938:	d804      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x7e>
 800393a:	2b50      	cmp	r3, #80	; 0x50
 800393c:	d033      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0xe0>
 800393e:	2b60      	cmp	r3, #96	; 0x60
 8003940:	d041      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003942:	e06a      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d066      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0x152>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	d017      	beq.n	8003980 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003950:	e063      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6899      	ldr	r1, [r3, #8]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f000 f981 	bl	8003c68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003974:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	609a      	str	r2, [r3, #8]
      break;
 800397e:	e04c      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f000 f96a 	bl	8003c68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039a2:	609a      	str	r2, [r3, #8]
      break;
 80039a4:	e039      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 f8de 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2150      	movs	r1, #80	; 0x50
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f937 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039c4:	e029      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f000 f8fd 	bl	8003bd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2160      	movs	r1, #96	; 0x60
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f927 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039e4:	e019      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f000 f8be 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f917 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a04:	e009      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f000 f90e 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a16:	e000      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <TIM_Base_SetConfig+0x114>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d00f      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3d      	ldr	r2, [pc, #244]	; (8003b4c <TIM_Base_SetConfig+0x118>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3c      	ldr	r2, [pc, #240]	; (8003b50 <TIM_Base_SetConfig+0x11c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <TIM_Base_SetConfig+0x120>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <TIM_Base_SetConfig+0x124>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <TIM_Base_SetConfig+0x114>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d027      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <TIM_Base_SetConfig+0x118>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d023      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <TIM_Base_SetConfig+0x11c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	; (8003b54 <TIM_Base_SetConfig+0x120>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <TIM_Base_SetConfig+0x124>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d017      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <TIM_Base_SetConfig+0x128>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <TIM_Base_SetConfig+0x130>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <TIM_Base_SetConfig+0x134>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <TIM_Base_SetConfig+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <TIM_Base_SetConfig+0x114>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_Base_SetConfig+0xf8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <TIM_Base_SetConfig+0x124>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d103      	bne.n	8003b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	615a      	str	r2, [r3, #20]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	40010400 	.word	0x40010400
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800
 8003b68:	40001800 	.word	0x40001800
 8003b6c:	40001c00 	.word	0x40001c00
 8003b70:	40002000 	.word	0x40002000

08003b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0201 	bic.w	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 030a 	bic.w	r3, r3, #10
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0210 	bic.w	r2, r3, #16
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f043 0307 	orr.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e05a      	b.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d01d      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1a      	ldr	r2, [pc, #104]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10c      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40010400 	.word	0x40010400
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40001800 	.word	0x40001800

08003da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e03f      	b.n	8003e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd fbfc 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f829 	bl	8003e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e7e:	f023 030c 	bic.w	r3, r3, #12
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eaa:	f040 818b 	bne.w	80041c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4ac1      	ldr	r2, [pc, #772]	; (80041b8 <UART_SetConfig+0x37c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d005      	beq.n	8003ec4 <UART_SetConfig+0x88>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4abf      	ldr	r2, [pc, #764]	; (80041bc <UART_SetConfig+0x380>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	f040 80bd 	bne.w	800403e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe f90c 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	461d      	mov	r5, r3
 8003ece:	f04f 0600 	mov.w	r6, #0
 8003ed2:	46a8      	mov	r8, r5
 8003ed4:	46b1      	mov	r9, r6
 8003ed6:	eb18 0308 	adds.w	r3, r8, r8
 8003eda:	eb49 0409 	adc.w	r4, r9, r9
 8003ede:	4698      	mov	r8, r3
 8003ee0:	46a1      	mov	r9, r4
 8003ee2:	eb18 0805 	adds.w	r8, r8, r5
 8003ee6:	eb49 0906 	adc.w	r9, r9, r6
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ef6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003efa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003efe:	4688      	mov	r8, r1
 8003f00:	4691      	mov	r9, r2
 8003f02:	eb18 0005 	adds.w	r0, r8, r5
 8003f06:	eb49 0106 	adc.w	r1, r9, r6
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	461d      	mov	r5, r3
 8003f10:	f04f 0600 	mov.w	r6, #0
 8003f14:	196b      	adds	r3, r5, r5
 8003f16:	eb46 0406 	adc.w	r4, r6, r6
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	f7fc f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8003f22:	4603      	mov	r3, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	461a      	mov	r2, r3
 8003f28:	4ba5      	ldr	r3, [pc, #660]	; (80041c0 <UART_SetConfig+0x384>)
 8003f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	461d      	mov	r5, r3
 8003f38:	f04f 0600 	mov.w	r6, #0
 8003f3c:	46a9      	mov	r9, r5
 8003f3e:	46b2      	mov	sl, r6
 8003f40:	eb19 0309 	adds.w	r3, r9, r9
 8003f44:	eb4a 040a 	adc.w	r4, sl, sl
 8003f48:	4699      	mov	r9, r3
 8003f4a:	46a2      	mov	sl, r4
 8003f4c:	eb19 0905 	adds.w	r9, r9, r5
 8003f50:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f68:	4689      	mov	r9, r1
 8003f6a:	4692      	mov	sl, r2
 8003f6c:	eb19 0005 	adds.w	r0, r9, r5
 8003f70:	eb4a 0106 	adc.w	r1, sl, r6
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	461d      	mov	r5, r3
 8003f7a:	f04f 0600 	mov.w	r6, #0
 8003f7e:	196b      	adds	r3, r5, r5
 8003f80:	eb46 0406 	adc.w	r4, r6, r6
 8003f84:	461a      	mov	r2, r3
 8003f86:	4623      	mov	r3, r4
 8003f88:	f7fc f992 	bl	80002b0 <__aeabi_uldivmod>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b8b      	ldr	r3, [pc, #556]	; (80041c0 <UART_SetConfig+0x384>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	2164      	movs	r1, #100	; 0x64
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	3332      	adds	r3, #50	; 0x32
 8003fa6:	4a86      	ldr	r2, [pc, #536]	; (80041c0 <UART_SetConfig+0x384>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fb4:	4498      	add	r8, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	461d      	mov	r5, r3
 8003fba:	f04f 0600 	mov.w	r6, #0
 8003fbe:	46a9      	mov	r9, r5
 8003fc0:	46b2      	mov	sl, r6
 8003fc2:	eb19 0309 	adds.w	r3, r9, r9
 8003fc6:	eb4a 040a 	adc.w	r4, sl, sl
 8003fca:	4699      	mov	r9, r3
 8003fcc:	46a2      	mov	sl, r4
 8003fce:	eb19 0905 	adds.w	r9, r9, r5
 8003fd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fea:	4689      	mov	r9, r1
 8003fec:	4692      	mov	sl, r2
 8003fee:	eb19 0005 	adds.w	r0, r9, r5
 8003ff2:	eb4a 0106 	adc.w	r1, sl, r6
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	461d      	mov	r5, r3
 8003ffc:	f04f 0600 	mov.w	r6, #0
 8004000:	196b      	adds	r3, r5, r5
 8004002:	eb46 0406 	adc.w	r4, r6, r6
 8004006:	461a      	mov	r2, r3
 8004008:	4623      	mov	r3, r4
 800400a:	f7fc f951 	bl	80002b0 <__aeabi_uldivmod>
 800400e:	4603      	mov	r3, r0
 8004010:	460c      	mov	r4, r1
 8004012:	461a      	mov	r2, r3
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <UART_SetConfig+0x384>)
 8004016:	fba3 1302 	umull	r1, r3, r3, r2
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2164      	movs	r1, #100	; 0x64
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	3332      	adds	r3, #50	; 0x32
 8004028:	4a65      	ldr	r2, [pc, #404]	; (80041c0 <UART_SetConfig+0x384>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	f003 0207 	and.w	r2, r3, #7
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4442      	add	r2, r8
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e26f      	b.n	800451e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403e:	f7fe f83b 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8004042:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	461d      	mov	r5, r3
 8004048:	f04f 0600 	mov.w	r6, #0
 800404c:	46a8      	mov	r8, r5
 800404e:	46b1      	mov	r9, r6
 8004050:	eb18 0308 	adds.w	r3, r8, r8
 8004054:	eb49 0409 	adc.w	r4, r9, r9
 8004058:	4698      	mov	r8, r3
 800405a:	46a1      	mov	r9, r4
 800405c:	eb18 0805 	adds.w	r8, r8, r5
 8004060:	eb49 0906 	adc.w	r9, r9, r6
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004070:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004074:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004078:	4688      	mov	r8, r1
 800407a:	4691      	mov	r9, r2
 800407c:	eb18 0005 	adds.w	r0, r8, r5
 8004080:	eb49 0106 	adc.w	r1, r9, r6
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	461d      	mov	r5, r3
 800408a:	f04f 0600 	mov.w	r6, #0
 800408e:	196b      	adds	r3, r5, r5
 8004090:	eb46 0406 	adc.w	r4, r6, r6
 8004094:	461a      	mov	r2, r3
 8004096:	4623      	mov	r3, r4
 8004098:	f7fc f90a 	bl	80002b0 <__aeabi_uldivmod>
 800409c:	4603      	mov	r3, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <UART_SetConfig+0x384>)
 80040a4:	fba3 2302 	umull	r2, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	461d      	mov	r5, r3
 80040b2:	f04f 0600 	mov.w	r6, #0
 80040b6:	46a9      	mov	r9, r5
 80040b8:	46b2      	mov	sl, r6
 80040ba:	eb19 0309 	adds.w	r3, r9, r9
 80040be:	eb4a 040a 	adc.w	r4, sl, sl
 80040c2:	4699      	mov	r9, r3
 80040c4:	46a2      	mov	sl, r4
 80040c6:	eb19 0905 	adds.w	r9, r9, r5
 80040ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040e2:	4689      	mov	r9, r1
 80040e4:	4692      	mov	sl, r2
 80040e6:	eb19 0005 	adds.w	r0, r9, r5
 80040ea:	eb4a 0106 	adc.w	r1, sl, r6
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	461d      	mov	r5, r3
 80040f4:	f04f 0600 	mov.w	r6, #0
 80040f8:	196b      	adds	r3, r5, r5
 80040fa:	eb46 0406 	adc.w	r4, r6, r6
 80040fe:	461a      	mov	r2, r3
 8004100:	4623      	mov	r3, r4
 8004102:	f7fc f8d5 	bl	80002b0 <__aeabi_uldivmod>
 8004106:	4603      	mov	r3, r0
 8004108:	460c      	mov	r4, r1
 800410a:	461a      	mov	r2, r3
 800410c:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <UART_SetConfig+0x384>)
 800410e:	fba3 1302 	umull	r1, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2164      	movs	r1, #100	; 0x64
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	3332      	adds	r3, #50	; 0x32
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <UART_SetConfig+0x384>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800412e:	4498      	add	r8, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	461d      	mov	r5, r3
 8004134:	f04f 0600 	mov.w	r6, #0
 8004138:	46a9      	mov	r9, r5
 800413a:	46b2      	mov	sl, r6
 800413c:	eb19 0309 	adds.w	r3, r9, r9
 8004140:	eb4a 040a 	adc.w	r4, sl, sl
 8004144:	4699      	mov	r9, r3
 8004146:	46a2      	mov	sl, r4
 8004148:	eb19 0905 	adds.w	r9, r9, r5
 800414c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004160:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004164:	4689      	mov	r9, r1
 8004166:	4692      	mov	sl, r2
 8004168:	eb19 0005 	adds.w	r0, r9, r5
 800416c:	eb4a 0106 	adc.w	r1, sl, r6
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	461d      	mov	r5, r3
 8004176:	f04f 0600 	mov.w	r6, #0
 800417a:	196b      	adds	r3, r5, r5
 800417c:	eb46 0406 	adc.w	r4, r6, r6
 8004180:	461a      	mov	r2, r3
 8004182:	4623      	mov	r3, r4
 8004184:	f7fc f894 	bl	80002b0 <__aeabi_uldivmod>
 8004188:	4603      	mov	r3, r0
 800418a:	460c      	mov	r4, r1
 800418c:	461a      	mov	r2, r3
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <UART_SetConfig+0x384>)
 8004190:	fba3 1302 	umull	r1, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	2164      	movs	r1, #100	; 0x64
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	3332      	adds	r3, #50	; 0x32
 80041a2:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <UART_SetConfig+0x384>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	f003 0207 	and.w	r2, r3, #7
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4442      	add	r2, r8
 80041b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041b6:	e1b2      	b.n	800451e <UART_SetConfig+0x6e2>
 80041b8:	40011000 	.word	0x40011000
 80041bc:	40011400 	.word	0x40011400
 80041c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4ad7      	ldr	r2, [pc, #860]	; (8004528 <UART_SetConfig+0x6ec>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d005      	beq.n	80041da <UART_SetConfig+0x39e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4ad6      	ldr	r2, [pc, #856]	; (800452c <UART_SetConfig+0x6f0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	f040 80d1 	bne.w	800437c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041da:	f7fd ff81 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 80041de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	469a      	mov	sl, r3
 80041e4:	f04f 0b00 	mov.w	fp, #0
 80041e8:	46d0      	mov	r8, sl
 80041ea:	46d9      	mov	r9, fp
 80041ec:	eb18 0308 	adds.w	r3, r8, r8
 80041f0:	eb49 0409 	adc.w	r4, r9, r9
 80041f4:	4698      	mov	r8, r3
 80041f6:	46a1      	mov	r9, r4
 80041f8:	eb18 080a 	adds.w	r8, r8, sl
 80041fc:	eb49 090b 	adc.w	r9, r9, fp
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800420c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004210:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004214:	4688      	mov	r8, r1
 8004216:	4691      	mov	r9, r2
 8004218:	eb1a 0508 	adds.w	r5, sl, r8
 800421c:	eb4b 0609 	adc.w	r6, fp, r9
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4619      	mov	r1, r3
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	f04f 0400 	mov.w	r4, #0
 8004232:	0094      	lsls	r4, r2, #2
 8004234:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004238:	008b      	lsls	r3, r1, #2
 800423a:	461a      	mov	r2, r3
 800423c:	4623      	mov	r3, r4
 800423e:	4628      	mov	r0, r5
 8004240:	4631      	mov	r1, r6
 8004242:	f7fc f835 	bl	80002b0 <__aeabi_uldivmod>
 8004246:	4603      	mov	r3, r0
 8004248:	460c      	mov	r4, r1
 800424a:	461a      	mov	r2, r3
 800424c:	4bb8      	ldr	r3, [pc, #736]	; (8004530 <UART_SetConfig+0x6f4>)
 800424e:	fba3 2302 	umull	r2, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	469b      	mov	fp, r3
 800425c:	f04f 0c00 	mov.w	ip, #0
 8004260:	46d9      	mov	r9, fp
 8004262:	46e2      	mov	sl, ip
 8004264:	eb19 0309 	adds.w	r3, r9, r9
 8004268:	eb4a 040a 	adc.w	r4, sl, sl
 800426c:	4699      	mov	r9, r3
 800426e:	46a2      	mov	sl, r4
 8004270:	eb19 090b 	adds.w	r9, r9, fp
 8004274:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004284:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004288:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800428c:	4689      	mov	r9, r1
 800428e:	4692      	mov	sl, r2
 8004290:	eb1b 0509 	adds.w	r5, fp, r9
 8004294:	eb4c 060a 	adc.w	r6, ip, sl
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4619      	mov	r1, r3
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	0094      	lsls	r4, r2, #2
 80042ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042b0:	008b      	lsls	r3, r1, #2
 80042b2:	461a      	mov	r2, r3
 80042b4:	4623      	mov	r3, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	4631      	mov	r1, r6
 80042ba:	f7fb fff9 	bl	80002b0 <__aeabi_uldivmod>
 80042be:	4603      	mov	r3, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b9a      	ldr	r3, [pc, #616]	; (8004530 <UART_SetConfig+0x6f4>)
 80042c6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2164      	movs	r1, #100	; 0x64
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	3332      	adds	r3, #50	; 0x32
 80042d8:	4a95      	ldr	r2, [pc, #596]	; (8004530 <UART_SetConfig+0x6f4>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e4:	4498      	add	r8, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	469b      	mov	fp, r3
 80042ea:	f04f 0c00 	mov.w	ip, #0
 80042ee:	46d9      	mov	r9, fp
 80042f0:	46e2      	mov	sl, ip
 80042f2:	eb19 0309 	adds.w	r3, r9, r9
 80042f6:	eb4a 040a 	adc.w	r4, sl, sl
 80042fa:	4699      	mov	r9, r3
 80042fc:	46a2      	mov	sl, r4
 80042fe:	eb19 090b 	adds.w	r9, r9, fp
 8004302:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004312:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004316:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800431a:	4689      	mov	r9, r1
 800431c:	4692      	mov	sl, r2
 800431e:	eb1b 0509 	adds.w	r5, fp, r9
 8004322:	eb4c 060a 	adc.w	r6, ip, sl
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4619      	mov	r1, r3
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	f04f 0400 	mov.w	r4, #0
 8004338:	0094      	lsls	r4, r2, #2
 800433a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800433e:	008b      	lsls	r3, r1, #2
 8004340:	461a      	mov	r2, r3
 8004342:	4623      	mov	r3, r4
 8004344:	4628      	mov	r0, r5
 8004346:	4631      	mov	r1, r6
 8004348:	f7fb ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800434c:	4603      	mov	r3, r0
 800434e:	460c      	mov	r4, r1
 8004350:	461a      	mov	r2, r3
 8004352:	4b77      	ldr	r3, [pc, #476]	; (8004530 <UART_SetConfig+0x6f4>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	; 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	3332      	adds	r3, #50	; 0x32
 8004366:	4a72      	ldr	r2, [pc, #456]	; (8004530 <UART_SetConfig+0x6f4>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4442      	add	r2, r8
 8004378:	609a      	str	r2, [r3, #8]
 800437a:	e0d0      	b.n	800451e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800437c:	f7fd fe9c 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8004380:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	469a      	mov	sl, r3
 8004386:	f04f 0b00 	mov.w	fp, #0
 800438a:	46d0      	mov	r8, sl
 800438c:	46d9      	mov	r9, fp
 800438e:	eb18 0308 	adds.w	r3, r8, r8
 8004392:	eb49 0409 	adc.w	r4, r9, r9
 8004396:	4698      	mov	r8, r3
 8004398:	46a1      	mov	r9, r4
 800439a:	eb18 080a 	adds.w	r8, r8, sl
 800439e:	eb49 090b 	adc.w	r9, r9, fp
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043b6:	4688      	mov	r8, r1
 80043b8:	4691      	mov	r9, r2
 80043ba:	eb1a 0508 	adds.w	r5, sl, r8
 80043be:	eb4b 0609 	adc.w	r6, fp, r9
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4619      	mov	r1, r3
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	f04f 0400 	mov.w	r4, #0
 80043d4:	0094      	lsls	r4, r2, #2
 80043d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043da:	008b      	lsls	r3, r1, #2
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	4628      	mov	r0, r5
 80043e2:	4631      	mov	r1, r6
 80043e4:	f7fb ff64 	bl	80002b0 <__aeabi_uldivmod>
 80043e8:	4603      	mov	r3, r0
 80043ea:	460c      	mov	r4, r1
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b50      	ldr	r3, [pc, #320]	; (8004530 <UART_SetConfig+0x6f4>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	469b      	mov	fp, r3
 80043fe:	f04f 0c00 	mov.w	ip, #0
 8004402:	46d9      	mov	r9, fp
 8004404:	46e2      	mov	sl, ip
 8004406:	eb19 0309 	adds.w	r3, r9, r9
 800440a:	eb4a 040a 	adc.w	r4, sl, sl
 800440e:	4699      	mov	r9, r3
 8004410:	46a2      	mov	sl, r4
 8004412:	eb19 090b 	adds.w	r9, r9, fp
 8004416:	eb4a 0a0c 	adc.w	sl, sl, ip
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800442a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800442e:	4689      	mov	r9, r1
 8004430:	4692      	mov	sl, r2
 8004432:	eb1b 0509 	adds.w	r5, fp, r9
 8004436:	eb4c 060a 	adc.w	r6, ip, sl
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4619      	mov	r1, r3
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	f04f 0400 	mov.w	r4, #0
 800444c:	0094      	lsls	r4, r2, #2
 800444e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004452:	008b      	lsls	r3, r1, #2
 8004454:	461a      	mov	r2, r3
 8004456:	4623      	mov	r3, r4
 8004458:	4628      	mov	r0, r5
 800445a:	4631      	mov	r1, r6
 800445c:	f7fb ff28 	bl	80002b0 <__aeabi_uldivmod>
 8004460:	4603      	mov	r3, r0
 8004462:	460c      	mov	r4, r1
 8004464:	461a      	mov	r2, r3
 8004466:	4b32      	ldr	r3, [pc, #200]	; (8004530 <UART_SetConfig+0x6f4>)
 8004468:	fba3 1302 	umull	r1, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	2164      	movs	r1, #100	; 0x64
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	3332      	adds	r3, #50	; 0x32
 800447a:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <UART_SetConfig+0x6f4>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004486:	4498      	add	r8, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	469b      	mov	fp, r3
 800448c:	f04f 0c00 	mov.w	ip, #0
 8004490:	46d9      	mov	r9, fp
 8004492:	46e2      	mov	sl, ip
 8004494:	eb19 0309 	adds.w	r3, r9, r9
 8004498:	eb4a 040a 	adc.w	r4, sl, sl
 800449c:	4699      	mov	r9, r3
 800449e:	46a2      	mov	sl, r4
 80044a0:	eb19 090b 	adds.w	r9, r9, fp
 80044a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044bc:	4689      	mov	r9, r1
 80044be:	4692      	mov	sl, r2
 80044c0:	eb1b 0509 	adds.w	r5, fp, r9
 80044c4:	eb4c 060a 	adc.w	r6, ip, sl
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f04f 0400 	mov.w	r4, #0
 80044da:	0094      	lsls	r4, r2, #2
 80044dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044e0:	008b      	lsls	r3, r1, #2
 80044e2:	461a      	mov	r2, r3
 80044e4:	4623      	mov	r3, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	4631      	mov	r1, r6
 80044ea:	f7fb fee1 	bl	80002b0 <__aeabi_uldivmod>
 80044ee:	4603      	mov	r3, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <UART_SetConfig+0x6f4>)
 80044f6:	fba3 1302 	umull	r1, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2164      	movs	r1, #100	; 0x64
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	3332      	adds	r3, #50	; 0x32
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <UART_SetConfig+0x6f4>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	f003 020f 	and.w	r2, r3, #15
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4442      	add	r2, r8
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	e7ff      	b.n	800451e <UART_SetConfig+0x6e2>
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004528:	40011000 	.word	0x40011000
 800452c:	40011400 	.word	0x40011400
 8004530:	51eb851f 	.word	0x51eb851f

08004534 <__errno>:
 8004534:	4b01      	ldr	r3, [pc, #4]	; (800453c <__errno+0x8>)
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000014 	.word	0x20000014

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0d      	ldr	r6, [pc, #52]	; (8004578 <__libc_init_array+0x38>)
 8004544:	4c0d      	ldr	r4, [pc, #52]	; (800457c <__libc_init_array+0x3c>)
 8004546:	1ba4      	subs	r4, r4, r6
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	2500      	movs	r5, #0
 800454c:	42a5      	cmp	r5, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	4e0b      	ldr	r6, [pc, #44]	; (8004580 <__libc_init_array+0x40>)
 8004552:	4c0c      	ldr	r4, [pc, #48]	; (8004584 <__libc_init_array+0x44>)
 8004554:	f000 fc26 	bl	8004da4 <_init>
 8004558:	1ba4      	subs	r4, r4, r6
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	2500      	movs	r5, #0
 800455e:	42a5      	cmp	r5, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004568:	4798      	blx	r3
 800456a:	3501      	adds	r5, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004572:	4798      	blx	r3
 8004574:	3501      	adds	r5, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	08004ebc 	.word	0x08004ebc
 800457c:	08004ebc 	.word	0x08004ebc
 8004580:	08004ebc 	.word	0x08004ebc
 8004584:	08004ec0 	.word	0x08004ec0

08004588 <memset>:
 8004588:	4402      	add	r2, r0
 800458a:	4603      	mov	r3, r0
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <memset+0xa>
 8004590:	4770      	bx	lr
 8004592:	f803 1b01 	strb.w	r1, [r3], #1
 8004596:	e7f9      	b.n	800458c <memset+0x4>

08004598 <siprintf>:
 8004598:	b40e      	push	{r1, r2, r3}
 800459a:	b500      	push	{lr}
 800459c:	b09c      	sub	sp, #112	; 0x70
 800459e:	ab1d      	add	r3, sp, #116	; 0x74
 80045a0:	9002      	str	r0, [sp, #8]
 80045a2:	9006      	str	r0, [sp, #24]
 80045a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045a8:	4809      	ldr	r0, [pc, #36]	; (80045d0 <siprintf+0x38>)
 80045aa:	9107      	str	r1, [sp, #28]
 80045ac:	9104      	str	r1, [sp, #16]
 80045ae:	4909      	ldr	r1, [pc, #36]	; (80045d4 <siprintf+0x3c>)
 80045b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b4:	9105      	str	r1, [sp, #20]
 80045b6:	6800      	ldr	r0, [r0, #0]
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	a902      	add	r1, sp, #8
 80045bc:	f000 f866 	bl	800468c <_svfiprintf_r>
 80045c0:	9b02      	ldr	r3, [sp, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	b01c      	add	sp, #112	; 0x70
 80045c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045cc:	b003      	add	sp, #12
 80045ce:	4770      	bx	lr
 80045d0:	20000014 	.word	0x20000014
 80045d4:	ffff0208 	.word	0xffff0208

080045d8 <__ssputs_r>:
 80045d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	688e      	ldr	r6, [r1, #8]
 80045de:	429e      	cmp	r6, r3
 80045e0:	4682      	mov	sl, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	4690      	mov	r8, r2
 80045e6:	4699      	mov	r9, r3
 80045e8:	d837      	bhi.n	800465a <__ssputs_r+0x82>
 80045ea:	898a      	ldrh	r2, [r1, #12]
 80045ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045f0:	d031      	beq.n	8004656 <__ssputs_r+0x7e>
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	6909      	ldr	r1, [r1, #16]
 80045f6:	1a6f      	subs	r7, r5, r1
 80045f8:	6965      	ldr	r5, [r4, #20]
 80045fa:	2302      	movs	r3, #2
 80045fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004600:	fb95 f5f3 	sdiv	r5, r5, r3
 8004604:	f109 0301 	add.w	r3, r9, #1
 8004608:	443b      	add	r3, r7
 800460a:	429d      	cmp	r5, r3
 800460c:	bf38      	it	cc
 800460e:	461d      	movcc	r5, r3
 8004610:	0553      	lsls	r3, r2, #21
 8004612:	d530      	bpl.n	8004676 <__ssputs_r+0x9e>
 8004614:	4629      	mov	r1, r5
 8004616:	f000 fb2b 	bl	8004c70 <_malloc_r>
 800461a:	4606      	mov	r6, r0
 800461c:	b950      	cbnz	r0, 8004634 <__ssputs_r+0x5c>
 800461e:	230c      	movs	r3, #12
 8004620:	f8ca 3000 	str.w	r3, [sl]
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800462a:	81a3      	strh	r3, [r4, #12]
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004634:	463a      	mov	r2, r7
 8004636:	6921      	ldr	r1, [r4, #16]
 8004638:	f000 faa8 	bl	8004b8c <memcpy>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	6126      	str	r6, [r4, #16]
 800464a:	6165      	str	r5, [r4, #20]
 800464c:	443e      	add	r6, r7
 800464e:	1bed      	subs	r5, r5, r7
 8004650:	6026      	str	r6, [r4, #0]
 8004652:	60a5      	str	r5, [r4, #8]
 8004654:	464e      	mov	r6, r9
 8004656:	454e      	cmp	r6, r9
 8004658:	d900      	bls.n	800465c <__ssputs_r+0x84>
 800465a:	464e      	mov	r6, r9
 800465c:	4632      	mov	r2, r6
 800465e:	4641      	mov	r1, r8
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	f000 fa9e 	bl	8004ba2 <memmove>
 8004666:	68a3      	ldr	r3, [r4, #8]
 8004668:	1b9b      	subs	r3, r3, r6
 800466a:	60a3      	str	r3, [r4, #8]
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	441e      	add	r6, r3
 8004670:	6026      	str	r6, [r4, #0]
 8004672:	2000      	movs	r0, #0
 8004674:	e7dc      	b.n	8004630 <__ssputs_r+0x58>
 8004676:	462a      	mov	r2, r5
 8004678:	f000 fb54 	bl	8004d24 <_realloc_r>
 800467c:	4606      	mov	r6, r0
 800467e:	2800      	cmp	r0, #0
 8004680:	d1e2      	bne.n	8004648 <__ssputs_r+0x70>
 8004682:	6921      	ldr	r1, [r4, #16]
 8004684:	4650      	mov	r0, sl
 8004686:	f000 faa5 	bl	8004bd4 <_free_r>
 800468a:	e7c8      	b.n	800461e <__ssputs_r+0x46>

0800468c <_svfiprintf_r>:
 800468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004690:	461d      	mov	r5, r3
 8004692:	898b      	ldrh	r3, [r1, #12]
 8004694:	061f      	lsls	r7, r3, #24
 8004696:	b09d      	sub	sp, #116	; 0x74
 8004698:	4680      	mov	r8, r0
 800469a:	460c      	mov	r4, r1
 800469c:	4616      	mov	r6, r2
 800469e:	d50f      	bpl.n	80046c0 <_svfiprintf_r+0x34>
 80046a0:	690b      	ldr	r3, [r1, #16]
 80046a2:	b96b      	cbnz	r3, 80046c0 <_svfiprintf_r+0x34>
 80046a4:	2140      	movs	r1, #64	; 0x40
 80046a6:	f000 fae3 	bl	8004c70 <_malloc_r>
 80046aa:	6020      	str	r0, [r4, #0]
 80046ac:	6120      	str	r0, [r4, #16]
 80046ae:	b928      	cbnz	r0, 80046bc <_svfiprintf_r+0x30>
 80046b0:	230c      	movs	r3, #12
 80046b2:	f8c8 3000 	str.w	r3, [r8]
 80046b6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ba:	e0c8      	b.n	800484e <_svfiprintf_r+0x1c2>
 80046bc:	2340      	movs	r3, #64	; 0x40
 80046be:	6163      	str	r3, [r4, #20]
 80046c0:	2300      	movs	r3, #0
 80046c2:	9309      	str	r3, [sp, #36]	; 0x24
 80046c4:	2320      	movs	r3, #32
 80046c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ca:	2330      	movs	r3, #48	; 0x30
 80046cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046d0:	9503      	str	r5, [sp, #12]
 80046d2:	f04f 0b01 	mov.w	fp, #1
 80046d6:	4637      	mov	r7, r6
 80046d8:	463d      	mov	r5, r7
 80046da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046de:	b10b      	cbz	r3, 80046e4 <_svfiprintf_r+0x58>
 80046e0:	2b25      	cmp	r3, #37	; 0x25
 80046e2:	d13e      	bne.n	8004762 <_svfiprintf_r+0xd6>
 80046e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80046e8:	d00b      	beq.n	8004702 <_svfiprintf_r+0x76>
 80046ea:	4653      	mov	r3, sl
 80046ec:	4632      	mov	r2, r6
 80046ee:	4621      	mov	r1, r4
 80046f0:	4640      	mov	r0, r8
 80046f2:	f7ff ff71 	bl	80045d8 <__ssputs_r>
 80046f6:	3001      	adds	r0, #1
 80046f8:	f000 80a4 	beq.w	8004844 <_svfiprintf_r+0x1b8>
 80046fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fe:	4453      	add	r3, sl
 8004700:	9309      	str	r3, [sp, #36]	; 0x24
 8004702:	783b      	ldrb	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 809d 	beq.w	8004844 <_svfiprintf_r+0x1b8>
 800470a:	2300      	movs	r3, #0
 800470c:	f04f 32ff 	mov.w	r2, #4294967295
 8004710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004714:	9304      	str	r3, [sp, #16]
 8004716:	9307      	str	r3, [sp, #28]
 8004718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800471c:	931a      	str	r3, [sp, #104]	; 0x68
 800471e:	462f      	mov	r7, r5
 8004720:	2205      	movs	r2, #5
 8004722:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004726:	4850      	ldr	r0, [pc, #320]	; (8004868 <_svfiprintf_r+0x1dc>)
 8004728:	f7fb fd72 	bl	8000210 <memchr>
 800472c:	9b04      	ldr	r3, [sp, #16]
 800472e:	b9d0      	cbnz	r0, 8004766 <_svfiprintf_r+0xda>
 8004730:	06d9      	lsls	r1, r3, #27
 8004732:	bf44      	itt	mi
 8004734:	2220      	movmi	r2, #32
 8004736:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800473a:	071a      	lsls	r2, r3, #28
 800473c:	bf44      	itt	mi
 800473e:	222b      	movmi	r2, #43	; 0x2b
 8004740:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004744:	782a      	ldrb	r2, [r5, #0]
 8004746:	2a2a      	cmp	r2, #42	; 0x2a
 8004748:	d015      	beq.n	8004776 <_svfiprintf_r+0xea>
 800474a:	9a07      	ldr	r2, [sp, #28]
 800474c:	462f      	mov	r7, r5
 800474e:	2000      	movs	r0, #0
 8004750:	250a      	movs	r5, #10
 8004752:	4639      	mov	r1, r7
 8004754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004758:	3b30      	subs	r3, #48	; 0x30
 800475a:	2b09      	cmp	r3, #9
 800475c:	d94d      	bls.n	80047fa <_svfiprintf_r+0x16e>
 800475e:	b1b8      	cbz	r0, 8004790 <_svfiprintf_r+0x104>
 8004760:	e00f      	b.n	8004782 <_svfiprintf_r+0xf6>
 8004762:	462f      	mov	r7, r5
 8004764:	e7b8      	b.n	80046d8 <_svfiprintf_r+0x4c>
 8004766:	4a40      	ldr	r2, [pc, #256]	; (8004868 <_svfiprintf_r+0x1dc>)
 8004768:	1a80      	subs	r0, r0, r2
 800476a:	fa0b f000 	lsl.w	r0, fp, r0
 800476e:	4318      	orrs	r0, r3
 8004770:	9004      	str	r0, [sp, #16]
 8004772:	463d      	mov	r5, r7
 8004774:	e7d3      	b.n	800471e <_svfiprintf_r+0x92>
 8004776:	9a03      	ldr	r2, [sp, #12]
 8004778:	1d11      	adds	r1, r2, #4
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	9103      	str	r1, [sp, #12]
 800477e:	2a00      	cmp	r2, #0
 8004780:	db01      	blt.n	8004786 <_svfiprintf_r+0xfa>
 8004782:	9207      	str	r2, [sp, #28]
 8004784:	e004      	b.n	8004790 <_svfiprintf_r+0x104>
 8004786:	4252      	negs	r2, r2
 8004788:	f043 0302 	orr.w	r3, r3, #2
 800478c:	9207      	str	r2, [sp, #28]
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	783b      	ldrb	r3, [r7, #0]
 8004792:	2b2e      	cmp	r3, #46	; 0x2e
 8004794:	d10c      	bne.n	80047b0 <_svfiprintf_r+0x124>
 8004796:	787b      	ldrb	r3, [r7, #1]
 8004798:	2b2a      	cmp	r3, #42	; 0x2a
 800479a:	d133      	bne.n	8004804 <_svfiprintf_r+0x178>
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	9203      	str	r2, [sp, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bfb8      	it	lt
 80047a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047ac:	3702      	adds	r7, #2
 80047ae:	9305      	str	r3, [sp, #20]
 80047b0:	4d2e      	ldr	r5, [pc, #184]	; (800486c <_svfiprintf_r+0x1e0>)
 80047b2:	7839      	ldrb	r1, [r7, #0]
 80047b4:	2203      	movs	r2, #3
 80047b6:	4628      	mov	r0, r5
 80047b8:	f7fb fd2a 	bl	8000210 <memchr>
 80047bc:	b138      	cbz	r0, 80047ce <_svfiprintf_r+0x142>
 80047be:	2340      	movs	r3, #64	; 0x40
 80047c0:	1b40      	subs	r0, r0, r5
 80047c2:	fa03 f000 	lsl.w	r0, r3, r0
 80047c6:	9b04      	ldr	r3, [sp, #16]
 80047c8:	4303      	orrs	r3, r0
 80047ca:	3701      	adds	r7, #1
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	7839      	ldrb	r1, [r7, #0]
 80047d0:	4827      	ldr	r0, [pc, #156]	; (8004870 <_svfiprintf_r+0x1e4>)
 80047d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047d6:	2206      	movs	r2, #6
 80047d8:	1c7e      	adds	r6, r7, #1
 80047da:	f7fb fd19 	bl	8000210 <memchr>
 80047de:	2800      	cmp	r0, #0
 80047e0:	d038      	beq.n	8004854 <_svfiprintf_r+0x1c8>
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <_svfiprintf_r+0x1e8>)
 80047e4:	bb13      	cbnz	r3, 800482c <_svfiprintf_r+0x1a0>
 80047e6:	9b03      	ldr	r3, [sp, #12]
 80047e8:	3307      	adds	r3, #7
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	3308      	adds	r3, #8
 80047f0:	9303      	str	r3, [sp, #12]
 80047f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f4:	444b      	add	r3, r9
 80047f6:	9309      	str	r3, [sp, #36]	; 0x24
 80047f8:	e76d      	b.n	80046d6 <_svfiprintf_r+0x4a>
 80047fa:	fb05 3202 	mla	r2, r5, r2, r3
 80047fe:	2001      	movs	r0, #1
 8004800:	460f      	mov	r7, r1
 8004802:	e7a6      	b.n	8004752 <_svfiprintf_r+0xc6>
 8004804:	2300      	movs	r3, #0
 8004806:	3701      	adds	r7, #1
 8004808:	9305      	str	r3, [sp, #20]
 800480a:	4619      	mov	r1, r3
 800480c:	250a      	movs	r5, #10
 800480e:	4638      	mov	r0, r7
 8004810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004814:	3a30      	subs	r2, #48	; 0x30
 8004816:	2a09      	cmp	r2, #9
 8004818:	d903      	bls.n	8004822 <_svfiprintf_r+0x196>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0c8      	beq.n	80047b0 <_svfiprintf_r+0x124>
 800481e:	9105      	str	r1, [sp, #20]
 8004820:	e7c6      	b.n	80047b0 <_svfiprintf_r+0x124>
 8004822:	fb05 2101 	mla	r1, r5, r1, r2
 8004826:	2301      	movs	r3, #1
 8004828:	4607      	mov	r7, r0
 800482a:	e7f0      	b.n	800480e <_svfiprintf_r+0x182>
 800482c:	ab03      	add	r3, sp, #12
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4622      	mov	r2, r4
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <_svfiprintf_r+0x1ec>)
 8004834:	a904      	add	r1, sp, #16
 8004836:	4640      	mov	r0, r8
 8004838:	f3af 8000 	nop.w
 800483c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004840:	4681      	mov	r9, r0
 8004842:	d1d6      	bne.n	80047f2 <_svfiprintf_r+0x166>
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	065b      	lsls	r3, r3, #25
 8004848:	f53f af35 	bmi.w	80046b6 <_svfiprintf_r+0x2a>
 800484c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800484e:	b01d      	add	sp, #116	; 0x74
 8004850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004854:	ab03      	add	r3, sp, #12
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	4622      	mov	r2, r4
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <_svfiprintf_r+0x1ec>)
 800485c:	a904      	add	r1, sp, #16
 800485e:	4640      	mov	r0, r8
 8004860:	f000 f882 	bl	8004968 <_printf_i>
 8004864:	e7ea      	b.n	800483c <_svfiprintf_r+0x1b0>
 8004866:	bf00      	nop
 8004868:	08004e80 	.word	0x08004e80
 800486c:	08004e86 	.word	0x08004e86
 8004870:	08004e8a 	.word	0x08004e8a
 8004874:	00000000 	.word	0x00000000
 8004878:	080045d9 	.word	0x080045d9

0800487c <_printf_common>:
 800487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	4691      	mov	r9, r2
 8004882:	461f      	mov	r7, r3
 8004884:	688a      	ldr	r2, [r1, #8]
 8004886:	690b      	ldr	r3, [r1, #16]
 8004888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800488c:	4293      	cmp	r3, r2
 800488e:	bfb8      	it	lt
 8004890:	4613      	movlt	r3, r2
 8004892:	f8c9 3000 	str.w	r3, [r9]
 8004896:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800489a:	4606      	mov	r6, r0
 800489c:	460c      	mov	r4, r1
 800489e:	b112      	cbz	r2, 80048a6 <_printf_common+0x2a>
 80048a0:	3301      	adds	r3, #1
 80048a2:	f8c9 3000 	str.w	r3, [r9]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	0699      	lsls	r1, r3, #26
 80048aa:	bf42      	ittt	mi
 80048ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048b0:	3302      	addmi	r3, #2
 80048b2:	f8c9 3000 	strmi.w	r3, [r9]
 80048b6:	6825      	ldr	r5, [r4, #0]
 80048b8:	f015 0506 	ands.w	r5, r5, #6
 80048bc:	d107      	bne.n	80048ce <_printf_common+0x52>
 80048be:	f104 0a19 	add.w	sl, r4, #25
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	f8d9 2000 	ldr.w	r2, [r9]
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	dc28      	bgt.n	8004920 <_printf_common+0xa4>
 80048ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	3300      	adds	r3, #0
 80048d6:	bf18      	it	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	0692      	lsls	r2, r2, #26
 80048dc:	d42d      	bmi.n	800493a <_printf_common+0xbe>
 80048de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e2:	4639      	mov	r1, r7
 80048e4:	4630      	mov	r0, r6
 80048e6:	47c0      	blx	r8
 80048e8:	3001      	adds	r0, #1
 80048ea:	d020      	beq.n	800492e <_printf_common+0xb2>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	68e5      	ldr	r5, [r4, #12]
 80048f0:	f8d9 2000 	ldr.w	r2, [r9]
 80048f4:	f003 0306 	and.w	r3, r3, #6
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	bf08      	it	eq
 80048fc:	1aad      	subeq	r5, r5, r2
 80048fe:	68a3      	ldr	r3, [r4, #8]
 8004900:	6922      	ldr	r2, [r4, #16]
 8004902:	bf0c      	ite	eq
 8004904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004908:	2500      	movne	r5, #0
 800490a:	4293      	cmp	r3, r2
 800490c:	bfc4      	itt	gt
 800490e:	1a9b      	subgt	r3, r3, r2
 8004910:	18ed      	addgt	r5, r5, r3
 8004912:	f04f 0900 	mov.w	r9, #0
 8004916:	341a      	adds	r4, #26
 8004918:	454d      	cmp	r5, r9
 800491a:	d11a      	bne.n	8004952 <_printf_common+0xd6>
 800491c:	2000      	movs	r0, #0
 800491e:	e008      	b.n	8004932 <_printf_common+0xb6>
 8004920:	2301      	movs	r3, #1
 8004922:	4652      	mov	r2, sl
 8004924:	4639      	mov	r1, r7
 8004926:	4630      	mov	r0, r6
 8004928:	47c0      	blx	r8
 800492a:	3001      	adds	r0, #1
 800492c:	d103      	bne.n	8004936 <_printf_common+0xba>
 800492e:	f04f 30ff 	mov.w	r0, #4294967295
 8004932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004936:	3501      	adds	r5, #1
 8004938:	e7c3      	b.n	80048c2 <_printf_common+0x46>
 800493a:	18e1      	adds	r1, r4, r3
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	2030      	movs	r0, #48	; 0x30
 8004940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004944:	4422      	add	r2, r4
 8004946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800494a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800494e:	3302      	adds	r3, #2
 8004950:	e7c5      	b.n	80048de <_printf_common+0x62>
 8004952:	2301      	movs	r3, #1
 8004954:	4622      	mov	r2, r4
 8004956:	4639      	mov	r1, r7
 8004958:	4630      	mov	r0, r6
 800495a:	47c0      	blx	r8
 800495c:	3001      	adds	r0, #1
 800495e:	d0e6      	beq.n	800492e <_printf_common+0xb2>
 8004960:	f109 0901 	add.w	r9, r9, #1
 8004964:	e7d8      	b.n	8004918 <_printf_common+0x9c>
	...

08004968 <_printf_i>:
 8004968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800496c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004970:	460c      	mov	r4, r1
 8004972:	7e09      	ldrb	r1, [r1, #24]
 8004974:	b085      	sub	sp, #20
 8004976:	296e      	cmp	r1, #110	; 0x6e
 8004978:	4617      	mov	r7, r2
 800497a:	4606      	mov	r6, r0
 800497c:	4698      	mov	r8, r3
 800497e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004980:	f000 80b3 	beq.w	8004aea <_printf_i+0x182>
 8004984:	d822      	bhi.n	80049cc <_printf_i+0x64>
 8004986:	2963      	cmp	r1, #99	; 0x63
 8004988:	d036      	beq.n	80049f8 <_printf_i+0x90>
 800498a:	d80a      	bhi.n	80049a2 <_printf_i+0x3a>
 800498c:	2900      	cmp	r1, #0
 800498e:	f000 80b9 	beq.w	8004b04 <_printf_i+0x19c>
 8004992:	2958      	cmp	r1, #88	; 0x58
 8004994:	f000 8083 	beq.w	8004a9e <_printf_i+0x136>
 8004998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800499c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049a0:	e032      	b.n	8004a08 <_printf_i+0xa0>
 80049a2:	2964      	cmp	r1, #100	; 0x64
 80049a4:	d001      	beq.n	80049aa <_printf_i+0x42>
 80049a6:	2969      	cmp	r1, #105	; 0x69
 80049a8:	d1f6      	bne.n	8004998 <_printf_i+0x30>
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	6813      	ldr	r3, [r2, #0]
 80049ae:	0605      	lsls	r5, r0, #24
 80049b0:	f103 0104 	add.w	r1, r3, #4
 80049b4:	d52a      	bpl.n	8004a0c <_printf_i+0xa4>
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da03      	bge.n	80049c6 <_printf_i+0x5e>
 80049be:	222d      	movs	r2, #45	; 0x2d
 80049c0:	425b      	negs	r3, r3
 80049c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049c6:	486f      	ldr	r0, [pc, #444]	; (8004b84 <_printf_i+0x21c>)
 80049c8:	220a      	movs	r2, #10
 80049ca:	e039      	b.n	8004a40 <_printf_i+0xd8>
 80049cc:	2973      	cmp	r1, #115	; 0x73
 80049ce:	f000 809d 	beq.w	8004b0c <_printf_i+0x1a4>
 80049d2:	d808      	bhi.n	80049e6 <_printf_i+0x7e>
 80049d4:	296f      	cmp	r1, #111	; 0x6f
 80049d6:	d020      	beq.n	8004a1a <_printf_i+0xb2>
 80049d8:	2970      	cmp	r1, #112	; 0x70
 80049da:	d1dd      	bne.n	8004998 <_printf_i+0x30>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	f043 0320 	orr.w	r3, r3, #32
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	e003      	b.n	80049ee <_printf_i+0x86>
 80049e6:	2975      	cmp	r1, #117	; 0x75
 80049e8:	d017      	beq.n	8004a1a <_printf_i+0xb2>
 80049ea:	2978      	cmp	r1, #120	; 0x78
 80049ec:	d1d4      	bne.n	8004998 <_printf_i+0x30>
 80049ee:	2378      	movs	r3, #120	; 0x78
 80049f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049f4:	4864      	ldr	r0, [pc, #400]	; (8004b88 <_printf_i+0x220>)
 80049f6:	e055      	b.n	8004aa4 <_printf_i+0x13c>
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	1d19      	adds	r1, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6011      	str	r1, [r2, #0]
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e08c      	b.n	8004b26 <_printf_i+0x1be>
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6011      	str	r1, [r2, #0]
 8004a10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a14:	bf18      	it	ne
 8004a16:	b21b      	sxthne	r3, r3
 8004a18:	e7cf      	b.n	80049ba <_printf_i+0x52>
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1d18      	adds	r0, r3, #4
 8004a20:	6010      	str	r0, [r2, #0]
 8004a22:	0628      	lsls	r0, r5, #24
 8004a24:	d501      	bpl.n	8004a2a <_printf_i+0xc2>
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e002      	b.n	8004a30 <_printf_i+0xc8>
 8004a2a:	0668      	lsls	r0, r5, #25
 8004a2c:	d5fb      	bpl.n	8004a26 <_printf_i+0xbe>
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	4854      	ldr	r0, [pc, #336]	; (8004b84 <_printf_i+0x21c>)
 8004a32:	296f      	cmp	r1, #111	; 0x6f
 8004a34:	bf14      	ite	ne
 8004a36:	220a      	movne	r2, #10
 8004a38:	2208      	moveq	r2, #8
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a40:	6865      	ldr	r5, [r4, #4]
 8004a42:	60a5      	str	r5, [r4, #8]
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	f2c0 8095 	blt.w	8004b74 <_printf_i+0x20c>
 8004a4a:	6821      	ldr	r1, [r4, #0]
 8004a4c:	f021 0104 	bic.w	r1, r1, #4
 8004a50:	6021      	str	r1, [r4, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d13d      	bne.n	8004ad2 <_printf_i+0x16a>
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	f040 808e 	bne.w	8004b78 <_printf_i+0x210>
 8004a5c:	4665      	mov	r5, ip
 8004a5e:	2a08      	cmp	r2, #8
 8004a60:	d10b      	bne.n	8004a7a <_printf_i+0x112>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	07db      	lsls	r3, r3, #31
 8004a66:	d508      	bpl.n	8004a7a <_printf_i+0x112>
 8004a68:	6923      	ldr	r3, [r4, #16]
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	bfde      	ittt	le
 8004a70:	2330      	movle	r3, #48	; 0x30
 8004a72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a7a:	ebac 0305 	sub.w	r3, ip, r5
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	f8cd 8000 	str.w	r8, [sp]
 8004a84:	463b      	mov	r3, r7
 8004a86:	aa03      	add	r2, sp, #12
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	f7ff fef6 	bl	800487c <_printf_common>
 8004a90:	3001      	adds	r0, #1
 8004a92:	d14d      	bne.n	8004b30 <_printf_i+0x1c8>
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	b005      	add	sp, #20
 8004a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a9e:	4839      	ldr	r0, [pc, #228]	; (8004b84 <_printf_i+0x21c>)
 8004aa0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004aa4:	6813      	ldr	r3, [r2, #0]
 8004aa6:	6821      	ldr	r1, [r4, #0]
 8004aa8:	1d1d      	adds	r5, r3, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6015      	str	r5, [r2, #0]
 8004aae:	060a      	lsls	r2, r1, #24
 8004ab0:	d50b      	bpl.n	8004aca <_printf_i+0x162>
 8004ab2:	07ca      	lsls	r2, r1, #31
 8004ab4:	bf44      	itt	mi
 8004ab6:	f041 0120 	orrmi.w	r1, r1, #32
 8004aba:	6021      	strmi	r1, [r4, #0]
 8004abc:	b91b      	cbnz	r3, 8004ac6 <_printf_i+0x15e>
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	f022 0220 	bic.w	r2, r2, #32
 8004ac4:	6022      	str	r2, [r4, #0]
 8004ac6:	2210      	movs	r2, #16
 8004ac8:	e7b7      	b.n	8004a3a <_printf_i+0xd2>
 8004aca:	064d      	lsls	r5, r1, #25
 8004acc:	bf48      	it	mi
 8004ace:	b29b      	uxthmi	r3, r3
 8004ad0:	e7ef      	b.n	8004ab2 <_printf_i+0x14a>
 8004ad2:	4665      	mov	r5, ip
 8004ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad8:	fb02 3311 	mls	r3, r2, r1, r3
 8004adc:	5cc3      	ldrb	r3, [r0, r3]
 8004ade:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	d1f5      	bne.n	8004ad4 <_printf_i+0x16c>
 8004ae8:	e7b9      	b.n	8004a5e <_printf_i+0xf6>
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	6825      	ldr	r5, [r4, #0]
 8004aee:	6961      	ldr	r1, [r4, #20]
 8004af0:	1d18      	adds	r0, r3, #4
 8004af2:	6010      	str	r0, [r2, #0]
 8004af4:	0628      	lsls	r0, r5, #24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	d501      	bpl.n	8004afe <_printf_i+0x196>
 8004afa:	6019      	str	r1, [r3, #0]
 8004afc:	e002      	b.n	8004b04 <_printf_i+0x19c>
 8004afe:	066a      	lsls	r2, r5, #25
 8004b00:	d5fb      	bpl.n	8004afa <_printf_i+0x192>
 8004b02:	8019      	strh	r1, [r3, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	4665      	mov	r5, ip
 8004b0a:	e7b9      	b.n	8004a80 <_printf_i+0x118>
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	1d19      	adds	r1, r3, #4
 8004b10:	6011      	str	r1, [r2, #0]
 8004b12:	681d      	ldr	r5, [r3, #0]
 8004b14:	6862      	ldr	r2, [r4, #4]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7fb fb79 	bl	8000210 <memchr>
 8004b1e:	b108      	cbz	r0, 8004b24 <_printf_i+0x1bc>
 8004b20:	1b40      	subs	r0, r0, r5
 8004b22:	6060      	str	r0, [r4, #4]
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	6123      	str	r3, [r4, #16]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2e:	e7a7      	b.n	8004a80 <_printf_i+0x118>
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	462a      	mov	r2, r5
 8004b34:	4639      	mov	r1, r7
 8004b36:	4630      	mov	r0, r6
 8004b38:	47c0      	blx	r8
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d0aa      	beq.n	8004a94 <_printf_i+0x12c>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	079b      	lsls	r3, r3, #30
 8004b42:	d413      	bmi.n	8004b6c <_printf_i+0x204>
 8004b44:	68e0      	ldr	r0, [r4, #12]
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	4298      	cmp	r0, r3
 8004b4a:	bfb8      	it	lt
 8004b4c:	4618      	movlt	r0, r3
 8004b4e:	e7a3      	b.n	8004a98 <_printf_i+0x130>
 8004b50:	2301      	movs	r3, #1
 8004b52:	464a      	mov	r2, r9
 8004b54:	4639      	mov	r1, r7
 8004b56:	4630      	mov	r0, r6
 8004b58:	47c0      	blx	r8
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d09a      	beq.n	8004a94 <_printf_i+0x12c>
 8004b5e:	3501      	adds	r5, #1
 8004b60:	68e3      	ldr	r3, [r4, #12]
 8004b62:	9a03      	ldr	r2, [sp, #12]
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	42ab      	cmp	r3, r5
 8004b68:	dcf2      	bgt.n	8004b50 <_printf_i+0x1e8>
 8004b6a:	e7eb      	b.n	8004b44 <_printf_i+0x1dc>
 8004b6c:	2500      	movs	r5, #0
 8004b6e:	f104 0919 	add.w	r9, r4, #25
 8004b72:	e7f5      	b.n	8004b60 <_printf_i+0x1f8>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ac      	bne.n	8004ad2 <_printf_i+0x16a>
 8004b78:	7803      	ldrb	r3, [r0, #0]
 8004b7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b82:	e76c      	b.n	8004a5e <_printf_i+0xf6>
 8004b84:	08004e91 	.word	0x08004e91
 8004b88:	08004ea2 	.word	0x08004ea2

08004b8c <memcpy>:
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	1e43      	subs	r3, r0, #1
 8004b90:	440a      	add	r2, r1
 8004b92:	4291      	cmp	r1, r2
 8004b94:	d100      	bne.n	8004b98 <memcpy+0xc>
 8004b96:	bd10      	pop	{r4, pc}
 8004b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ba0:	e7f7      	b.n	8004b92 <memcpy+0x6>

08004ba2 <memmove>:
 8004ba2:	4288      	cmp	r0, r1
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	eb01 0302 	add.w	r3, r1, r2
 8004baa:	d807      	bhi.n	8004bbc <memmove+0x1a>
 8004bac:	1e42      	subs	r2, r0, #1
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	d00a      	beq.n	8004bc8 <memmove+0x26>
 8004bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bb6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bba:	e7f8      	b.n	8004bae <memmove+0xc>
 8004bbc:	4283      	cmp	r3, r0
 8004bbe:	d9f5      	bls.n	8004bac <memmove+0xa>
 8004bc0:	1881      	adds	r1, r0, r2
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	42d3      	cmn	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memmove+0x28>
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004bd2:	e7f7      	b.n	8004bc4 <memmove+0x22>

08004bd4 <_free_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d045      	beq.n	8004c68 <_free_r+0x94>
 8004bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004be0:	1f0c      	subs	r4, r1, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bfb8      	it	lt
 8004be6:	18e4      	addlt	r4, r4, r3
 8004be8:	f000 f8d2 	bl	8004d90 <__malloc_lock>
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <_free_r+0x98>)
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	b933      	cbnz	r3, 8004c02 <_free_r+0x2e>
 8004bf4:	6063      	str	r3, [r4, #4]
 8004bf6:	6014      	str	r4, [r2, #0]
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bfe:	f000 b8c8 	b.w	8004d92 <__malloc_unlock>
 8004c02:	42a3      	cmp	r3, r4
 8004c04:	d90c      	bls.n	8004c20 <_free_r+0x4c>
 8004c06:	6821      	ldr	r1, [r4, #0]
 8004c08:	1862      	adds	r2, r4, r1
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	bf04      	itt	eq
 8004c0e:	681a      	ldreq	r2, [r3, #0]
 8004c10:	685b      	ldreq	r3, [r3, #4]
 8004c12:	6063      	str	r3, [r4, #4]
 8004c14:	bf04      	itt	eq
 8004c16:	1852      	addeq	r2, r2, r1
 8004c18:	6022      	streq	r2, [r4, #0]
 8004c1a:	6004      	str	r4, [r0, #0]
 8004c1c:	e7ec      	b.n	8004bf8 <_free_r+0x24>
 8004c1e:	4613      	mov	r3, r2
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	b10a      	cbz	r2, 8004c28 <_free_r+0x54>
 8004c24:	42a2      	cmp	r2, r4
 8004c26:	d9fa      	bls.n	8004c1e <_free_r+0x4a>
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	1858      	adds	r0, r3, r1
 8004c2c:	42a0      	cmp	r0, r4
 8004c2e:	d10b      	bne.n	8004c48 <_free_r+0x74>
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	4401      	add	r1, r0
 8004c34:	1858      	adds	r0, r3, r1
 8004c36:	4282      	cmp	r2, r0
 8004c38:	6019      	str	r1, [r3, #0]
 8004c3a:	d1dd      	bne.n	8004bf8 <_free_r+0x24>
 8004c3c:	6810      	ldr	r0, [r2, #0]
 8004c3e:	6852      	ldr	r2, [r2, #4]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	4401      	add	r1, r0
 8004c44:	6019      	str	r1, [r3, #0]
 8004c46:	e7d7      	b.n	8004bf8 <_free_r+0x24>
 8004c48:	d902      	bls.n	8004c50 <_free_r+0x7c>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	e7d3      	b.n	8004bf8 <_free_r+0x24>
 8004c50:	6820      	ldr	r0, [r4, #0]
 8004c52:	1821      	adds	r1, r4, r0
 8004c54:	428a      	cmp	r2, r1
 8004c56:	bf04      	itt	eq
 8004c58:	6811      	ldreq	r1, [r2, #0]
 8004c5a:	6852      	ldreq	r2, [r2, #4]
 8004c5c:	6062      	str	r2, [r4, #4]
 8004c5e:	bf04      	itt	eq
 8004c60:	1809      	addeq	r1, r1, r0
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	605c      	str	r4, [r3, #4]
 8004c66:	e7c7      	b.n	8004bf8 <_free_r+0x24>
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000110 	.word	0x20000110

08004c70 <_malloc_r>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	1ccd      	adds	r5, r1, #3
 8004c74:	f025 0503 	bic.w	r5, r5, #3
 8004c78:	3508      	adds	r5, #8
 8004c7a:	2d0c      	cmp	r5, #12
 8004c7c:	bf38      	it	cc
 8004c7e:	250c      	movcc	r5, #12
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	4606      	mov	r6, r0
 8004c84:	db01      	blt.n	8004c8a <_malloc_r+0x1a>
 8004c86:	42a9      	cmp	r1, r5
 8004c88:	d903      	bls.n	8004c92 <_malloc_r+0x22>
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	6033      	str	r3, [r6, #0]
 8004c8e:	2000      	movs	r0, #0
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	f000 f87d 	bl	8004d90 <__malloc_lock>
 8004c96:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <_malloc_r+0xac>)
 8004c98:	6814      	ldr	r4, [r2, #0]
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	b991      	cbnz	r1, 8004cc4 <_malloc_r+0x54>
 8004c9e:	4c20      	ldr	r4, [pc, #128]	; (8004d20 <_malloc_r+0xb0>)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	b91b      	cbnz	r3, 8004cac <_malloc_r+0x3c>
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	f000 f863 	bl	8004d70 <_sbrk_r>
 8004caa:	6020      	str	r0, [r4, #0]
 8004cac:	4629      	mov	r1, r5
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f000 f85e 	bl	8004d70 <_sbrk_r>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d124      	bne.n	8004d02 <_malloc_r+0x92>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	6033      	str	r3, [r6, #0]
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f000 f868 	bl	8004d92 <__malloc_unlock>
 8004cc2:	e7e4      	b.n	8004c8e <_malloc_r+0x1e>
 8004cc4:	680b      	ldr	r3, [r1, #0]
 8004cc6:	1b5b      	subs	r3, r3, r5
 8004cc8:	d418      	bmi.n	8004cfc <_malloc_r+0x8c>
 8004cca:	2b0b      	cmp	r3, #11
 8004ccc:	d90f      	bls.n	8004cee <_malloc_r+0x7e>
 8004cce:	600b      	str	r3, [r1, #0]
 8004cd0:	50cd      	str	r5, [r1, r3]
 8004cd2:	18cc      	adds	r4, r1, r3
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 f85c 	bl	8004d92 <__malloc_unlock>
 8004cda:	f104 000b 	add.w	r0, r4, #11
 8004cde:	1d23      	adds	r3, r4, #4
 8004ce0:	f020 0007 	bic.w	r0, r0, #7
 8004ce4:	1ac3      	subs	r3, r0, r3
 8004ce6:	d0d3      	beq.n	8004c90 <_malloc_r+0x20>
 8004ce8:	425a      	negs	r2, r3
 8004cea:	50e2      	str	r2, [r4, r3]
 8004cec:	e7d0      	b.n	8004c90 <_malloc_r+0x20>
 8004cee:	428c      	cmp	r4, r1
 8004cf0:	684b      	ldr	r3, [r1, #4]
 8004cf2:	bf16      	itet	ne
 8004cf4:	6063      	strne	r3, [r4, #4]
 8004cf6:	6013      	streq	r3, [r2, #0]
 8004cf8:	460c      	movne	r4, r1
 8004cfa:	e7eb      	b.n	8004cd4 <_malloc_r+0x64>
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	6849      	ldr	r1, [r1, #4]
 8004d00:	e7cc      	b.n	8004c9c <_malloc_r+0x2c>
 8004d02:	1cc4      	adds	r4, r0, #3
 8004d04:	f024 0403 	bic.w	r4, r4, #3
 8004d08:	42a0      	cmp	r0, r4
 8004d0a:	d005      	beq.n	8004d18 <_malloc_r+0xa8>
 8004d0c:	1a21      	subs	r1, r4, r0
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f82e 	bl	8004d70 <_sbrk_r>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d0cf      	beq.n	8004cb8 <_malloc_r+0x48>
 8004d18:	6025      	str	r5, [r4, #0]
 8004d1a:	e7db      	b.n	8004cd4 <_malloc_r+0x64>
 8004d1c:	20000110 	.word	0x20000110
 8004d20:	20000114 	.word	0x20000114

08004d24 <_realloc_r>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	4607      	mov	r7, r0
 8004d28:	4614      	mov	r4, r2
 8004d2a:	460e      	mov	r6, r1
 8004d2c:	b921      	cbnz	r1, 8004d38 <_realloc_r+0x14>
 8004d2e:	4611      	mov	r1, r2
 8004d30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d34:	f7ff bf9c 	b.w	8004c70 <_malloc_r>
 8004d38:	b922      	cbnz	r2, 8004d44 <_realloc_r+0x20>
 8004d3a:	f7ff ff4b 	bl	8004bd4 <_free_r>
 8004d3e:	4625      	mov	r5, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	f000 f826 	bl	8004d94 <_malloc_usable_size_r>
 8004d48:	42a0      	cmp	r0, r4
 8004d4a:	d20f      	bcs.n	8004d6c <_realloc_r+0x48>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4638      	mov	r0, r7
 8004d50:	f7ff ff8e 	bl	8004c70 <_malloc_r>
 8004d54:	4605      	mov	r5, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0f2      	beq.n	8004d40 <_realloc_r+0x1c>
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	f7ff ff15 	bl	8004b8c <memcpy>
 8004d62:	4631      	mov	r1, r6
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7ff ff35 	bl	8004bd4 <_free_r>
 8004d6a:	e7e9      	b.n	8004d40 <_realloc_r+0x1c>
 8004d6c:	4635      	mov	r5, r6
 8004d6e:	e7e7      	b.n	8004d40 <_realloc_r+0x1c>

08004d70 <_sbrk_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4c06      	ldr	r4, [pc, #24]	; (8004d8c <_sbrk_r+0x1c>)
 8004d74:	2300      	movs	r3, #0
 8004d76:	4605      	mov	r5, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	f7fc fcba 	bl	80016f4 <_sbrk>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_sbrk_r+0x1a>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_sbrk_r+0x1a>
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	200001c4 	.word	0x200001c4

08004d90 <__malloc_lock>:
 8004d90:	4770      	bx	lr

08004d92 <__malloc_unlock>:
 8004d92:	4770      	bx	lr

08004d94 <_malloc_usable_size_r>:
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f18      	subs	r0, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfbc      	itt	lt
 8004d9e:	580b      	ldrlt	r3, [r1, r0]
 8004da0:	18c0      	addlt	r0, r0, r3
 8004da2:	4770      	bx	lr

08004da4 <_init>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	bf00      	nop
 8004da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004daa:	bc08      	pop	{r3}
 8004dac:	469e      	mov	lr, r3
 8004dae:	4770      	bx	lr

08004db0 <_fini>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr
