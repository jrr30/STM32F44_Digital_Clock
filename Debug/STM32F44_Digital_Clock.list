
STM32F44_Digital_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005390  08005390  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005398  08005398  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080053a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000064  08005404  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005404  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012080  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002991  00000000  00000000  00032157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00034ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c36  00000000  00000000  00035aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023697  00000000  00000000  000366d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132ca  00000000  00000000  00059d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7476  00000000  00000000  0006d037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000463c  00000000  00000000  001444b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00148aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800527c 	.word	0x0800527c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800527c 	.word	0x0800527c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:
  *
  * @retval None
  */

void delay_us(uint32_t microseconds)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <delay_us+0x2c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24

	while( __HAL_TIM_GET_COUNTER(&htim5) < microseconds);
 80005bc:	bf00      	nop
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <delay_us+0x2c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8f9      	bhi.n	80005be <delay_us+0x12>
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000114 	.word	0x20000114

080005dc <Push_Beep_Button>:
  *
  * @retval None
  */

void Push_Beep_Button(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, BUZZER_OUT_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <Push_Beep_Button+0x24>)
 80005e6:	f001 fc5f 	bl	8001ea8 <HAL_GPIO_WritePin>
	delay_us(5000);
 80005ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80005ee:	f7ff ffdd 	bl	80005ac <delay_us>
	HAL_GPIO_WritePin(GPIOA, BUZZER_OUT_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <Push_Beep_Button+0x24>)
 80005f8:	f001 fc56 	bl	8001ea8 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40020000 	.word	0x40020000

08000604 <setting_hours>:

void (*date_config[MENU_ITEMS_CONFIG])(uint8_t * G_counter) = {NULL};


static void setting_hours(uint8_t * hours)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	*hours = STime.Hours;
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <setting_hours+0x64>)
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x02)
 8000614:	e01a      	b.n	800064c <setting_hours+0x48>
	{
		if(12 < *hours)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b0c      	cmp	r3, #12
 800061c:	d903      	bls.n	8000626 <setting_hours+0x22>
		{
			*hours = ZERO_VALUE;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e012      	b.n	800064c <setting_hours+0x48>
		}
		else
		{
			Clear();
 8000626:	f000 fbb6 	bl	8000d96 <Clear>
			Set_Cursor(Column_1, Row_1);
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fb94 	bl	8000d5a <Set_Cursor>
			sprintf((char *)Buffer, "Setting Hrs:%d", global_counter);
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <setting_hours+0x68>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	490d      	ldr	r1, [pc, #52]	; (8000670 <setting_hours+0x6c>)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <setting_hours+0x70>)
 800063c:	f004 f97a 	bl	8004934 <siprintf>
			print_string(Buffer);
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <setting_hours+0x70>)
 8000642:	f000 fb6e 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <setting_hours+0x74>)
 8000648:	f7ff ffb0 	bl	80005ac <delay_us>
	while(G_Status_F.shifting_parameter == 0x02)
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <setting_hours+0x78>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d0e0      	beq.n	8000616 <setting_hours+0x12>
		}
	}
	STime.Hours = *hours;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <setting_hours+0x64>)
 800065a:	701a      	strb	r2, [r3, #0]
	Clear();
 800065c:	f000 fb9b 	bl	8000d96 <Clear>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000c0 	.word	0x200000c0
 800066c:	200001a8 	.word	0x200001a8
 8000670:	08005294 	.word	0x08005294
 8000674:	20000098 	.word	0x20000098
 8000678:	000186a0 	.word	0x000186a0
 800067c:	200001a0 	.word	0x200001a0

08000680 <setting_minutes>:


static void setting_minutes(uint8_t * minutes)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	*minutes = STime.Minutes;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <setting_minutes+0x64>)
 800068a:	785a      	ldrb	r2, [r3, #1]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x04)
 8000690:	e01a      	b.n	80006c8 <setting_minutes+0x48>
	{
		if(60 < *minutes)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b3c      	cmp	r3, #60	; 0x3c
 8000698:	d903      	bls.n	80006a2 <setting_minutes+0x22>
		{
			*minutes = ZERO_VALUE;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e012      	b.n	80006c8 <setting_minutes+0x48>
		}
		else
		{
			Clear();
 80006a2:	f000 fb78 	bl	8000d96 <Clear>
			Set_Cursor(Column_1, Row_1);
 80006a6:	2100      	movs	r1, #0
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fb56 	bl	8000d5a <Set_Cursor>
			sprintf((char *)Buffer, "Setting Min:%d", global_counter);
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <setting_minutes+0x68>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <setting_minutes+0x6c>)
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <setting_minutes+0x70>)
 80006b8:	f004 f93c 	bl	8004934 <siprintf>
			print_string(Buffer);
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <setting_minutes+0x70>)
 80006be:	f000 fb30 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <setting_minutes+0x74>)
 80006c4:	f7ff ff72 	bl	80005ac <delay_us>
	while(G_Status_F.shifting_parameter == 0x04)
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <setting_minutes+0x78>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d0e0      	beq.n	8000692 <setting_minutes+0x12>
		}
	}
	STime.Minutes = *minutes;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <setting_minutes+0x64>)
 80006d6:	705a      	strb	r2, [r3, #1]
	Clear();
 80006d8:	f000 fb5d 	bl	8000d96 <Clear>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000c0 	.word	0x200000c0
 80006e8:	200001a8 	.word	0x200001a8
 80006ec:	080052a4 	.word	0x080052a4
 80006f0:	20000098 	.word	0x20000098
 80006f4:	000186a0 	.word	0x000186a0
 80006f8:	200001a0 	.word	0x200001a0

080006fc <setting_seconds>:

static void setting_seconds(uint8_t * seconds)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	*seconds = STime.Seconds;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <setting_seconds+0x64>)
 8000706:	789a      	ldrb	r2, [r3, #2]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x08)
 800070c:	e01a      	b.n	8000744 <setting_seconds+0x48>
	{
		if(60 < *seconds)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b3c      	cmp	r3, #60	; 0x3c
 8000714:	d903      	bls.n	800071e <setting_seconds+0x22>
		{
			*seconds = ZERO_VALUE;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	e012      	b.n	8000744 <setting_seconds+0x48>
		}
		else
		{
			Clear();
 800071e:	f000 fb3a 	bl	8000d96 <Clear>
			Set_Cursor(Column_1, Row_1);
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fb18 	bl	8000d5a <Set_Cursor>
			sprintf((char *)Buffer, "Setting Sec:%d", global_counter);
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <setting_seconds+0x68>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	490d      	ldr	r1, [pc, #52]	; (8000768 <setting_seconds+0x6c>)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <setting_seconds+0x70>)
 8000734:	f004 f8fe 	bl	8004934 <siprintf>
			print_string(Buffer);
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <setting_seconds+0x70>)
 800073a:	f000 faf2 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <setting_seconds+0x74>)
 8000740:	f7ff ff34 	bl	80005ac <delay_us>
	while(G_Status_F.shifting_parameter == 0x08)
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <setting_seconds+0x78>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	2b08      	cmp	r3, #8
 800074a:	d0e0      	beq.n	800070e <setting_seconds+0x12>
		}
	}
	STime.Seconds = *seconds;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <setting_seconds+0x64>)
 8000752:	709a      	strb	r2, [r3, #2]
	Clear();
 8000754:	f000 fb1f 	bl	8000d96 <Clear>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000c0 	.word	0x200000c0
 8000764:	200001a8 	.word	0x200001a8
 8000768:	080052b4 	.word	0x080052b4
 800076c:	20000098 	.word	0x20000098
 8000770:	000186a0 	.word	0x000186a0
 8000774:	200001a0 	.word	0x200001a0

08000778 <setting_period>:

static void setting_period(uint8_t * period)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	*period = ZERO_VALUE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x10)
 8000786:	e01e      	b.n	80007c6 <setting_period+0x4e>
	{
		if(1 < *period)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d903      	bls.n	8000798 <setting_period+0x20>
		{
			*period = ZERO_VALUE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	e016      	b.n	80007c6 <setting_period+0x4e>
		}
		else
		{
			Clear();
 8000798:	f000 fafd 	bl	8000d96 <Clear>
			Set_Cursor(Column_1, Row_1);
 800079c:	2100      	movs	r1, #0
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fadb 	bl	8000d5a <Set_Cursor>
			sprintf((char *)Buffer, "Sel Period:%s", str[*period]);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <setting_period+0x78>)
 80007ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4910      	ldr	r1, [pc, #64]	; (80007f4 <setting_period+0x7c>)
 80007b4:	4810      	ldr	r0, [pc, #64]	; (80007f8 <setting_period+0x80>)
 80007b6:	f004 f8bd 	bl	8004934 <siprintf>
			print_string(Buffer);
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <setting_period+0x80>)
 80007bc:	f000 fab1 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <setting_period+0x84>)
 80007c2:	f7ff fef3 	bl	80005ac <delay_us>
	while(G_Status_F.shifting_parameter == 0x10)
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <setting_period+0x88>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d0dc      	beq.n	8000788 <setting_period+0x10>
		}
	}
	if(0x00 == *period)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d103      	bne.n	80007de <setting_period+0x66>
	{
		STime.TimeFormat = RTC_HOURFORMAT12_AM;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <setting_period+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	70da      	strb	r2, [r3, #3]
 80007dc:	e002      	b.n	80007e4 <setting_period+0x6c>
	}
	else
	{
		STime.TimeFormat = RTC_HOURFORMAT12_PM;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <setting_period+0x8c>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	70da      	strb	r2, [r3, #3]
	}
	Clear();
 80007e4:	f000 fad7 	bl	8000d96 <Clear>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	080052c4 	.word	0x080052c4
 80007f8:	20000098 	.word	0x20000098
 80007fc:	000186a0 	.word	0x000186a0
 8000800:	200001a0 	.word	0x200001a0
 8000804:	200000c0 	.word	0x200000c0

08000808 <setting_day>:

static void setting_day(uint8_t * day)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	*day = SDate.WeekDay;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <setting_day+0x64>)
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x20)
 8000818:	e01a      	b.n	8000850 <setting_day+0x48>
	{
		if(31 < *day)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b1f      	cmp	r3, #31
 8000820:	d903      	bls.n	800082a <setting_day+0x22>
		{
			*day = ZERO_VALUE;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e012      	b.n	8000850 <setting_day+0x48>
		}
		else
		{
			Clear();
 800082a:	f000 fab4 	bl	8000d96 <Clear>
			Set_Cursor(Column_1, Row_1);
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fa92 	bl	8000d5a <Set_Cursor>
			sprintf((char *)Buffer, "Setting Day:%d", global_counter);
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <setting_day+0x68>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	490d      	ldr	r1, [pc, #52]	; (8000874 <setting_day+0x6c>)
 800083e:	480e      	ldr	r0, [pc, #56]	; (8000878 <setting_day+0x70>)
 8000840:	f004 f878 	bl	8004934 <siprintf>
			print_string(Buffer);
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <setting_day+0x70>)
 8000846:	f000 fa6c 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <setting_day+0x74>)
 800084c:	f7ff feae 	bl	80005ac <delay_us>
	while(G_Status_F.shifting_parameter == 0x20)
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <setting_day+0x78>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	2b20      	cmp	r3, #32
 8000856:	d0e0      	beq.n	800081a <setting_day+0x12>
		}
	}
	SDate.Date = *day;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <setting_day+0x64>)
 800085e:	709a      	strb	r2, [r3, #2]
	Clear();
 8000860:	f000 fa99 	bl	8000d96 <Clear>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000d4 	.word	0x200000d4
 8000870:	200001a8 	.word	0x200001a8
 8000874:	080052d4 	.word	0x080052d4
 8000878:	20000098 	.word	0x20000098
 800087c:	000186a0 	.word	0x000186a0
 8000880:	200001a0 	.word	0x200001a0

08000884 <setting_month>:

static void setting_month(uint8_t * month)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	*month = SDate.Month;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <setting_month+0x64>)
 800088e:	785a      	ldrb	r2, [r3, #1]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x40)
 8000894:	e01a      	b.n	80008cc <setting_month+0x48>
	{
		if(12 < *month)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b0c      	cmp	r3, #12
 800089c:	d903      	bls.n	80008a6 <setting_month+0x22>
		{
			*month = ZERO_VALUE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e012      	b.n	80008cc <setting_month+0x48>
		}
		else
		{
			Clear();
 80008a6:	f000 fa76 	bl	8000d96 <Clear>
			Set_Cursor(Column_1, Row_1);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fa54 	bl	8000d5a <Set_Cursor>
			sprintf((char *)Buffer, "Setting MTH:%d", global_counter);
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <setting_month+0x68>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	490d      	ldr	r1, [pc, #52]	; (80008f0 <setting_month+0x6c>)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <setting_month+0x70>)
 80008bc:	f004 f83a 	bl	8004934 <siprintf>
			print_string(Buffer);
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <setting_month+0x70>)
 80008c2:	f000 fa2e 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <setting_month+0x74>)
 80008c8:	f7ff fe70 	bl	80005ac <delay_us>
	while(G_Status_F.shifting_parameter == 0x40)
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <setting_month+0x78>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	d0e0      	beq.n	8000896 <setting_month+0x12>
		}
	}
	SDate.Month = *month;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <setting_month+0x64>)
 80008da:	705a      	strb	r2, [r3, #1]
	Clear();
 80008dc:	f000 fa5b 	bl	8000d96 <Clear>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000d4 	.word	0x200000d4
 80008ec:	200001a8 	.word	0x200001a8
 80008f0:	080052e4 	.word	0x080052e4
 80008f4:	20000098 	.word	0x20000098
 80008f8:	000186a0 	.word	0x000186a0
 80008fc:	200001a0 	.word	0x200001a0

08000900 <setting_year>:

static void setting_year(uint8_t * year)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	*year = SDate.Year;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <setting_year+0x68>)
 800090a:	78da      	ldrb	r2, [r3, #3]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	701a      	strb	r2, [r3, #0]
	while(G_Status_F.shifting_parameter == 0x80)
 8000910:	e01c      	b.n	800094c <setting_year+0x4c>
	{
		if(99 < *year)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b63      	cmp	r3, #99	; 0x63
 8000918:	d903      	bls.n	8000922 <setting_year+0x22>
		{
			*year = ZERO_VALUE;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e014      	b.n	800094c <setting_year+0x4c>
		}
		else
		{
			Clear();
 8000922:	f000 fa38 	bl	8000d96 <Clear>
			Set_Cursor(Column_1, Row_1);
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f000 fa16 	bl	8000d5a <Set_Cursor>
			sprintf((char *)Buffer, "Setting Yr:%d", (2000 +global_counter));
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <setting_year+0x6c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000936:	461a      	mov	r2, r3
 8000938:	490d      	ldr	r1, [pc, #52]	; (8000970 <setting_year+0x70>)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <setting_year+0x74>)
 800093c:	f003 fffa 	bl	8004934 <siprintf>
			print_string(Buffer);
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <setting_year+0x74>)
 8000942:	f000 f9ee 	bl	8000d22 <print_string>
			delay_us(REFRESH_TIME_SETTINGS);
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <setting_year+0x78>)
 8000948:	f7ff fe30 	bl	80005ac <delay_us>
	while(G_Status_F.shifting_parameter == 0x80)
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <setting_year+0x7c>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b80      	cmp	r3, #128	; 0x80
 8000952:	d0de      	beq.n	8000912 <setting_year+0x12>
		}
	}
	SDate.Year = *year;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <setting_year+0x68>)
 800095a:	70da      	strb	r2, [r3, #3]
	Clear();
 800095c:	f000 fa1b 	bl	8000d96 <Clear>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000d4 	.word	0x200000d4
 800096c:	200001a8 	.word	0x200001a8
 8000970:	080052f4 	.word	0x080052f4
 8000974:	20000098 	.word	0x20000098
 8000978:	000186a0 	.word	0x000186a0
 800097c:	200001a0 	.word	0x200001a0

08000980 <setting_time>:

void setting_time(uint8_t * gobla_counter_Prt)
{
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	Get_Time_Date(&Gglobal_time, &Gglobal_date, &hrtc);
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <setting_time+0xac>)
 800098a:	4929      	ldr	r1, [pc, #164]	; (8000a30 <setting_time+0xb0>)
 800098c:	4829      	ldr	r0, [pc, #164]	; (8000a34 <setting_time+0xb4>)
 800098e:	f000 fa18 	bl	8000dc2 <Get_Time_Date>
	STime = Gglobal_time;
 8000992:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <setting_time+0xb8>)
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <setting_time+0xb4>)
 8000996:	4614      	mov	r4, r2
 8000998:	461d      	mov	r5, r3
 800099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	6023      	str	r3, [r4, #0]
	SDate = Gglobal_date;
 80009a2:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <setting_time+0xbc>)
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <setting_time+0xb0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6013      	str	r3, [r2, #0]

	uint8_t iter_timer = 0x00;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]

	date_config[0] = &setting_hours;
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <setting_time+0xc0>)
 80009b0:	4a24      	ldr	r2, [pc, #144]	; (8000a44 <setting_time+0xc4>)
 80009b2:	601a      	str	r2, [r3, #0]
	date_config[1] = &setting_minutes;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <setting_time+0xc0>)
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <setting_time+0xc8>)
 80009b8:	605a      	str	r2, [r3, #4]
	date_config[2] = &setting_seconds;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <setting_time+0xc0>)
 80009bc:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <setting_time+0xcc>)
 80009be:	609a      	str	r2, [r3, #8]
	date_config[3] = &setting_period;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <setting_time+0xc0>)
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <setting_time+0xd0>)
 80009c4:	60da      	str	r2, [r3, #12]
	date_config[4] = &setting_day;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <setting_time+0xc0>)
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <setting_time+0xd4>)
 80009ca:	611a      	str	r2, [r3, #16]
	date_config[5] = &setting_month;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <setting_time+0xc0>)
 80009ce:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <setting_time+0xd8>)
 80009d0:	615a      	str	r2, [r3, #20]
	date_config[6] = &setting_year;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <setting_time+0xc0>)
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <setting_time+0xdc>)
 80009d6:	619a      	str	r2, [r3, #24]

	for(iter_timer = ZERO_VALUE; iter_timer <= 6; iter_timer++)
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e008      	b.n	80009f0 <setting_time+0x70>
	{
		(date_config[iter_timer])(gobla_counter_Prt);
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <setting_time+0xc0>)
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	4798      	blx	r3
	for(iter_timer = ZERO_VALUE; iter_timer <= 6; iter_timer++)
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	3301      	adds	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d9f3      	bls.n	80009de <setting_time+0x5e>
	}

	STime.Seconds = ZERO_VALUE; // Hardcoding value since seconds are not being set
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <setting_time+0xb8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetTime(&hrtc, &STime, RTC_FORMAT_BIN) != HAL_OK)
 80009fc:	2200      	movs	r2, #0
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <setting_time+0xb8>)
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <setting_time+0xac>)
 8000a02:	f002 fbd1 	bl	80031a8 <HAL_RTC_SetTime>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <setting_time+0x90>
	{
		Error_Handler();
 8000a0c:	f000 fd64 	bl	80014d8 <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &SDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a10:	2200      	movs	r2, #0
 8000a12:	490a      	ldr	r1, [pc, #40]	; (8000a3c <setting_time+0xbc>)
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <setting_time+0xac>)
 8000a16:	f002 fcbf 	bl	8003398 <HAL_RTC_SetDate>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <setting_time+0xa4>
	{
		Error_Handler();
 8000a20:	f000 fd5a 	bl	80014d8 <Error_Handler>
	}
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a2c:	200000f4 	.word	0x200000f4
 8000a30:	200000bc 	.word	0x200000bc
 8000a34:	200000a8 	.word	0x200000a8
 8000a38:	200000c0 	.word	0x200000c0
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	200000d8 	.word	0x200000d8
 8000a44:	08000605 	.word	0x08000605
 8000a48:	08000681 	.word	0x08000681
 8000a4c:	080006fd 	.word	0x080006fd
 8000a50:	08000779 	.word	0x08000779
 8000a54:	08000809 	.word	0x08000809
 8000a58:	08000885 	.word	0x08000885
 8000a5c:	08000901 	.word	0x08000901

08000a60 <Print_Time>:
		Error_Handler();
	}
}

void Print_Time(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af02      	add	r7, sp, #8
	uint8_t str_am_pm[3] = {0};
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <Print_Time+0x7c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	80bb      	strh	r3, [r7, #4]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	71bb      	strb	r3, [r7, #6]
	Get_Time_Date(&Gglobal_time, &Gglobal_date, &hrtc);
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <Print_Time+0x80>)
 8000a72:	491c      	ldr	r1, [pc, #112]	; (8000ae4 <Print_Time+0x84>)
 8000a74:	481c      	ldr	r0, [pc, #112]	; (8000ae8 <Print_Time+0x88>)
 8000a76:	f000 f9a4 	bl	8000dc2 <Get_Time_Date>
	if(RTC_HOURFORMAT12_AM == Gglobal_time.TimeFormat)
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <Print_Time+0x88>)
 8000a7c:	78db      	ldrb	r3, [r3, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d107      	bne.n	8000a92 <Print_Time+0x32>
	{
		memcpy(str_am_pm, str[0], 0x03);
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <Print_Time+0x8c>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	8811      	ldrh	r1, [r2, #0]
 8000a8a:	7892      	ldrb	r2, [r2, #2]
 8000a8c:	8019      	strh	r1, [r3, #0]
 8000a8e:	709a      	strb	r2, [r3, #2]
 8000a90:	e006      	b.n	8000aa0 <Print_Time+0x40>
	}
	else
	{
		memcpy(str_am_pm, str[1], 0x03);
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <Print_Time+0x8c>)
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	8811      	ldrh	r1, [r2, #0]
 8000a9a:	7892      	ldrb	r2, [r2, #2]
 8000a9c:	8019      	strh	r1, [r3, #0]
 8000a9e:	709a      	strb	r2, [r3, #2]
	}
	sprintf((char *)Buffer_time, "%02d:%02d:%02d %s", Gglobal_time.Hours, Gglobal_time.Minutes, Gglobal_time.Seconds, str_am_pm);
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <Print_Time+0x88>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <Print_Time+0x88>)
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <Print_Time+0x88>)
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	4603      	mov	r3, r0
 8000aba:	460a      	mov	r2, r1
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <Print_Time+0x90>)
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <Print_Time+0x94>)
 8000ac0:	f003 ff38 	bl	8004934 <siprintf>
	Set_Cursor(Row_1, Column_4);
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f947 	bl	8000d5a <Set_Cursor>
	print_string(Buffer_time);
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <Print_Time+0x94>)
 8000ace:	f000 f928 	bl	8000d22 <print_string>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08005318 	.word	0x08005318
 8000ae0:	200000f4 	.word	0x200000f4
 8000ae4:	200000bc 	.word	0x200000bc
 8000ae8:	200000a8 	.word	0x200000a8
 8000aec:	20000000 	.word	0x20000000
 8000af0:	08005304 	.word	0x08005304
 8000af4:	2000008c 	.word	0x2000008c

08000af8 <Print_Date>:
void Print_Date(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
	Get_Time_Date(&Gglobal_time, &Gglobal_date, &hrtc);
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <Print_Date+0x44>)
 8000b00:	490f      	ldr	r1, [pc, #60]	; (8000b40 <Print_Date+0x48>)
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <Print_Date+0x4c>)
 8000b04:	f000 f95d 	bl	8000dc2 <Get_Time_Date>
	sprintf((char *)Buffer_date, "%02d/%02d/%4d", Gglobal_date.Month, Gglobal_date.Date, (2000 + Gglobal_date.Year));
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <Print_Date+0x48>)
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <Print_Date+0x48>)
 8000b10:	789b      	ldrb	r3, [r3, #2]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <Print_Date+0x48>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	4909      	ldr	r1, [pc, #36]	; (8000b48 <Print_Date+0x50>)
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <Print_Date+0x54>)
 8000b24:	f003 ff06 	bl	8004934 <siprintf>
	Set_Cursor(Row_2, Column_4);
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f000 f915 	bl	8000d5a <Set_Cursor>
	print_string(Buffer_date);
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <Print_Date+0x54>)
 8000b32:	f000 f8f6 	bl	8000d22 <print_string>
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000f4 	.word	0x200000f4
 8000b40:	200000bc 	.word	0x200000bc
 8000b44:	200000a8 	.word	0x200000a8
 8000b48:	0800531c 	.word	0x0800531c
 8000b4c:	20000080 	.word	0x20000080

08000b50 <Enable_Pulse>:
#include "stm32f4xx_hal.h"
#include "LCD_1602.h"


static void Enable_Pulse(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_CONTROL_PORT, ENABLE, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <Enable_Pulse+0x2c>)
 8000b5c:	f001 f9a4 	bl	8001ea8 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fd23 	bl	80005ac <delay_us>
	HAL_GPIO_WritePin(PIN_CONTROL_PORT, ENABLE, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <Enable_Pulse+0x2c>)
 8000b6e:	f001 f99b 	bl	8001ea8 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fd1a 	bl	80005ac <delay_us>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40020400 	.word	0x40020400

08000b80 <Write_Data_Command_GPIO>:
  *            @arg COMMAND: to write a command in the LCD
  *            @arg DATA: to write data to the LCD.
  * @retval None
  */
static void Write_Data_Command_GPIO(uint8_t command, uint8_t rs)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
	 HAL_GPIO_WritePin(PIN_CONTROL_PORT, RS|RW|ENABLE, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000b96:	4826      	ldr	r0, [pc, #152]	; (8000c30 <Write_Data_Command_GPIO+0xb0>)
 8000b98:	f001 f986 	bl	8001ea8 <HAL_GPIO_WritePin>
	uint16_t bits_value = 0x00u;
	uint16_t GPIOC_PINs [MODE_DATA_4] = {GPIO_PIN_5,GPIO_PIN_6,GPIO_PIN_8,GPIO_PIN_9};
	uint8_t Offset_shiftting [MODE_DATA_4] = {0x05u,0x06u,0x08u,0x09u};
#endif

	if(rs == COMMAND)
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <Write_Data_Command_GPIO+0x2e>
	{
		HAL_GPIO_WritePin(PIN_CONTROL_PORT, RS, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	4822      	ldr	r0, [pc, #136]	; (8000c30 <Write_Data_Command_GPIO+0xb0>)
 8000ba8:	f001 f97e 	bl	8001ea8 <HAL_GPIO_WritePin>
 8000bac:	e004      	b.n	8000bb8 <Write_Data_Command_GPIO+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(PIN_CONTROL_PORT, RS, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	481f      	ldr	r0, [pc, #124]	; (8000c30 <Write_Data_Command_GPIO+0xb0>)
 8000bb4:	f001 f978 	bl	8001ea8 <HAL_GPIO_WritePin>
	}

	GPIOC->BSRR = bits_value;
#endif

	HAL_GPIO_WritePin(DATA_PORT,DATA_D4,((command>>0)&TRUE_VALUE));
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	481b      	ldr	r0, [pc, #108]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000bc6:	f001 f96f 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT,DATA_D5,((command>>1)&TRUE_VALUE));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	085b      	lsrs	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000bdc:	f001 f964 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT,DATA_D6,((command>>2)&TRUE_VALUE));
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000bf4:	f001 f958 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT,DATA_D7,((command>>3)&TRUE_VALUE));
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	08db      	lsrs	r3, r3, #3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000c0c:	f001 f94c 	bl	8001ea8 <HAL_GPIO_WritePin>

	Enable_Pulse();
 8000c10:	f7ff ff9e 	bl	8000b50 <Enable_Pulse>
	delay_us(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff fcc9 	bl	80005ac <delay_us>
	HAL_GPIO_WritePin(DATA_PORT, DATA_D4|DATA_D5|DATA_D6|DATA_D7, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <Write_Data_Command_GPIO+0xb4>)
 8000c22:	f001 f941 	bl	8001ea8 <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020400 	.word	0x40020400
 8000c34:	40020800 	.word	0x40020800

08000c38 <Write_Command>:
  * @param  Command specifies the command to be executed.
  *           @arg command: this instruction can be taken from the macros "Set of commands to operate the LCD"
  * @retval None
  */
void Write_Command(uint8_t com)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t command_lcd = COMMAND;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
	Write_Data_Command_GPIO(((MASK_HIGH&com)>>4), command_lcd);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff95 	bl	8000b80 <Write_Data_Command_GPIO>
	Write_Data_Command_GPIO( (MASK_LOW&com), command_lcd);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff8c 	bl	8000b80 <Write_Data_Command_GPIO>
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Write_Data>:
  *
  * @param  Command specifies the raw as single character
  * @retval None
  */
void Write_Data(uint8_t data)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t data_lcd = DATA;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
	Write_Data_Command_GPIO(((MASK_HIGH&data)>>4), data_lcd);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	7bfa      	ldrb	r2, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff79 	bl	8000b80 <Write_Data_Command_GPIO>
	Write_Data_Command_GPIO( MASK_LOW&data, data_lcd);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff70 	bl	8000b80 <Write_Data_Command_GPIO>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <LCD_Config>:
  * @note   This function do the configuration as 4 bit mode.
  *           if 8 bit mode is needed, this must be done.
  * @retval None
  */
void LCD_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	delay_us(20000);
 8000cac:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000cb0:	f7ff fc7c 	bl	80005ac <delay_us>
	Write_Data_Command_GPIO(0x03u, COMMAND);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f7ff ff62 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(7000);
 8000cbc:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000cc0:	f7ff fc74 	bl	80005ac <delay_us>
	Write_Data_Command_GPIO(0x03u, COMMAND);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f7ff ff5a 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f7ff fc6d 	bl	80005ac <delay_us>
	Write_Data_Command_GPIO(0x03u, COMMAND);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f7ff ff53 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(7000);
 8000cda:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000cde:	f7ff fc65 	bl	80005ac <delay_us>

	Write_Data_Command_GPIO(0x02u,COMMAND);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff ff4b 	bl	8000b80 <Write_Data_Command_GPIO>
	delay_us(40);
 8000cea:	2028      	movs	r0, #40	; 0x28
 8000cec:	f7ff fc5e 	bl	80005ac <delay_us>

	Write_Command(M4BIT|M2LINE|M5_8_Font);
 8000cf0:	2028      	movs	r0, #40	; 0x28
 8000cf2:	f7ff ffa1 	bl	8000c38 <Write_Command>

	Write_Command(ONDisp|OFFCursor|OFFBlink);
 8000cf6:	200c      	movs	r0, #12
 8000cf8:	f7ff ff9e 	bl	8000c38 <Write_Command>

	Write_Command(CLEAR_SCREEN);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ff9b 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000d02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d06:	f7ff fc51 	bl	80005ac <delay_us>

	Write_Command(IncAdd);
 8000d0a:	2006      	movs	r0, #6
 8000d0c:	f7ff ff94 	bl	8000c38 <Write_Command>
	Write_Command(CURSOR_RETURN);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff ff91 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000d16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1a:	f7ff fc47 	bl	80005ac <delay_us>

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <print_string>:
  * @note   This function shows in the LCD a string.
  * @param  row string can be in ASCII format but always in a array.
  * @retval None
  */
void print_string(uint8_t * lcd_str)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	  uint8_t iter = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]

	  while(lcd_str[iter] != '\0')
 8000d2e:	e009      	b.n	8000d44 <print_string+0x22>
	  {
		  Write_Data((uint8_t)lcd_str[iter]);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff99 	bl	8000c70 <Write_Data>
		  iter++;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3301      	adds	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
	  while(lcd_str[iter] != '\0')
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1ef      	bne.n	8000d30 <print_string+0xe>
	  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <Set_Cursor>:
  *          This parameter can be one of the Column_lcd enum values:
  *            @arg Column_lcd: Columns staring in 1 up to 16.
  * @retval None
  */
void Set_Cursor(Row_lcd row, uint8_t column)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	460a      	mov	r2, r1
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	4613      	mov	r3, r2
 8000d68:	71bb      	strb	r3, [r7, #6]
	if (Row_1 == row)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d107      	bne.n	8000d80 <Set_Cursor+0x26>
	{
		Write_Command((ROW_ONE_OFFSET<<4)|column);
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5d 	bl	8000c38 <Write_Command>
	}
	else
	{
		Write_Command((ROW_TWO_OFFSET<<4)|column);
	}
}
 8000d7e:	e006      	b.n	8000d8e <Set_Cursor+0x34>
		Write_Command((ROW_TWO_OFFSET<<4)|column);
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff55 	bl	8000c38 <Write_Command>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <Clear>:
  *
  * @note   This function will clear information displayed in the screen, but this will not set cursor at home position.
  * @retval None
  */
void Clear(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
	Write_Command(CLEAR_SCREEN);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff4c 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000da0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da4:	f7ff fc02 	bl	80005ac <delay_us>

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <Home>:
  *
  * @note   This function will set the cursor to the home address in the LCD Screen which is Column 1 and Row 1
  * @retval None
  */
void Home(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	Write_Command(CURSOR_RETURN);
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff ff41 	bl	8000c38 <Write_Command>
	delay_us(2000);
 8000db6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dba:	f7ff fbf7 	bl	80005ac <delay_us>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <Get_Time_Date>:
		Error_Handler();
	}

}
void Get_Time_Date(RTC_TimeTypeDef * Global_time_getting, RTC_DateTypeDef * Global_date_getting, RTC_HandleTypeDef * Ghrtc)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
	(void)HAL_RTC_GetTime(Ghrtc, Global_time_getting, RTC_FORMAT_BIN);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	68f9      	ldr	r1, [r7, #12]
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f002 fa82 	bl	80032dc <HAL_RTC_GetTime>
	(void)HAL_RTC_GetDate(Ghrtc, Global_date_getting, RTC_FORMAT_BIN);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f002 fb5f 	bl	80034a0 <HAL_RTC_GetDate>
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <Alarm_sound>:
		Error_Handler();
	}
}

void Alarm_sound(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	uint8_t iter_alarm_count = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]

	for(iter_alarm_count = 0; iter_alarm_count <= BUZZER_OUT_Pin; iter_alarm_count++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e009      	b.n	8000e10 <Alarm_sound+0x24>
	{
		HAL_GPIO_TogglePin(GPIOA, BUZZER_OUT_Pin);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <Alarm_sound+0x3c>)
 8000e00:	f001 f86b 	bl	8001eda <HAL_GPIO_TogglePin>
		delay_us(1000000);
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <Alarm_sound+0x40>)
 8000e06:	f7ff fbd1 	bl	80005ac <delay_us>
	for(iter_alarm_count = 0; iter_alarm_count <= BUZZER_OUT_Pin; iter_alarm_count++)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b20      	cmp	r3, #32
 8000e14:	d9f2      	bls.n	8000dfc <Alarm_sound+0x10>
	}
	HAL_GPIO_WritePin(GPIOA, BUZZER_OUT_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2120      	movs	r1, #32
 8000e1a:	4803      	ldr	r0, [pc, #12]	; (8000e28 <Alarm_sound+0x3c>)
 8000e1c:	f001 f844 	bl	8001ea8 <HAL_GPIO_WritePin>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	000f4240 	.word	0x000f4240

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	G_Status_F.Setting_Time_Date = ZERO_VALUE;
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <main+0x78>)
 8000e36:	7893      	ldrb	r3, [r2, #2]
 8000e38:	f36f 0300 	bfc	r3, #0, #1
 8000e3c:	7093      	strb	r3, [r2, #2]
	G_Status_F.shifting_parameter = ONE_VALUE;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <main+0x78>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	801a      	strh	r2, [r3, #0]

	G_Variables.counter_us_debound = ZERO_VALUE;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <main+0x7c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4a:	f000 fd5d 	bl	8001908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f837 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f000 f9a1 	bl	8001198 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e56:	f000 f895 	bl	8000f84 <MX_RTC_Init>
  MX_TIM5_Init();
 8000e5a:	f000 f925 	bl	80010a8 <MX_TIM5_Init>
  MX_UART4_Init();
 8000e5e:	f000 f971 	bl	8001144 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 8000e62:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <main+0x80>)
 8000e64:	f002 fe0a 	bl	8003a7c <HAL_TIM_Base_Start>
  LCD_Config();
 8000e68:	f7ff ff1e 	bl	8000ca8 <LCD_Config>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while(G_Status_F.Setting_Time_Date)
 8000e6c:	e00c      	b.n	8000e88 <main+0x58>
	  {
		Clear();
 8000e6e:	f7ff ff92 	bl	8000d96 <Clear>
		Home();
 8000e72:	f7ff ff9b 	bl	8000dac <Home>
		print_string((uint8_t *)text);
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <main+0x84>)
 8000e78:	f7ff ff53 	bl	8000d22 <print_string>
		delay_us(1000000);
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <main+0x88>)
 8000e7e:	f7ff fb95 	bl	80005ac <delay_us>
		setting_time(&global_counter);
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <main+0x8c>)
 8000e84:	f7ff fd7c 	bl	8000980 <setting_time>
	  while(G_Status_F.Setting_Time_Date)
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <main+0x78>)
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1eb      	bne.n	8000e6e <main+0x3e>
	  }

	  Print_Time();
 8000e96:	f7ff fde3 	bl	8000a60 <Print_Time>
	  Print_Date();
 8000e9a:	f7ff fe2d 	bl	8000af8 <Print_Date>
	  delay_us(10000);
 8000e9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ea2:	f7ff fb83 	bl	80005ac <delay_us>
	  while(G_Status_F.Setting_Time_Date)
 8000ea6:	e7ef      	b.n	8000e88 <main+0x58>
 8000ea8:	200001a0 	.word	0x200001a0
 8000eac:	200001a4 	.word	0x200001a4
 8000eb0:	20000114 	.word	0x20000114
 8000eb4:	08005334 	.word	0x08005334
 8000eb8:	000f4240 	.word	0x000f4240
 8000ebc:	200001a8 	.word	0x200001a8

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2234      	movs	r2, #52	; 0x34
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fd50 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <SystemClock_Config+0xbc>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <SystemClock_Config+0xbc>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <SystemClock_Config+0xbc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <SystemClock_Config+0xc0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f0c:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <SystemClock_Config+0xc0>)
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <SystemClock_Config+0xc0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f20:	2306      	movs	r3, #6
 8000f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 fe21 	bl	8002b80 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f44:	f000 fac8 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 ffec 	bl	8001f40 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f6e:	f000 fab3 	bl	80014d8 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3750      	adds	r7, #80	; 0x50
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2228      	movs	r2, #40	; 0x28
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fce5 	bl	8004974 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fac:	4a3d      	ldr	r2, [pc, #244]	; (80010a4 <MX_RTC_Init+0x120>)
 8000fae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fb2:	2240      	movs	r2, #64	; 0x40
 8000fb4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fb8:	227f      	movs	r2, #127	; 0x7f
 8000fba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fbc:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd4:	4832      	ldr	r0, [pc, #200]	; (80010a0 <MX_RTC_Init+0x11c>)
 8000fd6:	f002 f871 	bl	80030bc <HAL_RTC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000fe0:	f000 fa7a 	bl	80014d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	4824      	ldr	r0, [pc, #144]	; (80010a0 <MX_RTC_Init+0x11c>)
 800100e:	f002 f8cb 	bl	80031a8 <HAL_RTC_SetTime>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001018:	f000 fa5e 	bl	80014d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800101c:	2301      	movs	r3, #1
 800101e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001022:	2301      	movs	r3, #1
 8001024:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001028:	2301      	movs	r3, #1
 800102a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 800102e:	2320      	movs	r3, #32
 8001030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <MX_RTC_Init+0x11c>)
 800103e:	f002 f9ab 	bl	8003398 <HAL_RTC_SetDate>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001048:	f000 fa46 	bl	80014d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800104c:	2301      	movs	r3, #1
 800104e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001050:	2300      	movs	r3, #0
 8001052:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001054:	2300      	movs	r3, #0
 8001056:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800105c:	2300      	movs	r3, #0
 800105e:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800107a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	2201      	movs	r2, #1
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_RTC_Init+0x11c>)
 8001088:	f002 fa5a 	bl	8003540 <HAL_RTC_SetAlarm_IT>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001092:	f000 fa21 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3740      	adds	r7, #64	; 0x40
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000f4 	.word	0x200000f4
 80010a4:	40002800 	.word	0x40002800

080010a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_TIM5_Init+0x94>)
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <MX_TIM5_Init+0x98>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_TIM5_Init+0x94>)
 80010cc:	220f      	movs	r2, #15
 80010ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM5_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_TIM5_Init+0x94>)
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_TIM5_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_TIM5_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <MX_TIM5_Init+0x94>)
 80010ec:	f002 fc77 	bl	80039de <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80010f6:	f000 f9ef 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_TIM5_Init+0x94>)
 8001108:	f002 fe98 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001112:	f000 f9e1 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_TIM5_Init+0x94>)
 8001124:	f003 f8b4 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800112e:	f000 f9d3 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000114 	.word	0x20000114
 8001140:	40000c00 	.word	0x40000c00

08001144 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_UART4_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_UART4_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_UART4_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_UART4_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_UART4_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_UART4_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_UART4_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_UART4_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_UART4_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_UART4_Init+0x4c>)
 800117c:	f003 f918 	bl	80043b0 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f9a7 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000015c 	.word	0x2000015c
 8001194:	40004c00 	.word	0x40004c00

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a3b      	ldr	r2, [pc, #236]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a34      	ldr	r2, [pc, #208]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_GPIO_Init+0x128>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_OUT_GPIO_Port, BUZZER_OUT_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2120      	movs	r1, #32
 8001206:	482f      	ldr	r0, [pc, #188]	; (80012c4 <MX_GPIO_Init+0x12c>)
 8001208:	f000 fe4e 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DATA_D4_Pin|DATA_D5_Pin|DATA_D6_Pin|DATA_D7_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001212:	482d      	ldr	r0, [pc, #180]	; (80012c8 <MX_GPIO_Init+0x130>)
 8001214:	f000 fe48 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|ENABLE_Pin|RW_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 7150 	mov.w	r1, #832	; 0x340
 800121e:	482b      	ldr	r0, [pc, #172]	; (80012cc <MX_GPIO_Init+0x134>)
 8001220:	f000 fe42 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SET_TIME_DATE_Pin INCREMENT_BUTTON_Pin SET_ALARM_Pin DECREMENT_BUTTON_Pin */
  GPIO_InitStruct.Pin = SET_TIME_DATE_Pin|INCREMENT_BUTTON_Pin|SET_ALARM_Pin|DECREMENT_BUTTON_Pin;
 8001224:	f44f 5362 	mov.w	r3, #14464	; 0x3880
 8001228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800122a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800122e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4619      	mov	r1, r3
 800123a:	4823      	ldr	r0, [pc, #140]	; (80012c8 <MX_GPIO_Init+0x130>)
 800123c:	f000 fc88 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_OUT_Pin */
  GPIO_InitStruct.Pin = BUZZER_OUT_Pin;
 8001240:	2320      	movs	r3, #32
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_OUT_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	481b      	ldr	r0, [pc, #108]	; (80012c4 <MX_GPIO_Init+0x12c>)
 8001258:	f000 fc7a 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA_D4_Pin DATA_D5_Pin DATA_D6_Pin DATA_D7_Pin */
  GPIO_InitStruct.Pin = DATA_D4_Pin|DATA_D5_Pin|DATA_D6_Pin|DATA_D7_Pin;
 800125c:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <MX_GPIO_Init+0x130>)
 8001276:	f000 fc6b 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin ENABLE_Pin RW_Pin */
  GPIO_InitStruct.Pin = RS_Pin|ENABLE_Pin|RW_Pin;
 800127a:	f44f 7350 	mov.w	r3, #832	; 0x340
 800127e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_GPIO_Init+0x134>)
 8001294:	f000 fc5c 	bl	8001b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2017      	movs	r0, #23
 800129e:	f000 fc2d 	bl	8001afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a2:	2017      	movs	r0, #23
 80012a4:	f000 fc46 	bl	8001b34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	f000 fc25 	bl	8001afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f000 fc3e 	bl	8001b34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020400 	.word	0x40020400

080012d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == SET_TIME_DATE_Pin)
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e0:	d140      	bne.n	8001364 <HAL_GPIO_EXTI_Callback+0x94>
	{
		if(HAL_GPIO_ReadPin(GPIOC, SET_TIME_DATE_Pin))
 80012e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e6:	4869      	ldr	r0, [pc, #420]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012e8:	f000 fdc6 	bl	8001e78 <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_EXTI_Callback+0x2a>
		{
			// Start timer. Keep on mind that this timer is set in Run speed of the CLK.
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 80012f2:	4b67      	ldr	r3, [pc, #412]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(!HAL_GPIO_ReadPin(GPIOC, SET_TIME_DATE_Pin))
 80012fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fe:	4863      	ldr	r0, [pc, #396]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001300:	f000 fdba 	bl	8001e78 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d104      	bne.n	8001314 <HAL_GPIO_EXTI_Callback+0x44>
		{
			//Get timer's value when falling edge
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 800130a:	4b61      	ldr	r3, [pc, #388]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	4a60      	ldr	r2, [pc, #384]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001312:	6013      	str	r3, [r2, #0]
		}

		// This verifies that user pressed the button and it was not a debounce
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 8001314:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800131c:	4293      	cmp	r3, r2
 800131e:	f240 80b0 	bls.w	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
		{
			G_Status_F.Setting_Time_Date = 0x01;
 8001322:	4a5d      	ldr	r2, [pc, #372]	; (8001498 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001324:	7893      	ldrb	r3, [r2, #2]
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	7093      	strb	r3, [r2, #2]
			G_Status_F.shifting_parameter = G_Status_F.shifting_parameter << 1;
 800132c:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b58      	ldr	r3, [pc, #352]	; (8001498 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001336:	801a      	strh	r2, [r3, #0]

			if(G_Status_F.shifting_parameter > 0x80)
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	2b80      	cmp	r3, #128	; 0x80
 800133e:	d907      	bls.n	8001350 <HAL_GPIO_EXTI_Callback+0x80>
			{
				G_Status_F.Setting_Time_Date = ZERO_VALUE;
 8001340:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001342:	7893      	ldrb	r3, [r2, #2]
 8001344:	f36f 0300 	bfc	r3, #0, #1
 8001348:	7093      	strb	r3, [r2, #2]
				G_Status_F.shifting_parameter = 0x01;
 800134a:	4b53      	ldr	r3, [pc, #332]	; (8001498 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800134c:	2201      	movs	r2, #1
 800134e:	801a      	strh	r2, [r3, #0]
			}
			Push_Beep_Button();
 8001350:	f7ff f944 	bl	80005dc <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else
	{
		__NOP();
	}
}
 8001362:	e08e      	b.n	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
	else if(GPIO_Pin == DECREMENT_BUTTON_Pin)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800136a:	d12e      	bne.n	80013ca <HAL_GPIO_EXTI_Callback+0xfa>
		if(HAL_GPIO_ReadPin(GPIOC, DECREMENT_BUTTON_Pin))
 800136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001370:	4846      	ldr	r0, [pc, #280]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001372:	f000 fd81 	bl	8001e78 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_EXTI_Callback+0xb4>
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
		if(!HAL_GPIO_ReadPin(GPIOC, DECREMENT_BUTTON_Pin))
 8001384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001388:	4840      	ldr	r0, [pc, #256]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800138a:	f000 fd75 	bl	8001e78 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d104      	bne.n	800139e <HAL_GPIO_EXTI_Callback+0xce>
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 8001394:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	4a3e      	ldr	r2, [pc, #248]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800139c:	6013      	str	r3, [r2, #0]
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d96b      	bls.n	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
			global_counter--;
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80013b4:	701a      	strb	r2, [r3, #0]
			Push_Beep_Button();
 80013b6:	f7ff f911 	bl	80005dc <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013c8:	e05b      	b.n	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
	else if(GPIO_Pin == INCREMENT_BUTTON_Pin)
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	2b80      	cmp	r3, #128	; 0x80
 80013ce:	d12c      	bne.n	800142a <HAL_GPIO_EXTI_Callback+0x15a>
		if(HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	482e      	ldr	r0, [pc, #184]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80013d4:	f000 fd50 	bl	8001e78 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_EXTI_Callback+0x116>
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
		if(!HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	4828      	ldr	r0, [pc, #160]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80013ea:	f000 fd45 	bl	8001e78 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d104      	bne.n	80013fe <HAL_GPIO_EXTI_Callback+0x12e>
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 80013f4:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80013fc:	6013      	str	r3, [r2, #0]
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001406:	4293      	cmp	r3, r2
 8001408:	d93b      	bls.n	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
			global_counter++;
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001414:	701a      	strb	r2, [r3, #0]
			Push_Beep_Button();
 8001416:	f7ff f8e1 	bl	80005dc <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001428:	e02b      	b.n	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
	else if(GPIO_Pin == SET_ALARM_Pin)
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001430:	d126      	bne.n	8001480 <HAL_GPIO_EXTI_Callback+0x1b0>
		if(HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4815      	ldr	r0, [pc, #84]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001436:	f000 fd1f 	bl	8001e78 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_EXTI_Callback+0x178>
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
		if(!HAL_GPIO_ReadPin(GPIOC, INCREMENT_BUTTON_Pin))
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800144c:	f000 fd14 	bl	8001e78 <HAL_GPIO_ReadPin>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d104      	bne.n	8001460 <HAL_GPIO_EXTI_Callback+0x190>
			G_Variables.counter_us_debound =  __HAL_TIM_GET_COUNTER(&htim5);
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800145e:	6013      	str	r3, [r2, #0]
		if(G_Variables.counter_us_debound > TRESSHOLD_SWITCH_DEBOUNCE)
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001468:	4293      	cmp	r3, r2
 800146a:	d90a      	bls.n	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
			Push_Beep_Button();
 800146c:	f7ff f8b6 	bl	80005dc <Push_Beep_Button>
			G_Variables.counter_us_debound = ZERO_VALUE;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim5, ZERO_VALUE);
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800147e:	e000      	b.n	8001482 <HAL_GPIO_EXTI_Callback+0x1b2>
		__NOP();
 8001480:	bf00      	nop
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40020800 	.word	0x40020800
 8001490:	20000114 	.word	0x20000114
 8001494:	200001a4 	.word	0x200001a4
 8001498:	200001a0 	.word	0x200001a0
 800149c:	200001a8 	.word	0x200001a8

080014a0 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	Alarm_sound();
 80014a8:	f7ff fca0 	bl	8000dec <Alarm_sound>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014c6:	f000 fa41 	bl	800194c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40001000 	.word	0x40001000

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x4c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b09a      	sub	sp, #104	; 0x68
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	225c      	movs	r2, #92	; 0x5c
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fa13 	bl	8004974 <memset>
  if(hrtc->Instance==RTC)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a10      	ldr	r2, [pc, #64]	; (8001594 <HAL_RTC_MspInit+0x5c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d119      	bne.n	800158c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001558:	2320      	movs	r3, #32
 800155a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800155c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001560:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fe36 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001572:	f7ff ffb1 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RTC_MspInit+0x60>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2029      	movs	r0, #41	; 0x29
 8001582:	f000 fabb 	bl	8001afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001586:	2029      	movs	r0, #41	; 0x29
 8001588:	f000 fad4 	bl	8001b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3768      	adds	r7, #104	; 0x68
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40002800 	.word	0x40002800
 8001598:	42470e3c 	.word	0x42470e3c

0800159c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_TIM_Base_MspInit+0x3c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10d      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40000c00 	.word	0x40000c00
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_UART_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12b      	bne.n	800165a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_UART_MspInit+0x88>)
 800160c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800163a:	2303      	movs	r3, #3
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800164a:	2308      	movs	r3, #8
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_UART_MspInit+0x8c>)
 8001656:	f000 fa7b 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40004c00 	.word	0x40004c00
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_InitTick+0xe4>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a32      	ldr	r2, [pc, #200]	; (8001754 <HAL_InitTick+0xe4>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_InitTick+0xe4>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800169c:	f107 0210 	add.w	r2, r7, #16
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fd64 	bl	8002174 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016b6:	f000 fd35 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 80016ba:	6378      	str	r0, [r7, #52]	; 0x34
 80016bc:	e004      	b.n	80016c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016be:	f000 fd31 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ca:	4a23      	ldr	r2, [pc, #140]	; (8001758 <HAL_InitTick+0xe8>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	3b01      	subs	r3, #1
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_InitTick+0xec>)
 80016d8:	4a21      	ldr	r2, [pc, #132]	; (8001760 <HAL_InitTick+0xf0>)
 80016da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_InitTick+0xec>)
 80016de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <HAL_InitTick+0xec>)
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_InitTick+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_InitTick+0xec>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_InitTick+0xec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016fc:	4817      	ldr	r0, [pc, #92]	; (800175c <HAL_InitTick+0xec>)
 80016fe:	f002 f96e 	bl	80039de <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001708:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800170c:	2b00      	cmp	r3, #0
 800170e:	d11b      	bne.n	8001748 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <HAL_InitTick+0xec>)
 8001712:	f002 fa1b 	bl	8003b4c <HAL_TIM_Base_Start_IT>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800171c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001724:	2036      	movs	r0, #54	; 0x36
 8001726:	f000 fa05 	bl	8001b34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d808      	bhi.n	8001742 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	2036      	movs	r0, #54	; 0x36
 8001736:	f000 f9e1 	bl	8001afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_InitTick+0xf4>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e002      	b.n	8001748 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800174c:	4618      	mov	r0, r3
 800174e:	3738      	adds	r7, #56	; 0x38
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	431bde83 	.word	0x431bde83
 800175c:	200001ac 	.word	0x200001ac
 8001760:	40001000 	.word	0x40001000
 8001764:	2000000c 	.word	0x2000000c

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INCREMENT_BUTTON_Pin);
 80017ca:	2080      	movs	r0, #128	; 0x80
 80017cc:	f000 fba0 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_ALARM_Pin);
 80017d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017dc:	f000 fb98 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DECREMENT_BUTTON_Pin);
 80017e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017e4:	f000 fb94 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SET_TIME_DATE_Pin);
 80017e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ec:	f000 fb90 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <RTC_Alarm_IRQHandler+0x10>)
 80017fa:	f001 ffe3 	bl	80037c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000f4 	.word	0x200000f4

08001808 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM6_DAC_IRQHandler+0x10>)
 800180e:	f002 fa0d 	bl	8003c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001ac 	.word	0x200001ac

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f003 f89a 	bl	8004984 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20020000 	.word	0x20020000
 800187c:	00000400 	.word	0x00000400
 8001880:	200001f4 	.word	0x200001f4
 8001884:	20000348 	.word	0x20000348

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <SystemInit+0x28>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <SystemInit+0x28>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SystemInit+0x28>)
 800189e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a2:	609a      	str	r2, [r3, #8]
#endif
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ba:	e003      	b.n	80018c4 <LoopCopyDataInit>

080018bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018c2:	3104      	adds	r1, #4

080018c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018cc:	d3f6      	bcc.n	80018bc <CopyDataInit>
  ldr  r2, =_sbss
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018d0:	e002      	b.n	80018d8 <LoopFillZerobss>

080018d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018d4:	f842 3b04 	str.w	r3, [r2], #4

080018d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018dc:	d3f9      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018de:	f7ff ffd3 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e2:	f003 f855 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e6:	f7ff faa3 	bl	8000e30 <main>
  bx  lr    
 80018ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018f0:	080053a0 	.word	0x080053a0
  ldr  r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f8:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 80018fc:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8001900:	20000344 	.word	0x20000344

08001904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC_IRQHandler>
	...

08001908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_Init+0x40>)
 8001912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_Init+0x40>)
 800191e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x40>)
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f8d8 	bl	8001ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	200f      	movs	r0, #15
 8001938:	f7ff fe9a 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fdd4 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000010 	.word	0x20000010
 8001970:	200001f8 	.word	0x200001f8

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200001f8 	.word	0x200001f8

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff4c 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0e:	f7ff ff61 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f7ff ffb1 	bl	8001a80 <NVIC_EncodePriority>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff80 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff54 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e165      	b.n	8001e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 8154 	bne.w	8001e32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d005      	beq.n	8001ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d130      	bne.n	8001c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 0201 	and.w	r2, r3, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d017      	beq.n	8001c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d123      	bne.n	8001c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	69b9      	ldr	r1, [r7, #24]
 8001c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80ae 	beq.w	8001e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_GPIO_Init+0x300>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a5c      	ldr	r2, [pc, #368]	; (8001e50 <HAL_GPIO_Init+0x300>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_GPIO_Init+0x300>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf2:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_GPIO_Init+0x304>)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4f      	ldr	r2, [pc, #316]	; (8001e58 <HAL_GPIO_Init+0x308>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x21a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_GPIO_Init+0x30c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x216>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4d      	ldr	r2, [pc, #308]	; (8001e60 <HAL_GPIO_Init+0x310>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x212>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <HAL_GPIO_Init+0x314>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x20e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_GPIO_Init+0x318>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x20a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4a      	ldr	r2, [pc, #296]	; (8001e6c <HAL_GPIO_Init+0x31c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a49      	ldr	r2, [pc, #292]	; (8001e70 <HAL_GPIO_Init+0x320>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x202>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_GPIO_Init+0x304>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f ae96 	bls.w	8001b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40021400 	.word	0x40021400
 8001e70:	40021800 	.word	0x40021800
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e001      	b.n	8001e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eec:	887a      	ldrh	r2, [r7, #2]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	400b      	ands	r3, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f9ce 	bl	80012d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0cc      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d90c      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0b8      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a58      	ldr	r2, [pc, #352]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	494d      	ldr	r1, [pc, #308]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d044      	beq.n	8002060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d119      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e07f      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06f      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e067      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4934      	ldr	r1, [pc, #208]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002030:	f7ff fca0 	bl	8001974 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7ff fc9c 	bl	8001974 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e04f      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 020c 	and.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	429a      	cmp	r2, r3
 800205e:	d1eb      	bne.n	8002038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d20c      	bcs.n	8002088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e032      	b.n	80020ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4916      	ldr	r1, [pc, #88]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d009      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	490e      	ldr	r1, [pc, #56]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c6:	f000 fbb1 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80020ca:	4602      	mov	r2, r0
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	490a      	ldr	r1, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	5ccb      	ldrb	r3, [r1, r3]
 80020da:	fa22 f303 	lsr.w	r3, r2, r3
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fac2 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023c00 	.word	0x40023c00
 80020fc:	40023800 	.word	0x40023800
 8002100:	08005344 	.word	0x08005344
 8002104:	20000008 	.word	0x20000008
 8002108:	2000000c 	.word	0x2000000c

0800210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_RCC_GetHCLKFreq+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008

08002124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002128:	f7ff fff0 	bl	800210c <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	08005354 	.word	0x08005354

0800214c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002150:	f7ff ffdc 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0b5b      	lsrs	r3, r3, #13
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	08005354 	.word	0x08005354

08002174 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	220f      	movs	r2, #15
 8002182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCC_GetClockConfig+0x60>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 020f 	and.w	r2, r3, #15
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40023c00 	.word	0x40023c00

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002210:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002216:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	496c      	ldr	r1, [pc, #432]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800222e:	2301      	movs	r3, #1
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800223e:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002244:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	4960      	ldr	r1, [pc, #384]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800225c:	2301      	movs	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d017      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800226c:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800226e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4955      	ldr	r1, [pc, #340]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800228a:	d101      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800228c:	2301      	movs	r3, #1
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002298:	2301      	movs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022a8:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	4946      	ldr	r1, [pc, #280]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c6:	d101      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808a 	beq.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a38      	ldr	r2, [pc, #224]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a33      	ldr	r2, [pc, #204]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800230e:	f7ff fb31 	bl	8001974 <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002316:	f7ff fb2d 	bl	8001974 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e278      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d02f      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	429a      	cmp	r2, r3
 8002350:	d028      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d114      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff fafb 	bl	8001974 <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff faf7 	bl	8001974 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e240      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ee      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023b0:	d114      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c6:	4902      	ldr	r1, [pc, #8]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
 80023cc:	e00c      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42470e40 	.word	0x42470e40
 80023dc:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a49      	ldr	r2, [pc, #292]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023e6:	6093      	str	r3, [r2, #8]
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	4944      	ldr	r1, [pc, #272]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800240c:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800240e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800241c:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244c:	492e      	ldr	r1, [pc, #184]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d011      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	4926      	ldr	r1, [pc, #152]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247e:	d101      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002480:	2301      	movs	r3, #1
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002496:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	491a      	ldr	r1, [pc, #104]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d011      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	4911      	ldr	r1, [pc, #68]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d0:	d101      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80024d2:	2301      	movs	r3, #1
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d005      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e4:	f040 80ff 	bne.w	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ee:	f7ff fa41 	bl	8001974 <HAL_GetTick>
 80024f2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024f4:	e00e      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024f6:	f7ff fa3d 	bl	8001974 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d907      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e188      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002508:	40023800 	.word	0x40023800
 800250c:	424711e0 	.word	0x424711e0
 8002510:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002514:	4b7e      	ldr	r3, [pc, #504]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ea      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800253c:	2b00      	cmp	r3, #0
 800253e:	d028      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d124      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002548:	4b71      	ldr	r3, [pc, #452]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	3301      	adds	r3, #1
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800255a:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800255c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002560:	0e1b      	lsrs	r3, r3, #24
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	431a      	orrs	r2, r3
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	071b      	lsls	r3, r3, #28
 800258a:	4961      	ldr	r1, [pc, #388]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d035      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025bc:	d130      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025be:	4b54      	ldr	r3, [pc, #336]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	3301      	adds	r3, #1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025d0:	4b4f      	ldr	r3, [pc, #316]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d6:	0f1b      	lsrs	r3, r3, #28
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	019b      	lsls	r3, r3, #6
 80025e8:	431a      	orrs	r2, r3
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	3b01      	subs	r3, #1
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	431a      	orrs	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	071b      	lsls	r3, r3, #28
 8002600:	4943      	ldr	r1, [pc, #268]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002608:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260e:	f023 021f 	bic.w	r2, r3, #31
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	493d      	ldr	r1, [pc, #244]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d029      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002634:	d124      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002636:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	3301      	adds	r3, #1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800264a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264e:	0f1b      	lsrs	r3, r3, #28
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	3b01      	subs	r3, #1
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	431a      	orrs	r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	431a      	orrs	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	071b      	lsls	r3, r3, #28
 8002678:	4925      	ldr	r1, [pc, #148]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002688:	2b00      	cmp	r3, #0
 800268a:	d016      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	4917      	ldr	r1, [pc, #92]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026c0:	f7ff f958 	bl	8001974 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026c8:	f7ff f954 	bl	8001974 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e09f      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f040 8095 	bne.w	8002818 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026f4:	f7ff f93e 	bl	8001974 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026fa:	e00f      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80026fc:	f7ff f93a 	bl	8001974 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d908      	bls.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e085      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	42470068 	.word	0x42470068
 8002718:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800271c:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002728:	d0e8      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002746:	2b00      	cmp	r3, #0
 8002748:	d02b      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	2b00      	cmp	r3, #0
 8002750:	d127      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002752:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	3301      	adds	r3, #1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	019b      	lsls	r3, r3, #6
 800276e:	431a      	orrs	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	4928      	ldr	r1, [pc, #160]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800278a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800278e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	3b01      	subs	r3, #1
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	4922      	ldr	r1, [pc, #136]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01d      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x612>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b6:	d118      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	0e1b      	lsrs	r3, r3, #24
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	019b      	lsls	r3, r3, #6
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	4910      	ldr	r1, [pc, #64]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027f0:	f7ff f8c0 	bl	8001974 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80027f8:	f7ff f8bc 	bl	8001974 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e007      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002816:	d1ef      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3730      	adds	r7, #48	; 0x30
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	42470070 	.word	0x42470070

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002830:	b0a6      	sub	sp, #152	; 0x98
 8002832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002852:	4bc8      	ldr	r3, [pc, #800]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b0c      	cmp	r3, #12
 800285c:	f200 817e 	bhi.w	8002b5c <HAL_RCC_GetSysClockFreq+0x330>
 8002860:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	0800289d 	.word	0x0800289d
 800286c:	08002b5d 	.word	0x08002b5d
 8002870:	08002b5d 	.word	0x08002b5d
 8002874:	08002b5d 	.word	0x08002b5d
 8002878:	080028a5 	.word	0x080028a5
 800287c:	08002b5d 	.word	0x08002b5d
 8002880:	08002b5d 	.word	0x08002b5d
 8002884:	08002b5d 	.word	0x08002b5d
 8002888:	080028ad 	.word	0x080028ad
 800288c:	08002b5d 	.word	0x08002b5d
 8002890:	08002b5d 	.word	0x08002b5d
 8002894:	08002b5d 	.word	0x08002b5d
 8002898:	08002a17 	.word	0x08002a17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4bb6      	ldr	r3, [pc, #728]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x34c>)
 800289e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80028a2:	e15f      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4bb5      	ldr	r3, [pc, #724]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x350>)
 80028a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028aa:	e15b      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4bb1      	ldr	r3, [pc, #708]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b8:	4bae      	ldr	r3, [pc, #696]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d031      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	4bab      	ldr	r3, [pc, #684]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	2200      	movs	r2, #0
 80028cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d6:	663b      	str	r3, [r7, #96]	; 0x60
 80028d8:	2300      	movs	r3, #0
 80028da:	667b      	str	r3, [r7, #100]	; 0x64
 80028dc:	4ba7      	ldr	r3, [pc, #668]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x350>)
 80028de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80028e2:	462a      	mov	r2, r5
 80028e4:	fb03 f202 	mul.w	r2, r3, r2
 80028e8:	2300      	movs	r3, #0
 80028ea:	4621      	mov	r1, r4
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	4aa2      	ldr	r2, [pc, #648]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x350>)
 80028f4:	4621      	mov	r1, r4
 80028f6:	fba1 1202 	umull	r1, r2, r1, r2
 80028fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028fc:	460a      	mov	r2, r1
 80028fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8002900:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002902:	4413      	add	r3, r2
 8002904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	2200      	movs	r2, #0
 800290c:	65bb      	str	r3, [r7, #88]	; 0x58
 800290e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002910:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002914:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002918:	f7fd fcca 	bl	80002b0 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002926:	e064      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002928:	4b92      	ldr	r3, [pc, #584]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	2200      	movs	r2, #0
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
 8002932:	657a      	str	r2, [r7, #84]	; 0x54
 8002934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
 800293c:	2300      	movs	r3, #0
 800293e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002940:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002944:	4622      	mov	r2, r4
 8002946:	462b      	mov	r3, r5
 8002948:	f04f 0000 	mov.w	r0, #0
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	0159      	lsls	r1, r3, #5
 8002952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002956:	0150      	lsls	r0, r2, #5
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4621      	mov	r1, r4
 800295e:	1a51      	subs	r1, r2, r1
 8002960:	6139      	str	r1, [r7, #16]
 8002962:	4629      	mov	r1, r5
 8002964:	eb63 0301 	sbc.w	r3, r3, r1
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002976:	4659      	mov	r1, fp
 8002978:	018b      	lsls	r3, r1, #6
 800297a:	4651      	mov	r1, sl
 800297c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002980:	4651      	mov	r1, sl
 8002982:	018a      	lsls	r2, r1, #6
 8002984:	4651      	mov	r1, sl
 8002986:	ebb2 0801 	subs.w	r8, r2, r1
 800298a:	4659      	mov	r1, fp
 800298c:	eb63 0901 	sbc.w	r9, r3, r1
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a4:	4690      	mov	r8, r2
 80029a6:	4699      	mov	r9, r3
 80029a8:	4623      	mov	r3, r4
 80029aa:	eb18 0303 	adds.w	r3, r8, r3
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	462b      	mov	r3, r5
 80029b2:	eb49 0303 	adc.w	r3, r9, r3
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029c4:	4629      	mov	r1, r5
 80029c6:	028b      	lsls	r3, r1, #10
 80029c8:	4621      	mov	r1, r4
 80029ca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ce:	4621      	mov	r1, r4
 80029d0:	028a      	lsls	r2, r1, #10
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029da:	2200      	movs	r2, #0
 80029dc:	643b      	str	r3, [r7, #64]	; 0x40
 80029de:	647a      	str	r2, [r7, #68]	; 0x44
 80029e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029e4:	f7fd fc64 	bl	80002b0 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4613      	mov	r3, r2
 80029ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f2:	4b60      	ldr	r3, [pc, #384]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	3301      	adds	r3, #1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002a04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a14:	e0a6      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a22:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02a      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	2200      	movs	r2, #0
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a40:	2100      	movs	r1, #0
 8002a42:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x350>)
 8002a44:	fb03 f201 	mul.w	r2, r3, r1
 8002a48:	2300      	movs	r3, #0
 8002a4a:	fb00 f303 	mul.w	r3, r0, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a4a      	ldr	r2, [pc, #296]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x350>)
 8002a52:	fba0 1202 	umull	r1, r2, r0, r2
 8002a56:	677a      	str	r2, [r7, #116]	; 0x74
 8002a58:	460a      	mov	r2, r1
 8002a5a:	673a      	str	r2, [r7, #112]	; 0x70
 8002a5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a5e:	4413      	add	r3, r2
 8002a60:	677b      	str	r3, [r7, #116]	; 0x74
 8002a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a66:	2200      	movs	r2, #0
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6a:	637a      	str	r2, [r7, #52]	; 0x34
 8002a6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002a74:	f7fd fc1c 	bl	80002b0 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a82:	e05b      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	f04f 0000 	mov.w	r0, #0
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	0159      	lsls	r1, r3, #5
 8002aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab2:	0150      	lsls	r0, r2, #5
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4641      	mov	r1, r8
 8002aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002abe:	4649      	mov	r1, r9
 8002ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8002adc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	00eb      	lsls	r3, r5, #3
 8002aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aee:	00e2      	lsls	r2, r4, #3
 8002af0:	4614      	mov	r4, r2
 8002af2:	461d      	mov	r5, r3
 8002af4:	4643      	mov	r3, r8
 8002af6:	18e3      	adds	r3, r4, r3
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	464b      	mov	r3, r9
 8002afc:	eb45 0303 	adc.w	r3, r5, r3
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b0e:	4629      	mov	r1, r5
 8002b10:	028b      	lsls	r3, r1, #10
 8002b12:	4621      	mov	r1, r4
 8002b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b18:	4621      	mov	r1, r4
 8002b1a:	028a      	lsls	r2, r1, #10
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b24:	2200      	movs	r2, #0
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	61fa      	str	r2, [r7, #28]
 8002b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b2e:	f7fd fbbf 	bl	80002b0 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4613      	mov	r3, r2
 8002b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0f1b      	lsrs	r3, r3, #28
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b5a:	e003      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3798      	adds	r7, #152	; 0x98
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	017d7840 	.word	0x017d7840

08002b80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e28d      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8083 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ba0:	4b94      	ldr	r3, [pc, #592]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d019      	beq.n	8002be0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bac:	4b91      	ldr	r3, [pc, #580]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bb8:	4b8e      	ldr	r3, [pc, #568]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc4:	d00c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc6:	4b8b      	ldr	r3, [pc, #556]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d112      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd2:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	4b84      	ldr	r3, [pc, #528]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d05b      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x124>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d157      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e25a      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d106      	bne.n	8002c10 <HAL_RCC_OscConfig+0x90>
 8002c02:	4b7c      	ldr	r3, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7b      	ldr	r2, [pc, #492]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xcc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xb4>
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a72      	ldr	r2, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xcc>
 8002c34:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6b      	ldr	r2, [pc, #428]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fe8e 	bl	8001974 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fe8a 	bl	8001974 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e21f      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xdc>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fe7a 	bl	8001974 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fe76 	bl	8001974 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e20b      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x104>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d06f      	beq.n	8002d92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cb2:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d017      	beq.n	8002cee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cbe:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d11c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d116      	bne.n	8002d1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_RCC_OscConfig+0x186>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e1d3      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4937      	ldr	r1, [pc, #220]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	e03a      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d24:	4b34      	ldr	r3, [pc, #208]	; (8002df8 <HAL_RCC_OscConfig+0x278>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fe23 	bl	8001974 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fe fe1f 	bl	8001974 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1b4      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4925      	ldr	r1, [pc, #148]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e015      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_OscConfig+0x278>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fe02 	bl	8001974 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe fdfe 	bl	8001974 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e193      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d036      	beq.n	8002e0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fde2 	bl	8001974 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fdde 	bl	8001974 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e173      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x234>
 8002dd2:	e01b      	b.n	8002e0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fe fdcb 	bl	8001974 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fe fdc7 	bl	8001974 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d907      	bls.n	8002e00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e15c      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	42470000 	.word	0x42470000
 8002dfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ea      	bne.n	8002de2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8097 	beq.w	8002f48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b83      	ldr	r3, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a7e      	ldr	r2, [pc, #504]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b7c      	ldr	r3, [pc, #496]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b79      	ldr	r3, [pc, #484]	; (8003030 <HAL_RCC_OscConfig+0x4b0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x4b0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a75      	ldr	r2, [pc, #468]	; (8003030 <HAL_RCC_OscConfig+0x4b0>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fd87 	bl	8001974 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fe fd83 	bl	8001974 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e118      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x4b0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x31e>
 8002e90:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a65      	ldr	r2, [pc, #404]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	e01c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x358>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x340>
 8002ea6:	4b61      	ldr	r3, [pc, #388]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a60      	ldr	r2, [pc, #384]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	4b5e      	ldr	r3, [pc, #376]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a5d      	ldr	r2, [pc, #372]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x358>
 8002ec0:	4b5a      	ldr	r3, [pc, #360]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a59      	ldr	r2, [pc, #356]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fd48 	bl	8001974 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fd44 	bl	8001974 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0d7      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efe:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ee      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x368>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fd32 	bl	8001974 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fd2e 	bl	8001974 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0c1      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2a:	4b40      	ldr	r3, [pc, #256]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ee      	bne.n	8002f14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	4a3a      	ldr	r2, [pc, #232]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80ad 	beq.w	80030ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d060      	beq.n	8003020 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d145      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <HAL_RCC_OscConfig+0x4b4>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fd02 	bl	8001974 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fcfe 	bl	8001974 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e093      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	3b01      	subs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	071b      	lsls	r3, r3, #28
 8002fbe:	491b      	ldr	r1, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x4b4>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe fcd3 	bl	8001974 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fccf 	bl	8001974 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e064      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x452>
 8002ff0:	e05c      	b.n	80030ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_OscConfig+0x4b4>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fcbc 	bl	8001974 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe fcb8 	bl	8001974 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e04d      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_OscConfig+0x4ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x480>
 800301e:	e045      	b.n	80030ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e040      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000
 8003034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003038:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_RCC_OscConfig+0x538>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d030      	beq.n	80030a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d129      	bne.n	80030a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d122      	bne.n	80030a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800306e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003070:	4293      	cmp	r3, r2
 8003072:	d119      	bne.n	80030a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	3b01      	subs	r3, #1
 8003082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d10f      	bne.n	80030a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800

080030bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e066      	b.n	80031a0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7f5b      	ldrb	r3, [r3, #29]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fa28 	bl	8001538 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	22ca      	movs	r2, #202	; 0xca
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2253      	movs	r2, #83	; 0x53
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fbce 	bl	80038a0 <RTC_EnterInitMode>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d12c      	bne.n	8003168 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800311c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003120:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6899      	ldr	r1, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68d2      	ldr	r2, [r2, #12]
 8003148:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fbd5 	bl	800390e <RTC_ExitInitMode>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d113      	bne.n	8003196 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	7f1b      	ldrb	r3, [r3, #28]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_RTC_SetTime+0x1c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e087      	b.n	80032d4 <HAL_RTC_SetTime+0x12c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2202      	movs	r2, #2
 80031ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d126      	bne.n	8003224 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2200      	movs	r2, #0
 80031e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fbb2 	bl	8003958 <RTC_ByteToBcd2>
 80031f4:	4603      	mov	r3, r0
 80031f6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fbab 	bl	8003958 <RTC_ByteToBcd2>
 8003202:	4603      	mov	r3, r0
 8003204:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003206:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	789b      	ldrb	r3, [r3, #2]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fba3 	bl	8003958 <RTC_ByteToBcd2>
 8003212:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003214:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	78db      	ldrb	r3, [r3, #3]
 800321c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e018      	b.n	8003256 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2200      	movs	r2, #0
 8003236:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003244:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800324a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	78db      	ldrb	r3, [r3, #3]
 8003250:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	22ca      	movs	r2, #202	; 0xca
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2253      	movs	r2, #83	; 0x53
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fb1a 	bl	80038a0 <RTC_EnterInitMode>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d120      	bne.n	80032b8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003280:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003284:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003294:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fb2d 	bl	800390e <RTC_ExitInitMode>
 80032b4:	4603      	mov	r3, r0
 80032b6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	771a      	strb	r2, [r3, #28]

  return status;
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800330e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003312:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0d9b      	lsrs	r3, r3, #22
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11a      	bne.n	800338e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fb18 	bl	8003992 <RTC_Bcd2ToByte>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fb0f 	bl	8003992 <RTC_Bcd2ToByte>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	789b      	ldrb	r3, [r3, #2]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fb06 	bl	8003992 <RTC_Bcd2ToByte>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	7f1b      	ldrb	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_RTC_SetDate+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e071      	b.n	8003498 <HAL_RTC_SetDate+0x100>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2202      	movs	r2, #2
 80033be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10e      	bne.n	80033e4 <HAL_RTC_SetDate+0x4c>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	330a      	adds	r3, #10
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11c      	bne.n	8003424 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	78db      	ldrb	r3, [r3, #3]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fab2 	bl	8003958 <RTC_ByteToBcd2>
 80033f4:	4603      	mov	r3, r0
 80033f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 faab 	bl	8003958 <RTC_ByteToBcd2>
 8003402:	4603      	mov	r3, r0
 8003404:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003406:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	789b      	ldrb	r3, [r3, #2]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 faa3 	bl	8003958 <RTC_ByteToBcd2>
 8003412:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003414:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e00e      	b.n	8003442 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	78db      	ldrb	r3, [r3, #3]
 8003428:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003430:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003436:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	22ca      	movs	r2, #202	; 0xca
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2253      	movs	r2, #83	; 0x53
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fa24 	bl	80038a0 <RTC_EnterInitMode>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800346c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003470:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa4b 	bl	800390e <RTC_ExitInitMode>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]

  return status;
 8003496:	7cfb      	ldrb	r3, [r7, #19]
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}

080034a0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11a      	bne.n	8003534 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	78db      	ldrb	r3, [r3, #3]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa45 	bl	8003992 <RTC_Bcd2ToByte>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fa3c 	bl	8003992 <RTC_Bcd2ToByte>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa33 	bl	8003992 <RTC_Bcd2ToByte>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800354c:	4b9a      	ldr	r3, [pc, #616]	; (80037b8 <HAL_RTC_SetAlarm_IT+0x278>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a9a      	ldr	r2, [pc, #616]	; (80037bc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0adb      	lsrs	r3, r3, #11
 8003558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	7f1b      	ldrb	r3, [r3, #28]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_RTC_SetAlarm_IT+0x36>
 8003572:	2302      	movs	r3, #2
 8003574:	e11c      	b.n	80037b0 <HAL_RTC_SetAlarm_IT+0x270>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2202      	movs	r2, #2
 8003580:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d137      	bne.n	80035f8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f9d9 	bl	8003958 <RTC_ByteToBcd2>
 80035a6:	4603      	mov	r3, r0
 80035a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f9d2 	bl	8003958 <RTC_ByteToBcd2>
 80035b4:	4603      	mov	r3, r0
 80035b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80035b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	789b      	ldrb	r3, [r3, #2]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f9ca 	bl	8003958 <RTC_ByteToBcd2>
 80035c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80035d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f9bc 	bl	8003958 <RTC_ByteToBcd2>
 80035e0:	4603      	mov	r3, r0
 80035e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80035e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80035ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	e023      	b.n	8003640 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003618:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800361e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003626:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800362e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003630:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003636:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800363c:	4313      	orrs	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	22ca      	movs	r2, #202	; 0xca
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2253      	movs	r2, #83	; 0x53
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d141      	bne.n	80036ea <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003686:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1e5a      	subs	r2, r3, #1
 800368c:	617a      	str	r2, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2203      	movs	r2, #3
 800369e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e082      	b.n	80037b0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0e7      	beq.n	8003688 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	e04b      	b.n	8003782 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036f8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f462 7220 	orn	r2, r2, #640	; 0x280
 800370a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_RTC_SetAlarm_IT+0x278>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0adb      	lsrs	r3, r3, #11
 8003718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	1e5a      	subs	r2, r3, #1
 8003726:	617a      	str	r2, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	22ff      	movs	r2, #255	; 0xff
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2203      	movs	r2, #3
 8003738:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e035      	b.n	80037b0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0e7      	beq.n	8003722 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003770:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003798:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3724      	adds	r7, #36	; 0x24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd90      	pop	{r4, r7, pc}
 80037b8:	20000008 	.word	0x20000008
 80037bc:	10624dd3 	.word	0x10624dd3
 80037c0:	40013c00 	.word	0x40013c00

080037c4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d012      	beq.n	8003800 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fe59 	bl	80014a0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80037fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8d4 	bl	80039ca <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003832:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RTC_AlarmIRQHandler+0x88>)
 8003836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800383a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	775a      	strb	r2, [r3, #29]
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800386c:	f7fe f882 	bl	8001974 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003872:	e009      	b.n	8003888 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003874:	f7fe f87e 	bl	8001974 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003882:	d901      	bls.n	8003888 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e007      	b.n	8003898 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ee      	beq.n	8003874 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d122      	bne.n	8003904 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ce:	f7fe f851 	bl	8001974 <HAL_GetTick>
 80038d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038d4:	e00c      	b.n	80038f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038d6:	f7fe f84d 	bl	8001974 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e4:	d904      	bls.n	80038f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2204      	movs	r2, #4
 80038ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <RTC_EnterInitMode+0x64>
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d1e8      	bne.n	80038d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003928:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff89 	bl	8003850 <HAL_RTC_WaitForSynchro>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2204      	movs	r2, #4
 8003948:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003966:	e005      	b.n	8003974 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	3301      	adds	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	3b0a      	subs	r3, #10
 8003972:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	2b09      	cmp	r3, #9
 8003978:	d8f6      	bhi.n	8003968 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	b2da      	uxtb	r2, r3
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	4313      	orrs	r3, r2
 8003984:	b2db      	uxtb	r3, r3
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	0092      	lsls	r2, r2, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	4413      	add	r3, r2
 80039bc:	b2db      	uxtb	r3, r3
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e041      	b.n	8003a74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fd fdc9 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f000 fafd 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e046      	b.n	8003b22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <HAL_TIM_Base_Start+0xb4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d01d      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <HAL_TIM_Base_Start+0xb8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <HAL_TIM_Base_Start+0xbc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_TIM_Base_Start+0xc0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_TIM_Base_Start+0xc4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_TIM_Base_Start+0xc8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_TIM_Base_Start+0xcc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d111      	bne.n	8003b10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d010      	beq.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	e007      	b.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40001800 	.word	0x40001800

08003b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e04e      	b.n	8003c02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x80>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d01d      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x80>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x80>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x80>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x80>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x80>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x80>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d111      	bne.n	8003bf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d010      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	e007      	b.n	8003c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40010400 	.word	0x40010400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40001800 	.word	0x40001800

08003c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0202 	mvn.w	r2, #2
 8003c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9b5 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f9a7 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f9b8 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0204 	mvn.w	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f98b 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f97d 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f98e 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0208 	mvn.w	r2, #8
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f961 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f953 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f964 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f937 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f929 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f93a 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0201 	mvn.w	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fb82 	bl	80014b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fae0 	bl	800439c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d107      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8ff 	bl	8004006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d107      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0220 	mvn.w	r2, #32
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 faaa 	bl	8004388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_ConfigClockSource+0x1c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0b4      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x186>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e90:	d03e      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0xd4>
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	f200 8087 	bhi.w	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	f000 8086 	beq.w	8003fae <HAL_TIM_ConfigClockSource+0x172>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d87f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b70      	cmp	r3, #112	; 0x70
 8003eaa:	d01a      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d87b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b60      	cmp	r3, #96	; 0x60
 8003eb2:	d050      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d877      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b50      	cmp	r3, #80	; 0x50
 8003eba:	d03c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xfa>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d873      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d058      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d86f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b30      	cmp	r3, #48	; 0x30
 8003eca:	d064      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d86b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d060      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d867      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05c      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d05a      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	e062      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f000 f9ad 	bl	8004250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	609a      	str	r2, [r3, #8]
      break;
 8003f0e:	e04f      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f000 f996 	bl	8004250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f32:	609a      	str	r2, [r3, #8]
      break;
 8003f34:	e03c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 f90a 	bl	800415c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2150      	movs	r1, #80	; 0x50
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f963 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003f54:	e02c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 f929 	bl	80041ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2160      	movs	r1, #96	; 0x60
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f953 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003f74:	e01c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f000 f8ea 	bl	800415c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f943 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003f94:	e00c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 f93a 	bl	800421a <TIM_ITRx_SetConfig>
      break;
 8003fa6:	e003      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      break;
 8003fac:	e000      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a40      	ldr	r2, [pc, #256]	; (8004130 <TIM_Base_SetConfig+0x114>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d00f      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a3d      	ldr	r2, [pc, #244]	; (8004134 <TIM_Base_SetConfig+0x118>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00b      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3c      	ldr	r2, [pc, #240]	; (8004138 <TIM_Base_SetConfig+0x11c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a3b      	ldr	r2, [pc, #236]	; (800413c <TIM_Base_SetConfig+0x120>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <TIM_Base_SetConfig+0x124>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d108      	bne.n	800406e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <TIM_Base_SetConfig+0x114>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407c:	d027      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <TIM_Base_SetConfig+0x118>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d023      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <TIM_Base_SetConfig+0x11c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2a      	ldr	r2, [pc, #168]	; (800413c <TIM_Base_SetConfig+0x120>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a29      	ldr	r2, [pc, #164]	; (8004140 <TIM_Base_SetConfig+0x124>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d017      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a28      	ldr	r2, [pc, #160]	; (8004144 <TIM_Base_SetConfig+0x128>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <TIM_Base_SetConfig+0x12c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <TIM_Base_SetConfig+0x130>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a25      	ldr	r2, [pc, #148]	; (8004150 <TIM_Base_SetConfig+0x134>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a24      	ldr	r2, [pc, #144]	; (8004154 <TIM_Base_SetConfig+0x138>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a23      	ldr	r2, [pc, #140]	; (8004158 <TIM_Base_SetConfig+0x13c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <TIM_Base_SetConfig+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0xf8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <TIM_Base_SetConfig+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d103      	bne.n	800411c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	615a      	str	r2, [r3, #20]
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40010400 	.word	0x40010400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800
 8004150:	40001800 	.word	0x40001800
 8004154:	40001c00 	.word	0x40001c00
 8004158:	40002000 	.word	0x40002000

0800415c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0201 	bic.w	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 030a 	bic.w	r3, r3, #10
 8004198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f023 0210 	bic.w	r2, r3, #16
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	031b      	lsls	r3, r3, #12
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	f043 0307 	orr.w	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	021a      	lsls	r2, r3, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	431a      	orrs	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4313      	orrs	r3, r2
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e05a      	b.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a21      	ldr	r2, [pc, #132]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d022      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d01d      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d018      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a17      	ldr	r2, [pc, #92]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a15      	ldr	r2, [pc, #84]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10c      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40010000 	.word	0x40010000
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800
 8004378:	40000c00 	.word	0x40000c00
 800437c:	40010400 	.word	0x40010400
 8004380:	40014000 	.word	0x40014000
 8004384:	40001800 	.word	0x40001800

08004388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e03f      	b.n	8004442 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd f902 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f829 	bl	800444c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800444c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004450:	b0c0      	sub	sp, #256	; 0x100
 8004452:	af00      	add	r7, sp, #0
 8004454:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	68d9      	ldr	r1, [r3, #12]
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	ea40 0301 	orr.w	r3, r0, r1
 8004474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	431a      	orrs	r2, r3
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	431a      	orrs	r2, r3
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044a4:	f021 010c 	bic.w	r1, r1, #12
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044b2:	430b      	orrs	r3, r1
 80044b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	6999      	ldr	r1, [r3, #24]
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	ea40 0301 	orr.w	r3, r0, r1
 80044d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b8f      	ldr	r3, [pc, #572]	; (8004718 <UART_SetConfig+0x2cc>)
 80044dc:	429a      	cmp	r2, r3
 80044de:	d005      	beq.n	80044ec <UART_SetConfig+0xa0>
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b8d      	ldr	r3, [pc, #564]	; (800471c <UART_SetConfig+0x2d0>)
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d104      	bne.n	80044f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044ec:	f7fd fe2e 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 80044f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044f4:	e003      	b.n	80044fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044f6:	f7fd fe15 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 80044fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004508:	f040 810c 	bne.w	8004724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800450c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004510:	2200      	movs	r2, #0
 8004512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004516:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800451a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800451e:	4622      	mov	r2, r4
 8004520:	462b      	mov	r3, r5
 8004522:	1891      	adds	r1, r2, r2
 8004524:	65b9      	str	r1, [r7, #88]	; 0x58
 8004526:	415b      	adcs	r3, r3
 8004528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800452a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800452e:	4621      	mov	r1, r4
 8004530:	eb12 0801 	adds.w	r8, r2, r1
 8004534:	4629      	mov	r1, r5
 8004536:	eb43 0901 	adc.w	r9, r3, r1
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800454a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454e:	4690      	mov	r8, r2
 8004550:	4699      	mov	r9, r3
 8004552:	4623      	mov	r3, r4
 8004554:	eb18 0303 	adds.w	r3, r8, r3
 8004558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800455c:	462b      	mov	r3, r5
 800455e:	eb49 0303 	adc.w	r3, r9, r3
 8004562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004572:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800457a:	460b      	mov	r3, r1
 800457c:	18db      	adds	r3, r3, r3
 800457e:	653b      	str	r3, [r7, #80]	; 0x50
 8004580:	4613      	mov	r3, r2
 8004582:	eb42 0303 	adc.w	r3, r2, r3
 8004586:	657b      	str	r3, [r7, #84]	; 0x54
 8004588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800458c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004590:	f7fb fe8e 	bl	80002b0 <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4b61      	ldr	r3, [pc, #388]	; (8004720 <UART_SetConfig+0x2d4>)
 800459a:	fba3 2302 	umull	r2, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	011c      	lsls	r4, r3, #4
 80045a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	1891      	adds	r1, r2, r2
 80045ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80045bc:	415b      	adcs	r3, r3
 80045be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045c4:	4641      	mov	r1, r8
 80045c6:	eb12 0a01 	adds.w	sl, r2, r1
 80045ca:	4649      	mov	r1, r9
 80045cc:	eb43 0b01 	adc.w	fp, r3, r1
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e4:	4692      	mov	sl, r2
 80045e6:	469b      	mov	fp, r3
 80045e8:	4643      	mov	r3, r8
 80045ea:	eb1a 0303 	adds.w	r3, sl, r3
 80045ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045f2:	464b      	mov	r3, r9
 80045f4:	eb4b 0303 	adc.w	r3, fp, r3
 80045f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004608:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800460c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004610:	460b      	mov	r3, r1
 8004612:	18db      	adds	r3, r3, r3
 8004614:	643b      	str	r3, [r7, #64]	; 0x40
 8004616:	4613      	mov	r3, r2
 8004618:	eb42 0303 	adc.w	r3, r2, r3
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
 800461e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004626:	f7fb fe43 	bl	80002b0 <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4611      	mov	r1, r2
 8004630:	4b3b      	ldr	r3, [pc, #236]	; (8004720 <UART_SetConfig+0x2d4>)
 8004632:	fba3 2301 	umull	r2, r3, r3, r1
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	2264      	movs	r2, #100	; 0x64
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	1acb      	subs	r3, r1, r3
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <UART_SetConfig+0x2d4>)
 8004648:	fba3 2302 	umull	r2, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004654:	441c      	add	r4, r3
 8004656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004660:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	1891      	adds	r1, r2, r2
 800466e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004670:	415b      	adcs	r3, r3
 8004672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004678:	4641      	mov	r1, r8
 800467a:	1851      	adds	r1, r2, r1
 800467c:	6339      	str	r1, [r7, #48]	; 0x30
 800467e:	4649      	mov	r1, r9
 8004680:	414b      	adcs	r3, r1
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004690:	4659      	mov	r1, fp
 8004692:	00cb      	lsls	r3, r1, #3
 8004694:	4651      	mov	r1, sl
 8004696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469a:	4651      	mov	r1, sl
 800469c:	00ca      	lsls	r2, r1, #3
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	4642      	mov	r2, r8
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046ac:	464b      	mov	r3, r9
 80046ae:	460a      	mov	r2, r1
 80046b0:	eb42 0303 	adc.w	r3, r2, r3
 80046b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046cc:	460b      	mov	r3, r1
 80046ce:	18db      	adds	r3, r3, r3
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	4613      	mov	r3, r2
 80046d4:	eb42 0303 	adc.w	r3, r2, r3
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046e2:	f7fb fde5 	bl	80002b0 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <UART_SetConfig+0x2d4>)
 80046ec:	fba3 1302 	umull	r1, r3, r3, r2
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	2164      	movs	r1, #100	; 0x64
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	3332      	adds	r3, #50	; 0x32
 80046fe:	4a08      	ldr	r2, [pc, #32]	; (8004720 <UART_SetConfig+0x2d4>)
 8004700:	fba2 2303 	umull	r2, r3, r2, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	f003 0207 	and.w	r2, r3, #7
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4422      	add	r2, r4
 8004712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004714:	e106      	b.n	8004924 <UART_SetConfig+0x4d8>
 8004716:	bf00      	nop
 8004718:	40011000 	.word	0x40011000
 800471c:	40011400 	.word	0x40011400
 8004720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004728:	2200      	movs	r2, #0
 800472a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800472e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004736:	4642      	mov	r2, r8
 8004738:	464b      	mov	r3, r9
 800473a:	1891      	adds	r1, r2, r2
 800473c:	6239      	str	r1, [r7, #32]
 800473e:	415b      	adcs	r3, r3
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004746:	4641      	mov	r1, r8
 8004748:	1854      	adds	r4, r2, r1
 800474a:	4649      	mov	r1, r9
 800474c:	eb43 0501 	adc.w	r5, r3, r1
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	00eb      	lsls	r3, r5, #3
 800475a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475e:	00e2      	lsls	r2, r4, #3
 8004760:	4614      	mov	r4, r2
 8004762:	461d      	mov	r5, r3
 8004764:	4643      	mov	r3, r8
 8004766:	18e3      	adds	r3, r4, r3
 8004768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800476c:	464b      	mov	r3, r9
 800476e:	eb45 0303 	adc.w	r3, r5, r3
 8004772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004792:	4629      	mov	r1, r5
 8004794:	008b      	lsls	r3, r1, #2
 8004796:	4621      	mov	r1, r4
 8004798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479c:	4621      	mov	r1, r4
 800479e:	008a      	lsls	r2, r1, #2
 80047a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047a4:	f7fb fd84 	bl	80002b0 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4b60      	ldr	r3, [pc, #384]	; (8004930 <UART_SetConfig+0x4e4>)
 80047ae:	fba3 2302 	umull	r2, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	011c      	lsls	r4, r3, #4
 80047b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047c8:	4642      	mov	r2, r8
 80047ca:	464b      	mov	r3, r9
 80047cc:	1891      	adds	r1, r2, r2
 80047ce:	61b9      	str	r1, [r7, #24]
 80047d0:	415b      	adcs	r3, r3
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d8:	4641      	mov	r1, r8
 80047da:	1851      	adds	r1, r2, r1
 80047dc:	6139      	str	r1, [r7, #16]
 80047de:	4649      	mov	r1, r9
 80047e0:	414b      	adcs	r3, r1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047f0:	4659      	mov	r1, fp
 80047f2:	00cb      	lsls	r3, r1, #3
 80047f4:	4651      	mov	r1, sl
 80047f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fa:	4651      	mov	r1, sl
 80047fc:	00ca      	lsls	r2, r1, #3
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	4603      	mov	r3, r0
 8004804:	4642      	mov	r2, r8
 8004806:	189b      	adds	r3, r3, r2
 8004808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800480c:	464b      	mov	r3, r9
 800480e:	460a      	mov	r2, r1
 8004810:	eb42 0303 	adc.w	r3, r2, r3
 8004814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	67bb      	str	r3, [r7, #120]	; 0x78
 8004822:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004830:	4649      	mov	r1, r9
 8004832:	008b      	lsls	r3, r1, #2
 8004834:	4641      	mov	r1, r8
 8004836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483a:	4641      	mov	r1, r8
 800483c:	008a      	lsls	r2, r1, #2
 800483e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004842:	f7fb fd35 	bl	80002b0 <__aeabi_uldivmod>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4611      	mov	r1, r2
 800484c:	4b38      	ldr	r3, [pc, #224]	; (8004930 <UART_SetConfig+0x4e4>)
 800484e:	fba3 2301 	umull	r2, r3, r3, r1
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	2264      	movs	r2, #100	; 0x64
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	1acb      	subs	r3, r1, r3
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	3332      	adds	r3, #50	; 0x32
 8004860:	4a33      	ldr	r2, [pc, #204]	; (8004930 <UART_SetConfig+0x4e4>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486c:	441c      	add	r4, r3
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	673b      	str	r3, [r7, #112]	; 0x70
 8004876:	677a      	str	r2, [r7, #116]	; 0x74
 8004878:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800487c:	4642      	mov	r2, r8
 800487e:	464b      	mov	r3, r9
 8004880:	1891      	adds	r1, r2, r2
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	415b      	adcs	r3, r3
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800488c:	4641      	mov	r1, r8
 800488e:	1851      	adds	r1, r2, r1
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	4649      	mov	r1, r9
 8004894:	414b      	adcs	r3, r1
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048a4:	4659      	mov	r1, fp
 80048a6:	00cb      	lsls	r3, r1, #3
 80048a8:	4651      	mov	r1, sl
 80048aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ae:	4651      	mov	r1, sl
 80048b0:	00ca      	lsls	r2, r1, #3
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	4642      	mov	r2, r8
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80048be:	464b      	mov	r3, r9
 80048c0:	460a      	mov	r2, r1
 80048c2:	eb42 0303 	adc.w	r3, r2, r3
 80048c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	663b      	str	r3, [r7, #96]	; 0x60
 80048d2:	667a      	str	r2, [r7, #100]	; 0x64
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048e0:	4649      	mov	r1, r9
 80048e2:	008b      	lsls	r3, r1, #2
 80048e4:	4641      	mov	r1, r8
 80048e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ea:	4641      	mov	r1, r8
 80048ec:	008a      	lsls	r2, r1, #2
 80048ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048f2:	f7fb fcdd 	bl	80002b0 <__aeabi_uldivmod>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <UART_SetConfig+0x4e4>)
 80048fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	2164      	movs	r1, #100	; 0x64
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	3332      	adds	r3, #50	; 0x32
 800490e:	4a08      	ldr	r2, [pc, #32]	; (8004930 <UART_SetConfig+0x4e4>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	f003 020f 	and.w	r2, r3, #15
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4422      	add	r2, r4
 8004922:	609a      	str	r2, [r3, #8]
}
 8004924:	bf00      	nop
 8004926:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800492a:	46bd      	mov	sp, r7
 800492c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004930:	51eb851f 	.word	0x51eb851f

08004934 <siprintf>:
 8004934:	b40e      	push	{r1, r2, r3}
 8004936:	b500      	push	{lr}
 8004938:	b09c      	sub	sp, #112	; 0x70
 800493a:	ab1d      	add	r3, sp, #116	; 0x74
 800493c:	9002      	str	r0, [sp, #8]
 800493e:	9006      	str	r0, [sp, #24]
 8004940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004944:	4809      	ldr	r0, [pc, #36]	; (800496c <siprintf+0x38>)
 8004946:	9107      	str	r1, [sp, #28]
 8004948:	9104      	str	r1, [sp, #16]
 800494a:	4909      	ldr	r1, [pc, #36]	; (8004970 <siprintf+0x3c>)
 800494c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004950:	9105      	str	r1, [sp, #20]
 8004952:	6800      	ldr	r0, [r0, #0]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	a902      	add	r1, sp, #8
 8004958:	f000 f992 	bl	8004c80 <_svfiprintf_r>
 800495c:	9b02      	ldr	r3, [sp, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	b01c      	add	sp, #112	; 0x70
 8004964:	f85d eb04 	ldr.w	lr, [sp], #4
 8004968:	b003      	add	sp, #12
 800496a:	4770      	bx	lr
 800496c:	20000060 	.word	0x20000060
 8004970:	ffff0208 	.word	0xffff0208

08004974 <memset>:
 8004974:	4402      	add	r2, r0
 8004976:	4603      	mov	r3, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <__errno>:
 8004984:	4b01      	ldr	r3, [pc, #4]	; (800498c <__errno+0x8>)
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000060 	.word	0x20000060

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4d0d      	ldr	r5, [pc, #52]	; (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2600      	movs	r6, #0
 800499c:	42a6      	cmp	r6, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4d0b      	ldr	r5, [pc, #44]	; (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	; (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 fc6a 	bl	800527c <_init>
 80049a8:	1b64      	subs	r4, r4, r5
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2600      	movs	r6, #0
 80049ae:	42a6      	cmp	r6, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b8:	4798      	blx	r3
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c2:	4798      	blx	r3
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08005398 	.word	0x08005398
 80049cc:	08005398 	.word	0x08005398
 80049d0:	08005398 	.word	0x08005398
 80049d4:	0800539c 	.word	0x0800539c

080049d8 <__retarget_lock_acquire_recursive>:
 80049d8:	4770      	bx	lr

080049da <__retarget_lock_release_recursive>:
 80049da:	4770      	bx	lr

080049dc <_free_r>:
 80049dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049de:	2900      	cmp	r1, #0
 80049e0:	d044      	beq.n	8004a6c <_free_r+0x90>
 80049e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e6:	9001      	str	r0, [sp, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f1a1 0404 	sub.w	r4, r1, #4
 80049ee:	bfb8      	it	lt
 80049f0:	18e4      	addlt	r4, r4, r3
 80049f2:	f000 f8df 	bl	8004bb4 <__malloc_lock>
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <_free_r+0x94>)
 80049f8:	9801      	ldr	r0, [sp, #4]
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	b933      	cbnz	r3, 8004a0c <_free_r+0x30>
 80049fe:	6063      	str	r3, [r4, #4]
 8004a00:	6014      	str	r4, [r2, #0]
 8004a02:	b003      	add	sp, #12
 8004a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a08:	f000 b8da 	b.w	8004bc0 <__malloc_unlock>
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d908      	bls.n	8004a22 <_free_r+0x46>
 8004a10:	6825      	ldr	r5, [r4, #0]
 8004a12:	1961      	adds	r1, r4, r5
 8004a14:	428b      	cmp	r3, r1
 8004a16:	bf01      	itttt	eq
 8004a18:	6819      	ldreq	r1, [r3, #0]
 8004a1a:	685b      	ldreq	r3, [r3, #4]
 8004a1c:	1949      	addeq	r1, r1, r5
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	e7ed      	b.n	80049fe <_free_r+0x22>
 8004a22:	461a      	mov	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b10b      	cbz	r3, 8004a2c <_free_r+0x50>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d9fa      	bls.n	8004a22 <_free_r+0x46>
 8004a2c:	6811      	ldr	r1, [r2, #0]
 8004a2e:	1855      	adds	r5, r2, r1
 8004a30:	42a5      	cmp	r5, r4
 8004a32:	d10b      	bne.n	8004a4c <_free_r+0x70>
 8004a34:	6824      	ldr	r4, [r4, #0]
 8004a36:	4421      	add	r1, r4
 8004a38:	1854      	adds	r4, r2, r1
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	d1e0      	bne.n	8004a02 <_free_r+0x26>
 8004a40:	681c      	ldr	r4, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	440c      	add	r4, r1
 8004a48:	6014      	str	r4, [r2, #0]
 8004a4a:	e7da      	b.n	8004a02 <_free_r+0x26>
 8004a4c:	d902      	bls.n	8004a54 <_free_r+0x78>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	6003      	str	r3, [r0, #0]
 8004a52:	e7d6      	b.n	8004a02 <_free_r+0x26>
 8004a54:	6825      	ldr	r5, [r4, #0]
 8004a56:	1961      	adds	r1, r4, r5
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf04      	itt	eq
 8004a5c:	6819      	ldreq	r1, [r3, #0]
 8004a5e:	685b      	ldreq	r3, [r3, #4]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	bf04      	itt	eq
 8004a64:	1949      	addeq	r1, r1, r5
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	e7ca      	b.n	8004a02 <_free_r+0x26>
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bd30      	pop	{r4, r5, pc}
 8004a70:	2000033c 	.word	0x2000033c

08004a74 <sbrk_aligned>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4e0e      	ldr	r6, [pc, #56]	; (8004ab0 <sbrk_aligned+0x3c>)
 8004a78:	460c      	mov	r4, r1
 8004a7a:	6831      	ldr	r1, [r6, #0]
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	b911      	cbnz	r1, 8004a86 <sbrk_aligned+0x12>
 8004a80:	f000 fba6 	bl	80051d0 <_sbrk_r>
 8004a84:	6030      	str	r0, [r6, #0]
 8004a86:	4621      	mov	r1, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f000 fba1 	bl	80051d0 <_sbrk_r>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	d00a      	beq.n	8004aa8 <sbrk_aligned+0x34>
 8004a92:	1cc4      	adds	r4, r0, #3
 8004a94:	f024 0403 	bic.w	r4, r4, #3
 8004a98:	42a0      	cmp	r0, r4
 8004a9a:	d007      	beq.n	8004aac <sbrk_aligned+0x38>
 8004a9c:	1a21      	subs	r1, r4, r0
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 fb96 	bl	80051d0 <_sbrk_r>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d101      	bne.n	8004aac <sbrk_aligned+0x38>
 8004aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8004aac:	4620      	mov	r0, r4
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	20000340 	.word	0x20000340

08004ab4 <_malloc_r>:
 8004ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	1ccd      	adds	r5, r1, #3
 8004aba:	f025 0503 	bic.w	r5, r5, #3
 8004abe:	3508      	adds	r5, #8
 8004ac0:	2d0c      	cmp	r5, #12
 8004ac2:	bf38      	it	cc
 8004ac4:	250c      	movcc	r5, #12
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	4607      	mov	r7, r0
 8004aca:	db01      	blt.n	8004ad0 <_malloc_r+0x1c>
 8004acc:	42a9      	cmp	r1, r5
 8004ace:	d905      	bls.n	8004adc <_malloc_r+0x28>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004adc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bb0 <_malloc_r+0xfc>
 8004ae0:	f000 f868 	bl	8004bb4 <__malloc_lock>
 8004ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae8:	461c      	mov	r4, r3
 8004aea:	bb5c      	cbnz	r4, 8004b44 <_malloc_r+0x90>
 8004aec:	4629      	mov	r1, r5
 8004aee:	4638      	mov	r0, r7
 8004af0:	f7ff ffc0 	bl	8004a74 <sbrk_aligned>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	4604      	mov	r4, r0
 8004af8:	d155      	bne.n	8004ba6 <_malloc_r+0xf2>
 8004afa:	f8d8 4000 	ldr.w	r4, [r8]
 8004afe:	4626      	mov	r6, r4
 8004b00:	2e00      	cmp	r6, #0
 8004b02:	d145      	bne.n	8004b90 <_malloc_r+0xdc>
 8004b04:	2c00      	cmp	r4, #0
 8004b06:	d048      	beq.n	8004b9a <_malloc_r+0xe6>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	eb04 0903 	add.w	r9, r4, r3
 8004b12:	f000 fb5d 	bl	80051d0 <_sbrk_r>
 8004b16:	4581      	cmp	r9, r0
 8004b18:	d13f      	bne.n	8004b9a <_malloc_r+0xe6>
 8004b1a:	6821      	ldr	r1, [r4, #0]
 8004b1c:	1a6d      	subs	r5, r5, r1
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4638      	mov	r0, r7
 8004b22:	f7ff ffa7 	bl	8004a74 <sbrk_aligned>
 8004b26:	3001      	adds	r0, #1
 8004b28:	d037      	beq.n	8004b9a <_malloc_r+0xe6>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	442b      	add	r3, r5
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	f8d8 3000 	ldr.w	r3, [r8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d038      	beq.n	8004baa <_malloc_r+0xf6>
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	42a2      	cmp	r2, r4
 8004b3c:	d12b      	bne.n	8004b96 <_malloc_r+0xe2>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	e00f      	b.n	8004b64 <_malloc_r+0xb0>
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	1b52      	subs	r2, r2, r5
 8004b48:	d41f      	bmi.n	8004b8a <_malloc_r+0xd6>
 8004b4a:	2a0b      	cmp	r2, #11
 8004b4c:	d917      	bls.n	8004b7e <_malloc_r+0xca>
 8004b4e:	1961      	adds	r1, r4, r5
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	6025      	str	r5, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	6059      	strne	r1, [r3, #4]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	bf08      	it	eq
 8004b5c:	f8c8 1000 	streq.w	r1, [r8]
 8004b60:	5162      	str	r2, [r4, r5]
 8004b62:	604b      	str	r3, [r1, #4]
 8004b64:	4638      	mov	r0, r7
 8004b66:	f104 060b 	add.w	r6, r4, #11
 8004b6a:	f000 f829 	bl	8004bc0 <__malloc_unlock>
 8004b6e:	f026 0607 	bic.w	r6, r6, #7
 8004b72:	1d23      	adds	r3, r4, #4
 8004b74:	1af2      	subs	r2, r6, r3
 8004b76:	d0ae      	beq.n	8004ad6 <_malloc_r+0x22>
 8004b78:	1b9b      	subs	r3, r3, r6
 8004b7a:	50a3      	str	r3, [r4, r2]
 8004b7c:	e7ab      	b.n	8004ad6 <_malloc_r+0x22>
 8004b7e:	42a3      	cmp	r3, r4
 8004b80:	6862      	ldr	r2, [r4, #4]
 8004b82:	d1dd      	bne.n	8004b40 <_malloc_r+0x8c>
 8004b84:	f8c8 2000 	str.w	r2, [r8]
 8004b88:	e7ec      	b.n	8004b64 <_malloc_r+0xb0>
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	6864      	ldr	r4, [r4, #4]
 8004b8e:	e7ac      	b.n	8004aea <_malloc_r+0x36>
 8004b90:	4634      	mov	r4, r6
 8004b92:	6876      	ldr	r6, [r6, #4]
 8004b94:	e7b4      	b.n	8004b00 <_malloc_r+0x4c>
 8004b96:	4613      	mov	r3, r2
 8004b98:	e7cc      	b.n	8004b34 <_malloc_r+0x80>
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f000 f80e 	bl	8004bc0 <__malloc_unlock>
 8004ba4:	e797      	b.n	8004ad6 <_malloc_r+0x22>
 8004ba6:	6025      	str	r5, [r4, #0]
 8004ba8:	e7dc      	b.n	8004b64 <_malloc_r+0xb0>
 8004baa:	605b      	str	r3, [r3, #4]
 8004bac:	deff      	udf	#255	; 0xff
 8004bae:	bf00      	nop
 8004bb0:	2000033c 	.word	0x2000033c

08004bb4 <__malloc_lock>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	; (8004bbc <__malloc_lock+0x8>)
 8004bb6:	f7ff bf0f 	b.w	80049d8 <__retarget_lock_acquire_recursive>
 8004bba:	bf00      	nop
 8004bbc:	20000338 	.word	0x20000338

08004bc0 <__malloc_unlock>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <__malloc_unlock+0x8>)
 8004bc2:	f7ff bf0a 	b.w	80049da <__retarget_lock_release_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	20000338 	.word	0x20000338

08004bcc <__ssputs_r>:
 8004bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	688e      	ldr	r6, [r1, #8]
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	42be      	cmp	r6, r7
 8004bd6:	680b      	ldr	r3, [r1, #0]
 8004bd8:	4682      	mov	sl, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	4690      	mov	r8, r2
 8004bde:	d82c      	bhi.n	8004c3a <__ssputs_r+0x6e>
 8004be0:	898a      	ldrh	r2, [r1, #12]
 8004be2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004be6:	d026      	beq.n	8004c36 <__ssputs_r+0x6a>
 8004be8:	6965      	ldr	r5, [r4, #20]
 8004bea:	6909      	ldr	r1, [r1, #16]
 8004bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bf0:	eba3 0901 	sub.w	r9, r3, r1
 8004bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf8:	1c7b      	adds	r3, r7, #1
 8004bfa:	444b      	add	r3, r9
 8004bfc:	106d      	asrs	r5, r5, #1
 8004bfe:	429d      	cmp	r5, r3
 8004c00:	bf38      	it	cc
 8004c02:	461d      	movcc	r5, r3
 8004c04:	0553      	lsls	r3, r2, #21
 8004c06:	d527      	bpl.n	8004c58 <__ssputs_r+0x8c>
 8004c08:	4629      	mov	r1, r5
 8004c0a:	f7ff ff53 	bl	8004ab4 <_malloc_r>
 8004c0e:	4606      	mov	r6, r0
 8004c10:	b360      	cbz	r0, 8004c6c <__ssputs_r+0xa0>
 8004c12:	6921      	ldr	r1, [r4, #16]
 8004c14:	464a      	mov	r2, r9
 8004c16:	f000 faeb 	bl	80051f0 <memcpy>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	6126      	str	r6, [r4, #16]
 8004c28:	6165      	str	r5, [r4, #20]
 8004c2a:	444e      	add	r6, r9
 8004c2c:	eba5 0509 	sub.w	r5, r5, r9
 8004c30:	6026      	str	r6, [r4, #0]
 8004c32:	60a5      	str	r5, [r4, #8]
 8004c34:	463e      	mov	r6, r7
 8004c36:	42be      	cmp	r6, r7
 8004c38:	d900      	bls.n	8004c3c <__ssputs_r+0x70>
 8004c3a:	463e      	mov	r6, r7
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	4632      	mov	r2, r6
 8004c40:	4641      	mov	r1, r8
 8004c42:	f000 faab 	bl	800519c <memmove>
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	1b9b      	subs	r3, r3, r6
 8004c4a:	60a3      	str	r3, [r4, #8]
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	4433      	add	r3, r6
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	2000      	movs	r0, #0
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	462a      	mov	r2, r5
 8004c5a:	f000 fad7 	bl	800520c <_realloc_r>
 8004c5e:	4606      	mov	r6, r0
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d1e0      	bne.n	8004c26 <__ssputs_r+0x5a>
 8004c64:	6921      	ldr	r1, [r4, #16]
 8004c66:	4650      	mov	r0, sl
 8004c68:	f7ff feb8 	bl	80049dc <_free_r>
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	f8ca 3000 	str.w	r3, [sl]
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7e:	e7e9      	b.n	8004c54 <__ssputs_r+0x88>

08004c80 <_svfiprintf_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4698      	mov	r8, r3
 8004c86:	898b      	ldrh	r3, [r1, #12]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	b09d      	sub	sp, #116	; 0x74
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	4614      	mov	r4, r2
 8004c92:	d50e      	bpl.n	8004cb2 <_svfiprintf_r+0x32>
 8004c94:	690b      	ldr	r3, [r1, #16]
 8004c96:	b963      	cbnz	r3, 8004cb2 <_svfiprintf_r+0x32>
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	f7ff ff0b 	bl	8004ab4 <_malloc_r>
 8004c9e:	6028      	str	r0, [r5, #0]
 8004ca0:	6128      	str	r0, [r5, #16]
 8004ca2:	b920      	cbnz	r0, 8004cae <_svfiprintf_r+0x2e>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	e0d0      	b.n	8004e50 <_svfiprintf_r+0x1d0>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	616b      	str	r3, [r5, #20]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc0:	2330      	movs	r3, #48	; 0x30
 8004cc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e68 <_svfiprintf_r+0x1e8>
 8004cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cca:	f04f 0901 	mov.w	r9, #1
 8004cce:	4623      	mov	r3, r4
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd6:	b10a      	cbz	r2, 8004cdc <_svfiprintf_r+0x5c>
 8004cd8:	2a25      	cmp	r2, #37	; 0x25
 8004cda:	d1f9      	bne.n	8004cd0 <_svfiprintf_r+0x50>
 8004cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce0:	d00b      	beq.n	8004cfa <_svfiprintf_r+0x7a>
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff ff6f 	bl	8004bcc <__ssputs_r>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f000 80a9 	beq.w	8004e46 <_svfiprintf_r+0x1c6>
 8004cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf6:	445a      	add	r2, fp
 8004cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8004cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a1 	beq.w	8004e46 <_svfiprintf_r+0x1c6>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0e:	f10a 0a01 	add.w	sl, sl, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	9307      	str	r3, [sp, #28]
 8004d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d1c:	4654      	mov	r4, sl
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	4850      	ldr	r0, [pc, #320]	; (8004e68 <_svfiprintf_r+0x1e8>)
 8004d26:	f7fb fa73 	bl	8000210 <memchr>
 8004d2a:	9a04      	ldr	r2, [sp, #16]
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_svfiprintf_r+0xe6>
 8004d2e:	06d0      	lsls	r0, r2, #27
 8004d30:	bf44      	itt	mi
 8004d32:	2320      	movmi	r3, #32
 8004d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d38:	0711      	lsls	r1, r2, #28
 8004d3a:	bf44      	itt	mi
 8004d3c:	232b      	movmi	r3, #43	; 0x2b
 8004d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d42:	f89a 3000 	ldrb.w	r3, [sl]
 8004d46:	2b2a      	cmp	r3, #42	; 0x2a
 8004d48:	d015      	beq.n	8004d76 <_svfiprintf_r+0xf6>
 8004d4a:	9a07      	ldr	r2, [sp, #28]
 8004d4c:	4654      	mov	r4, sl
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f04f 0c0a 	mov.w	ip, #10
 8004d54:	4621      	mov	r1, r4
 8004d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d5a:	3b30      	subs	r3, #48	; 0x30
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d94d      	bls.n	8004dfc <_svfiprintf_r+0x17c>
 8004d60:	b1b0      	cbz	r0, 8004d90 <_svfiprintf_r+0x110>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e014      	b.n	8004d90 <_svfiprintf_r+0x110>
 8004d66:	eba0 0308 	sub.w	r3, r0, r8
 8004d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	46a2      	mov	sl, r4
 8004d74:	e7d2      	b.n	8004d1c <_svfiprintf_r+0x9c>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfbb      	ittet	lt
 8004d82:	425b      	neglt	r3, r3
 8004d84:	f042 0202 	orrlt.w	r2, r2, #2
 8004d88:	9307      	strge	r3, [sp, #28]
 8004d8a:	9307      	strlt	r3, [sp, #28]
 8004d8c:	bfb8      	it	lt
 8004d8e:	9204      	strlt	r2, [sp, #16]
 8004d90:	7823      	ldrb	r3, [r4, #0]
 8004d92:	2b2e      	cmp	r3, #46	; 0x2e
 8004d94:	d10c      	bne.n	8004db0 <_svfiprintf_r+0x130>
 8004d96:	7863      	ldrb	r3, [r4, #1]
 8004d98:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9a:	d134      	bne.n	8004e06 <_svfiprintf_r+0x186>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	9203      	str	r2, [sp, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bfb8      	it	lt
 8004da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dac:	3402      	adds	r4, #2
 8004dae:	9305      	str	r3, [sp, #20]
 8004db0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e78 <_svfiprintf_r+0x1f8>
 8004db4:	7821      	ldrb	r1, [r4, #0]
 8004db6:	2203      	movs	r2, #3
 8004db8:	4650      	mov	r0, sl
 8004dba:	f7fb fa29 	bl	8000210 <memchr>
 8004dbe:	b138      	cbz	r0, 8004dd0 <_svfiprintf_r+0x150>
 8004dc0:	9b04      	ldr	r3, [sp, #16]
 8004dc2:	eba0 000a 	sub.w	r0, r0, sl
 8004dc6:	2240      	movs	r2, #64	; 0x40
 8004dc8:	4082      	lsls	r2, r0
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	3401      	adds	r4, #1
 8004dce:	9304      	str	r3, [sp, #16]
 8004dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd4:	4825      	ldr	r0, [pc, #148]	; (8004e6c <_svfiprintf_r+0x1ec>)
 8004dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dda:	2206      	movs	r2, #6
 8004ddc:	f7fb fa18 	bl	8000210 <memchr>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d038      	beq.n	8004e56 <_svfiprintf_r+0x1d6>
 8004de4:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <_svfiprintf_r+0x1f0>)
 8004de6:	bb1b      	cbnz	r3, 8004e30 <_svfiprintf_r+0x1b0>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	3307      	adds	r3, #7
 8004dec:	f023 0307 	bic.w	r3, r3, #7
 8004df0:	3308      	adds	r3, #8
 8004df2:	9303      	str	r3, [sp, #12]
 8004df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df6:	4433      	add	r3, r6
 8004df8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfa:	e768      	b.n	8004cce <_svfiprintf_r+0x4e>
 8004dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e00:	460c      	mov	r4, r1
 8004e02:	2001      	movs	r0, #1
 8004e04:	e7a6      	b.n	8004d54 <_svfiprintf_r+0xd4>
 8004e06:	2300      	movs	r3, #0
 8004e08:	3401      	adds	r4, #1
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f04f 0c0a 	mov.w	ip, #10
 8004e12:	4620      	mov	r0, r4
 8004e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e18:	3a30      	subs	r2, #48	; 0x30
 8004e1a:	2a09      	cmp	r2, #9
 8004e1c:	d903      	bls.n	8004e26 <_svfiprintf_r+0x1a6>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0c6      	beq.n	8004db0 <_svfiprintf_r+0x130>
 8004e22:	9105      	str	r1, [sp, #20]
 8004e24:	e7c4      	b.n	8004db0 <_svfiprintf_r+0x130>
 8004e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e7f0      	b.n	8004e12 <_svfiprintf_r+0x192>
 8004e30:	ab03      	add	r3, sp, #12
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	462a      	mov	r2, r5
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <_svfiprintf_r+0x1f4>)
 8004e38:	a904      	add	r1, sp, #16
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f3af 8000 	nop.w
 8004e40:	1c42      	adds	r2, r0, #1
 8004e42:	4606      	mov	r6, r0
 8004e44:	d1d6      	bne.n	8004df4 <_svfiprintf_r+0x174>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	065b      	lsls	r3, r3, #25
 8004e4a:	f53f af2d 	bmi.w	8004ca8 <_svfiprintf_r+0x28>
 8004e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e50:	b01d      	add	sp, #116	; 0x74
 8004e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e56:	ab03      	add	r3, sp, #12
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	462a      	mov	r2, r5
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <_svfiprintf_r+0x1f4>)
 8004e5e:	a904      	add	r1, sp, #16
 8004e60:	4638      	mov	r0, r7
 8004e62:	f000 f879 	bl	8004f58 <_printf_i>
 8004e66:	e7eb      	b.n	8004e40 <_svfiprintf_r+0x1c0>
 8004e68:	0800535c 	.word	0x0800535c
 8004e6c:	08005366 	.word	0x08005366
 8004e70:	00000000 	.word	0x00000000
 8004e74:	08004bcd 	.word	0x08004bcd
 8004e78:	08005362 	.word	0x08005362

08004e7c <_printf_common>:
 8004e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e80:	4616      	mov	r6, r2
 8004e82:	4699      	mov	r9, r3
 8004e84:	688a      	ldr	r2, [r1, #8]
 8004e86:	690b      	ldr	r3, [r1, #16]
 8004e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	bfb8      	it	lt
 8004e90:	4613      	movlt	r3, r2
 8004e92:	6033      	str	r3, [r6, #0]
 8004e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e98:	4607      	mov	r7, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	b10a      	cbz	r2, 8004ea2 <_printf_common+0x26>
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	6033      	str	r3, [r6, #0]
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	0699      	lsls	r1, r3, #26
 8004ea6:	bf42      	ittt	mi
 8004ea8:	6833      	ldrmi	r3, [r6, #0]
 8004eaa:	3302      	addmi	r3, #2
 8004eac:	6033      	strmi	r3, [r6, #0]
 8004eae:	6825      	ldr	r5, [r4, #0]
 8004eb0:	f015 0506 	ands.w	r5, r5, #6
 8004eb4:	d106      	bne.n	8004ec4 <_printf_common+0x48>
 8004eb6:	f104 0a19 	add.w	sl, r4, #25
 8004eba:	68e3      	ldr	r3, [r4, #12]
 8004ebc:	6832      	ldr	r2, [r6, #0]
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	42ab      	cmp	r3, r5
 8004ec2:	dc26      	bgt.n	8004f12 <_printf_common+0x96>
 8004ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ec8:	1e13      	subs	r3, r2, #0
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	bf18      	it	ne
 8004ece:	2301      	movne	r3, #1
 8004ed0:	0692      	lsls	r2, r2, #26
 8004ed2:	d42b      	bmi.n	8004f2c <_printf_common+0xb0>
 8004ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	47c0      	blx	r8
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d01e      	beq.n	8004f20 <_printf_common+0xa4>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	6922      	ldr	r2, [r4, #16]
 8004ee6:	f003 0306 	and.w	r3, r3, #6
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	bf02      	ittt	eq
 8004eee:	68e5      	ldreq	r5, [r4, #12]
 8004ef0:	6833      	ldreq	r3, [r6, #0]
 8004ef2:	1aed      	subeq	r5, r5, r3
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	bf0c      	ite	eq
 8004ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004efc:	2500      	movne	r5, #0
 8004efe:	4293      	cmp	r3, r2
 8004f00:	bfc4      	itt	gt
 8004f02:	1a9b      	subgt	r3, r3, r2
 8004f04:	18ed      	addgt	r5, r5, r3
 8004f06:	2600      	movs	r6, #0
 8004f08:	341a      	adds	r4, #26
 8004f0a:	42b5      	cmp	r5, r6
 8004f0c:	d11a      	bne.n	8004f44 <_printf_common+0xc8>
 8004f0e:	2000      	movs	r0, #0
 8004f10:	e008      	b.n	8004f24 <_printf_common+0xa8>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4652      	mov	r2, sl
 8004f16:	4649      	mov	r1, r9
 8004f18:	4638      	mov	r0, r7
 8004f1a:	47c0      	blx	r8
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d103      	bne.n	8004f28 <_printf_common+0xac>
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	3501      	adds	r5, #1
 8004f2a:	e7c6      	b.n	8004eba <_printf_common+0x3e>
 8004f2c:	18e1      	adds	r1, r4, r3
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	2030      	movs	r0, #48	; 0x30
 8004f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f36:	4422      	add	r2, r4
 8004f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f40:	3302      	adds	r3, #2
 8004f42:	e7c7      	b.n	8004ed4 <_printf_common+0x58>
 8004f44:	2301      	movs	r3, #1
 8004f46:	4622      	mov	r2, r4
 8004f48:	4649      	mov	r1, r9
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	47c0      	blx	r8
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d0e6      	beq.n	8004f20 <_printf_common+0xa4>
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7d9      	b.n	8004f0a <_printf_common+0x8e>
	...

08004f58 <_printf_i>:
 8004f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f5c:	7e0f      	ldrb	r7, [r1, #24]
 8004f5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f60:	2f78      	cmp	r7, #120	; 0x78
 8004f62:	4691      	mov	r9, r2
 8004f64:	4680      	mov	r8, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	469a      	mov	sl, r3
 8004f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f6e:	d807      	bhi.n	8004f80 <_printf_i+0x28>
 8004f70:	2f62      	cmp	r7, #98	; 0x62
 8004f72:	d80a      	bhi.n	8004f8a <_printf_i+0x32>
 8004f74:	2f00      	cmp	r7, #0
 8004f76:	f000 80d4 	beq.w	8005122 <_printf_i+0x1ca>
 8004f7a:	2f58      	cmp	r7, #88	; 0x58
 8004f7c:	f000 80c0 	beq.w	8005100 <_printf_i+0x1a8>
 8004f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f88:	e03a      	b.n	8005000 <_printf_i+0xa8>
 8004f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f8e:	2b15      	cmp	r3, #21
 8004f90:	d8f6      	bhi.n	8004f80 <_printf_i+0x28>
 8004f92:	a101      	add	r1, pc, #4	; (adr r1, 8004f98 <_printf_i+0x40>)
 8004f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f98:	08004ff1 	.word	0x08004ff1
 8004f9c:	08005005 	.word	0x08005005
 8004fa0:	08004f81 	.word	0x08004f81
 8004fa4:	08004f81 	.word	0x08004f81
 8004fa8:	08004f81 	.word	0x08004f81
 8004fac:	08004f81 	.word	0x08004f81
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	08004f81 	.word	0x08004f81
 8004fb8:	08004f81 	.word	0x08004f81
 8004fbc:	08004f81 	.word	0x08004f81
 8004fc0:	08004f81 	.word	0x08004f81
 8004fc4:	08005109 	.word	0x08005109
 8004fc8:	08005031 	.word	0x08005031
 8004fcc:	080050c3 	.word	0x080050c3
 8004fd0:	08004f81 	.word	0x08004f81
 8004fd4:	08004f81 	.word	0x08004f81
 8004fd8:	0800512b 	.word	0x0800512b
 8004fdc:	08004f81 	.word	0x08004f81
 8004fe0:	08005031 	.word	0x08005031
 8004fe4:	08004f81 	.word	0x08004f81
 8004fe8:	08004f81 	.word	0x08004f81
 8004fec:	080050cb 	.word	0x080050cb
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	602a      	str	r2, [r5, #0]
 8004ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005000:	2301      	movs	r3, #1
 8005002:	e09f      	b.n	8005144 <_printf_i+0x1ec>
 8005004:	6820      	ldr	r0, [r4, #0]
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	0607      	lsls	r7, r0, #24
 800500a:	f103 0104 	add.w	r1, r3, #4
 800500e:	6029      	str	r1, [r5, #0]
 8005010:	d501      	bpl.n	8005016 <_printf_i+0xbe>
 8005012:	681e      	ldr	r6, [r3, #0]
 8005014:	e003      	b.n	800501e <_printf_i+0xc6>
 8005016:	0646      	lsls	r6, r0, #25
 8005018:	d5fb      	bpl.n	8005012 <_printf_i+0xba>
 800501a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800501e:	2e00      	cmp	r6, #0
 8005020:	da03      	bge.n	800502a <_printf_i+0xd2>
 8005022:	232d      	movs	r3, #45	; 0x2d
 8005024:	4276      	negs	r6, r6
 8005026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502a:	485a      	ldr	r0, [pc, #360]	; (8005194 <_printf_i+0x23c>)
 800502c:	230a      	movs	r3, #10
 800502e:	e012      	b.n	8005056 <_printf_i+0xfe>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	6820      	ldr	r0, [r4, #0]
 8005034:	1d19      	adds	r1, r3, #4
 8005036:	6029      	str	r1, [r5, #0]
 8005038:	0605      	lsls	r5, r0, #24
 800503a:	d501      	bpl.n	8005040 <_printf_i+0xe8>
 800503c:	681e      	ldr	r6, [r3, #0]
 800503e:	e002      	b.n	8005046 <_printf_i+0xee>
 8005040:	0641      	lsls	r1, r0, #25
 8005042:	d5fb      	bpl.n	800503c <_printf_i+0xe4>
 8005044:	881e      	ldrh	r6, [r3, #0]
 8005046:	4853      	ldr	r0, [pc, #332]	; (8005194 <_printf_i+0x23c>)
 8005048:	2f6f      	cmp	r7, #111	; 0x6f
 800504a:	bf0c      	ite	eq
 800504c:	2308      	moveq	r3, #8
 800504e:	230a      	movne	r3, #10
 8005050:	2100      	movs	r1, #0
 8005052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005056:	6865      	ldr	r5, [r4, #4]
 8005058:	60a5      	str	r5, [r4, #8]
 800505a:	2d00      	cmp	r5, #0
 800505c:	bfa2      	ittt	ge
 800505e:	6821      	ldrge	r1, [r4, #0]
 8005060:	f021 0104 	bicge.w	r1, r1, #4
 8005064:	6021      	strge	r1, [r4, #0]
 8005066:	b90e      	cbnz	r6, 800506c <_printf_i+0x114>
 8005068:	2d00      	cmp	r5, #0
 800506a:	d04b      	beq.n	8005104 <_printf_i+0x1ac>
 800506c:	4615      	mov	r5, r2
 800506e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005072:	fb03 6711 	mls	r7, r3, r1, r6
 8005076:	5dc7      	ldrb	r7, [r0, r7]
 8005078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800507c:	4637      	mov	r7, r6
 800507e:	42bb      	cmp	r3, r7
 8005080:	460e      	mov	r6, r1
 8005082:	d9f4      	bls.n	800506e <_printf_i+0x116>
 8005084:	2b08      	cmp	r3, #8
 8005086:	d10b      	bne.n	80050a0 <_printf_i+0x148>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	07de      	lsls	r6, r3, #31
 800508c:	d508      	bpl.n	80050a0 <_printf_i+0x148>
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	6861      	ldr	r1, [r4, #4]
 8005092:	4299      	cmp	r1, r3
 8005094:	bfde      	ittt	le
 8005096:	2330      	movle	r3, #48	; 0x30
 8005098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800509c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050a0:	1b52      	subs	r2, r2, r5
 80050a2:	6122      	str	r2, [r4, #16]
 80050a4:	f8cd a000 	str.w	sl, [sp]
 80050a8:	464b      	mov	r3, r9
 80050aa:	aa03      	add	r2, sp, #12
 80050ac:	4621      	mov	r1, r4
 80050ae:	4640      	mov	r0, r8
 80050b0:	f7ff fee4 	bl	8004e7c <_printf_common>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d14a      	bne.n	800514e <_printf_i+0x1f6>
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	b004      	add	sp, #16
 80050be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f043 0320 	orr.w	r3, r3, #32
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	4833      	ldr	r0, [pc, #204]	; (8005198 <_printf_i+0x240>)
 80050cc:	2778      	movs	r7, #120	; 0x78
 80050ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	6829      	ldr	r1, [r5, #0]
 80050d6:	061f      	lsls	r7, r3, #24
 80050d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80050dc:	d402      	bmi.n	80050e4 <_printf_i+0x18c>
 80050de:	065f      	lsls	r7, r3, #25
 80050e0:	bf48      	it	mi
 80050e2:	b2b6      	uxthmi	r6, r6
 80050e4:	07df      	lsls	r7, r3, #31
 80050e6:	bf48      	it	mi
 80050e8:	f043 0320 	orrmi.w	r3, r3, #32
 80050ec:	6029      	str	r1, [r5, #0]
 80050ee:	bf48      	it	mi
 80050f0:	6023      	strmi	r3, [r4, #0]
 80050f2:	b91e      	cbnz	r6, 80050fc <_printf_i+0x1a4>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	f023 0320 	bic.w	r3, r3, #32
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	2310      	movs	r3, #16
 80050fe:	e7a7      	b.n	8005050 <_printf_i+0xf8>
 8005100:	4824      	ldr	r0, [pc, #144]	; (8005194 <_printf_i+0x23c>)
 8005102:	e7e4      	b.n	80050ce <_printf_i+0x176>
 8005104:	4615      	mov	r5, r2
 8005106:	e7bd      	b.n	8005084 <_printf_i+0x12c>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	6826      	ldr	r6, [r4, #0]
 800510c:	6961      	ldr	r1, [r4, #20]
 800510e:	1d18      	adds	r0, r3, #4
 8005110:	6028      	str	r0, [r5, #0]
 8005112:	0635      	lsls	r5, r6, #24
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	d501      	bpl.n	800511c <_printf_i+0x1c4>
 8005118:	6019      	str	r1, [r3, #0]
 800511a:	e002      	b.n	8005122 <_printf_i+0x1ca>
 800511c:	0670      	lsls	r0, r6, #25
 800511e:	d5fb      	bpl.n	8005118 <_printf_i+0x1c0>
 8005120:	8019      	strh	r1, [r3, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	4615      	mov	r5, r2
 8005128:	e7bc      	b.n	80050a4 <_printf_i+0x14c>
 800512a:	682b      	ldr	r3, [r5, #0]
 800512c:	1d1a      	adds	r2, r3, #4
 800512e:	602a      	str	r2, [r5, #0]
 8005130:	681d      	ldr	r5, [r3, #0]
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	2100      	movs	r1, #0
 8005136:	4628      	mov	r0, r5
 8005138:	f7fb f86a 	bl	8000210 <memchr>
 800513c:	b108      	cbz	r0, 8005142 <_printf_i+0x1ea>
 800513e:	1b40      	subs	r0, r0, r5
 8005140:	6060      	str	r0, [r4, #4]
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	2300      	movs	r3, #0
 8005148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800514c:	e7aa      	b.n	80050a4 <_printf_i+0x14c>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	462a      	mov	r2, r5
 8005152:	4649      	mov	r1, r9
 8005154:	4640      	mov	r0, r8
 8005156:	47d0      	blx	sl
 8005158:	3001      	adds	r0, #1
 800515a:	d0ad      	beq.n	80050b8 <_printf_i+0x160>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	079b      	lsls	r3, r3, #30
 8005160:	d413      	bmi.n	800518a <_printf_i+0x232>
 8005162:	68e0      	ldr	r0, [r4, #12]
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	4298      	cmp	r0, r3
 8005168:	bfb8      	it	lt
 800516a:	4618      	movlt	r0, r3
 800516c:	e7a6      	b.n	80050bc <_printf_i+0x164>
 800516e:	2301      	movs	r3, #1
 8005170:	4632      	mov	r2, r6
 8005172:	4649      	mov	r1, r9
 8005174:	4640      	mov	r0, r8
 8005176:	47d0      	blx	sl
 8005178:	3001      	adds	r0, #1
 800517a:	d09d      	beq.n	80050b8 <_printf_i+0x160>
 800517c:	3501      	adds	r5, #1
 800517e:	68e3      	ldr	r3, [r4, #12]
 8005180:	9903      	ldr	r1, [sp, #12]
 8005182:	1a5b      	subs	r3, r3, r1
 8005184:	42ab      	cmp	r3, r5
 8005186:	dcf2      	bgt.n	800516e <_printf_i+0x216>
 8005188:	e7eb      	b.n	8005162 <_printf_i+0x20a>
 800518a:	2500      	movs	r5, #0
 800518c:	f104 0619 	add.w	r6, r4, #25
 8005190:	e7f5      	b.n	800517e <_printf_i+0x226>
 8005192:	bf00      	nop
 8005194:	0800536d 	.word	0x0800536d
 8005198:	0800537e 	.word	0x0800537e

0800519c <memmove>:
 800519c:	4288      	cmp	r0, r1
 800519e:	b510      	push	{r4, lr}
 80051a0:	eb01 0402 	add.w	r4, r1, r2
 80051a4:	d902      	bls.n	80051ac <memmove+0x10>
 80051a6:	4284      	cmp	r4, r0
 80051a8:	4623      	mov	r3, r4
 80051aa:	d807      	bhi.n	80051bc <memmove+0x20>
 80051ac:	1e43      	subs	r3, r0, #1
 80051ae:	42a1      	cmp	r1, r4
 80051b0:	d008      	beq.n	80051c4 <memmove+0x28>
 80051b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ba:	e7f8      	b.n	80051ae <memmove+0x12>
 80051bc:	4402      	add	r2, r0
 80051be:	4601      	mov	r1, r0
 80051c0:	428a      	cmp	r2, r1
 80051c2:	d100      	bne.n	80051c6 <memmove+0x2a>
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ce:	e7f7      	b.n	80051c0 <memmove+0x24>

080051d0 <_sbrk_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d06      	ldr	r5, [pc, #24]	; (80051ec <_sbrk_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fc fb1e 	bl	800181c <_sbrk>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_sbrk_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_sbrk_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000334 	.word	0x20000334

080051f0 <memcpy>:
 80051f0:	440a      	add	r2, r1
 80051f2:	4291      	cmp	r1, r2
 80051f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051f8:	d100      	bne.n	80051fc <memcpy+0xc>
 80051fa:	4770      	bx	lr
 80051fc:	b510      	push	{r4, lr}
 80051fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005206:	4291      	cmp	r1, r2
 8005208:	d1f9      	bne.n	80051fe <memcpy+0xe>
 800520a:	bd10      	pop	{r4, pc}

0800520c <_realloc_r>:
 800520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005210:	4680      	mov	r8, r0
 8005212:	4614      	mov	r4, r2
 8005214:	460e      	mov	r6, r1
 8005216:	b921      	cbnz	r1, 8005222 <_realloc_r+0x16>
 8005218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800521c:	4611      	mov	r1, r2
 800521e:	f7ff bc49 	b.w	8004ab4 <_malloc_r>
 8005222:	b92a      	cbnz	r2, 8005230 <_realloc_r+0x24>
 8005224:	f7ff fbda 	bl	80049dc <_free_r>
 8005228:	4625      	mov	r5, r4
 800522a:	4628      	mov	r0, r5
 800522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005230:	f000 f81b 	bl	800526a <_malloc_usable_size_r>
 8005234:	4284      	cmp	r4, r0
 8005236:	4607      	mov	r7, r0
 8005238:	d802      	bhi.n	8005240 <_realloc_r+0x34>
 800523a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800523e:	d812      	bhi.n	8005266 <_realloc_r+0x5a>
 8005240:	4621      	mov	r1, r4
 8005242:	4640      	mov	r0, r8
 8005244:	f7ff fc36 	bl	8004ab4 <_malloc_r>
 8005248:	4605      	mov	r5, r0
 800524a:	2800      	cmp	r0, #0
 800524c:	d0ed      	beq.n	800522a <_realloc_r+0x1e>
 800524e:	42bc      	cmp	r4, r7
 8005250:	4622      	mov	r2, r4
 8005252:	4631      	mov	r1, r6
 8005254:	bf28      	it	cs
 8005256:	463a      	movcs	r2, r7
 8005258:	f7ff ffca 	bl	80051f0 <memcpy>
 800525c:	4631      	mov	r1, r6
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fbbc 	bl	80049dc <_free_r>
 8005264:	e7e1      	b.n	800522a <_realloc_r+0x1e>
 8005266:	4635      	mov	r5, r6
 8005268:	e7df      	b.n	800522a <_realloc_r+0x1e>

0800526a <_malloc_usable_size_r>:
 800526a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526e:	1f18      	subs	r0, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	bfbc      	itt	lt
 8005274:	580b      	ldrlt	r3, [r1, r0]
 8005276:	18c0      	addlt	r0, r0, r3
 8005278:	4770      	bx	lr
	...

0800527c <_init>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr

08005288 <_fini>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr
